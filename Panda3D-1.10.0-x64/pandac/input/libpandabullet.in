1509984235
3 2
14 libpandabullet 4 fCJ_ 14 panda3d.bullet 
772
764 19 get_default_up_axis 0 1 0 19 get_default_up_axis 0 1 762 10
/**
 *
 */
39
BulletUpAxis get_default_up_axis(void);

765 18 get_bullet_version 0 1 0 18 get_bullet_version 0 1 763 60
/**
 * Returns the version of the linked Bullet library.
 */
29
int get_bullet_version(void);

766 5 empty 0 4 1537 19 BulletRayHit::empty 0 1 3 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
53
static inline BulletRayHit BulletRayHit::empty(void);

767 8 get_node 0 4 1537 22 BulletRayHit::get_node 0 1 4 10
/**
 *
 */
46
PandaNode *BulletRayHit::get_node(void) const;

768 11 get_hit_pos 0 4 1537 25 BulletRayHit::get_hit_pos 0 1 5 10
/**
 *
 */
46
LPoint3 BulletRayHit::get_hit_pos(void) const;

769 14 get_hit_normal 0 4 1537 28 BulletRayHit::get_hit_normal 0 1 6 10
/**
 *
 */
50
LVector3 BulletRayHit::get_hit_normal(void) const;

770 16 get_hit_fraction 0 4 1537 30 BulletRayHit::get_hit_fraction 0 1 7 10
/**
 *
 */
55
PN_stdfloat BulletRayHit::get_hit_fraction(void) const;

771 14 get_shape_part 0 4 1537 28 BulletRayHit::get_shape_part 0 1 8 10
/**
 *
 */
45
int BulletRayHit::get_shape_part(void) const;

772 18 get_triangle_index 0 4 1537 32 BulletRayHit::get_triangle_index 0 1 9 10
/**
 *
 */
49
int BulletRayHit::get_triangle_index(void) const;

773 12 BulletRayHit 0 4 1537 26 BulletRayHit::BulletRayHit 0 2 1 2 0
117
inline BulletRayHit::BulletRayHit(void) = default;
inline BulletRayHit::BulletRayHit(BulletRayHit const &) = default;

774 13 ~BulletRayHit 0 4 1537 27 BulletRayHit::~BulletRayHit 0 0 0
34
BulletRayHit::~BulletRayHit(void);

775 34 upcast_to_AllHitsRayResultCallback 0 12 1547 58 BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback 0 1 17 62
upcast from BulletAllHitsRayResult to AllHitsRayResultCallback
109
btCollisionWorld::AllHitsRayResultCallback *BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback(void);

776 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 8 0 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 1 18 64
downcast from AllHitsRayResultCallback to BulletAllHitsRayResult
134
BulletAllHitsRayResult *downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult(btCollisionWorld::AllHitsRayResultCallback *this);

777 5 empty 0 4 1547 29 BulletAllHitsRayResult::empty 0 1 10 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
73
static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void);

778 12 get_from_pos 0 4 1547 36 BulletAllHitsRayResult::get_from_pos 0 1 11 10
/**
 *
 */
57
LPoint3 BulletAllHitsRayResult::get_from_pos(void) const;

779 10 get_to_pos 0 4 1547 34 BulletAllHitsRayResult::get_to_pos 0 1 12 10
/**
 *
 */
55
LPoint3 BulletAllHitsRayResult::get_to_pos(void) const;

780 8 has_hits 0 4 1547 32 BulletAllHitsRayResult::has_hits 0 1 13 10
/**
 *
 */
50
bool BulletAllHitsRayResult::has_hits(void) const;

781 24 get_closest_hit_fraction 0 4 1547 48 BulletAllHitsRayResult::get_closest_hit_fraction 0 1 14 10
/**
 *
 */
73
PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const;

782 12 get_num_hits 0 4 1547 36 BulletAllHitsRayResult::get_num_hits 0 1 15 10
/**
 *
 */
53
int BulletAllHitsRayResult::get_num_hits(void) const;

783 7 get_hit 0 4 1547 31 BulletAllHitsRayResult::get_hit 0 1 16 10
/**
 *
 */
66
BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const;

784 0 0 0 0 0 0 0 0
0

785 23 ~BulletAllHitsRayResult 0 4 1547 47 BulletAllHitsRayResult::~BulletAllHitsRayResult 0 0 0
54
BulletAllHitsRayResult::~BulletAllHitsRayResult(void);

786 13 is_polyhedral 0 4 1550 26 BulletShape::is_polyhedral 0 1 19 10
/**
 *
 */
51
inline bool BulletShape::is_polyhedral(void) const;

787 9 is_convex 0 4 1550 22 BulletShape::is_convex 0 1 20 10
/**
 *
 */
47
inline bool BulletShape::is_convex(void) const;

788 12 is_convex_2d 0 4 1550 25 BulletShape::is_convex_2d 0 1 21 10
/**
 *
 */
50
inline bool BulletShape::is_convex_2d(void) const;

789 10 is_concave 0 4 1550 23 BulletShape::is_concave 0 1 22 10
/**
 *
 */
48
inline bool BulletShape::is_concave(void) const;

790 11 is_infinite 0 4 1550 24 BulletShape::is_infinite 0 1 23 10
/**
 *
 */
49
inline bool BulletShape::is_infinite(void) const;

791 13 is_non_moving 0 4 1550 26 BulletShape::is_non_moving 0 1 24 10
/**
 *
 */
51
inline bool BulletShape::is_non_moving(void) const;

792 12 is_soft_body 0 4 1550 25 BulletShape::is_soft_body 0 1 25 10
/**
 *
 */
50
inline bool BulletShape::is_soft_body(void) const;

793 10 set_margin 0 4 1550 23 BulletShape::set_margin 0 1 26 10
/**
 *
 */
49
void BulletShape::set_margin(PN_stdfloat margin);

794 8 get_name 0 4 1550 21 BulletShape::get_name 0 1 27 10
/**
 *
 */
46
char const *BulletShape::get_name(void) const;

795 10 get_margin 0 4 1550 23 BulletShape::get_margin 0 1 28 10
/**
 *
 */
48
PN_stdfloat BulletShape::get_margin(void) const;

796 16 get_shape_bounds 0 4 1550 29 BulletShape::get_shape_bounds 0 1 29 62
/**
 * Returns the current bounds of this collision shape.
 */
57
BoundingSphere BulletShape::get_shape_bounds(void) const;

797 14 get_class_type 0 4 1550 27 BulletShape::get_class_type 0 1 30 0
52
static TypeHandle BulletShape::get_class_type(void);

798 14 get_class_type 0 4 1557 49 BulletBaseCharacterControllerNode::get_class_type 0 1 31 0
74
static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void);

799 34 ~BulletBaseCharacterControllerNode 0 4 1557 69 BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode 0 0 0
76
BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode(void);

800 9 add_shape 0 4 1558 25 BulletBodyNode::add_shape 0 1 32 21
// Shapes

/**
 *
 */
116
void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = ::TransformState::make_identity());

801 12 remove_shape 0 4 1558 28 BulletBodyNode::remove_shape 0 1 33 10
/**
 *
 */
54
void BulletBodyNode::remove_shape(BulletShape *shape);

802 14 get_num_shapes 0 4 1558 30 BulletBodyNode::get_num_shapes 0 1 34 10
/**
 *
 */
54
inline int BulletBodyNode::get_num_shapes(void) const;

803 9 get_shape 0 4 1558 25 BulletBodyNode::get_shape 0 1 35 10
/**
 *
 */
61
inline BulletShape *BulletBodyNode::get_shape(int idx) const;

804 13 get_shape_pos 0 4 1558 29 BulletBodyNode::get_shape_pos 0 1 36 10
/**
 *
 */
53
LPoint3 BulletBodyNode::get_shape_pos(int idx) const;

805 13 get_shape_mat 0 4 1558 29 BulletBodyNode::get_shape_mat 0 1 37 10
/**
 *
 */
54
LMatrix4 BulletBodyNode::get_shape_mat(int idx) const;

806 19 get_shape_transform 0 4 1558 35 BulletBodyNode::get_shape_transform 0 1 38 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const;

807 16 get_shape_bounds 0 4 1558 32 BulletBodyNode::get_shape_bounds 0 1 39 81
/**
 * Returns the current bounds of all collision shapes owned by this body.
 */
60
BoundingSphere BulletBodyNode::get_shape_bounds(void) const;

808 32 add_shapes_from_collision_solids 0 4 1558 48 BulletBodyNode::add_shapes_from_collision_solids 0 1 40 10
/**
 *
 */
76
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode);

809 9 is_static 0 4 1558 25 BulletBodyNode::is_static 0 1 41 60
// Static and kinematic

// Static and kinematic

/**
 *
 */
50
inline bool BulletBodyNode::is_static(void) const;

810 12 is_kinematic 0 4 1558 28 BulletBodyNode::is_kinematic 0 1 42 10
/**
 *
 */
53
inline bool BulletBodyNode::is_kinematic(void) const;

811 10 set_static 0 4 1558 26 BulletBodyNode::set_static 0 1 43 10
/**
 *
 */
51
inline void BulletBodyNode::set_static(bool value);

812 13 set_kinematic 0 4 1558 29 BulletBodyNode::set_kinematic 0 1 44 10
/**
 *
 */
54
inline void BulletBodyNode::set_kinematic(bool value);

813 21 set_into_collide_mask 0 4 1558 37 BulletBodyNode::set_into_collide_mask 0 1 45 23
// Contacts

/**
 *
 */
68
inline void BulletBodyNode::set_into_collide_mask(CollideMask mask);

814 17 notify_collisions 0 4 1558 33 BulletBodyNode::notify_collisions 0 1 46 10
/**
 *
 */
58
inline void BulletBodyNode::notify_collisions(bool value);

815 19 notifies_collisions 0 4 1558 35 BulletBodyNode::notifies_collisions 0 1 47 10
/**
 *
 */
60
inline bool BulletBodyNode::notifies_collisions(void) const;

816 22 set_collision_response 0 4 1558 38 BulletBodyNode::set_collision_response 0 1 48 10
/**
 *
 */
63
inline void BulletBodyNode::set_collision_response(bool value);

817 22 get_collision_response 0 4 1558 38 BulletBodyNode::get_collision_response 0 1 49 10
/**
 *
 */
63
inline bool BulletBodyNode::get_collision_response(void) const;

818 20 check_collision_with 0 4 1558 36 BulletBodyNode::check_collision_with 0 1 50 10
/**
 *
 */
59
bool BulletBodyNode::check_collision_with(PandaNode *node);

819 20 has_contact_response 0 4 1558 36 BulletBodyNode::has_contact_response 0 1 51 10
/**
 *
 */
54
bool BulletBodyNode::has_contact_response(void) const;

820 32 get_contact_processing_threshold 0 4 1558 48 BulletBodyNode::get_contact_processing_threshold 0 1 52 10
/**
 *
 */
73
PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const;

821 32 set_contact_processing_threshold 0 4 1558 48 BulletBodyNode::set_contact_processing_threshold 0 1 53 106
/**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */
77
void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold);

822 9 is_active 0 4 1558 25 BulletBodyNode::is_active 0 1 54 44
// Deactivation

// Deactivation

/**
 *
 */
43
bool BulletBodyNode::is_active(void) const;

823 10 set_active 0 4 1558 26 BulletBodyNode::set_active 0 1 55 10
/**
 *
 */
65
void BulletBodyNode::set_active(bool active, bool force = false);

824 12 force_active 0 4 1558 28 BulletBodyNode::force_active 0 1 56 10
/**
 *
 */
47
void BulletBodyNode::force_active(bool active);

825 21 set_deactivation_time 0 4 1558 37 BulletBodyNode::set_deactivation_time 0 1 57 10
/**
 *
 */
59
void BulletBodyNode::set_deactivation_time(PN_stdfloat dt);

826 21 get_deactivation_time 0 4 1558 37 BulletBodyNode::get_deactivation_time 0 1 58 10
/**
 *
 */
62
PN_stdfloat BulletBodyNode::get_deactivation_time(void) const;

827 24 set_deactivation_enabled 0 4 1558 40 BulletBodyNode::set_deactivation_enabled 0 1 59 163
/**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */
60
void BulletBodyNode::set_deactivation_enabled(bool enabled);

828 23 is_deactivation_enabled 0 4 1558 39 BulletBodyNode::is_deactivation_enabled 0 1 60 10
/**
 *
 */
57
bool BulletBodyNode::is_deactivation_enabled(void) const;

829 17 set_debug_enabled 0 4 1558 33 BulletBodyNode::set_debug_enabled 0 1 61 180
// Debug Visualisation

// Debug Visualisation

/**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */
66
inline void BulletBodyNode::set_debug_enabled(bool const enabled);

830 16 is_debug_enabled 0 4 1558 32 BulletBodyNode::is_debug_enabled 0 1 62 141
/**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */
57
inline bool BulletBodyNode::is_debug_enabled(void) const;

831 15 get_restitution 0 4 1558 31 BulletBodyNode::get_restitution 0 1 63 68
// Friction and Restitution

// Friction and Restitution

/**
 *
 */
63
inline PN_stdfloat BulletBodyNode::get_restitution(void) const;

832 15 set_restitution 0 4 1558 31 BulletBodyNode::set_restitution 0 1 64 10
/**
 *
 */
69
inline void BulletBodyNode::set_restitution(PN_stdfloat restitution);

833 12 get_friction 0 4 1558 28 BulletBodyNode::get_friction 0 1 65 10
/**
 *
 */
60
inline PN_stdfloat BulletBodyNode::get_friction(void) const;

834 12 set_friction 0 4 1558 28 BulletBodyNode::set_friction 0 1 66 10
/**
 *
 */
63
inline void BulletBodyNode::set_friction(PN_stdfloat friction);

835 24 has_anisotropic_friction 0 4 1558 40 BulletBodyNode::has_anisotropic_friction 0 1 67 10
/**
 *
 */
65
inline bool BulletBodyNode::has_anisotropic_friction(void) const;

836 24 set_anisotropic_friction 0 4 1558 40 BulletBodyNode::set_anisotropic_friction 0 1 68 10
/**
 *
 */
73
void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction);

837 24 get_anisotropic_friction 0 4 1558 40 BulletBodyNode::get_anisotropic_friction 0 1 69 10
/**
 *
 */
63
LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const;

838 27 get_ccd_swept_sphere_radius 0 4 1558 43 BulletBodyNode::get_ccd_swept_sphere_radius 0 1 70 26
// CCD

// CCD

/**
 *
 */
68
PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const;

839 24 get_ccd_motion_threshold 0 4 1558 40 BulletBodyNode::get_ccd_motion_threshold 0 1 71 10
/**
 *
 */
65
PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const;

840 27 set_ccd_swept_sphere_radius 0 4 1558 43 BulletBodyNode::set_ccd_swept_sphere_radius 0 1 72 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius);

841 24 set_ccd_motion_threshold 0 4 1558 40 BulletBodyNode::set_ccd_motion_threshold 0 1 73 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold);

842 19 set_transform_dirty 0 4 1558 35 BulletBodyNode::set_transform_dirty 0 1 74 228
// Special

/**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */
47
void BulletBodyNode::set_transform_dirty(void);

843 0 0 0 0 0 0 0 0
0

844 0 0 0 0 0 0 0 0
0

845 0 0 0 0 0 0 0 0
0

846 0 0 0 0 0 0 0 0
0

847 14 get_class_type 0 4 1558 30 BulletBodyNode::get_class_type 0 1 75 0
55
static TypeHandle BulletBodyNode::get_class_type(void);

848 14 BulletBoxShape 0 4 1565 30 BulletBoxShape::BulletBoxShape 0 2 76 77 22
/**
 *
 */

/**
 *
 */
128
BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents);
inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy);

849 10 operator = 0 4 1565 26 BulletBoxShape::operator = 0 1 78 0
67
inline void BulletBoxShape::operator =(BulletBoxShape const &copy);

850 31 get_half_extents_without_margin 0 4 1565 47 BulletBoxShape::get_half_extents_without_margin 0 1 79 10
/**
 *
 */
70
LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const;

851 28 get_half_extents_with_margin 0 4 1565 44 BulletBoxShape::get_half_extents_with_margin 0 1 80 10
/**
 *
 */
67
LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const;

852 15 make_from_solid 0 4 1565 31 BulletBoxShape::make_from_solid 0 1 81 10
/**
 *
 */
82
static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid);

853 14 get_class_type 0 4 1565 30 BulletBoxShape::get_class_type 0 1 82 0
55
static TypeHandle BulletBoxShape::get_class_type(void);

854 18 BulletCapsuleShape 0 4 1566 38 BulletCapsuleShape::BulletCapsuleShape 0 2 83 84 22
/**
 *
 */

/**
 *
 */
184
BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy);

855 10 operator = 0 4 1566 30 BulletCapsuleShape::operator = 0 1 85 0
75
inline void BulletCapsuleShape::operator =(BulletCapsuleShape const &copy);

856 10 get_radius 0 4 1566 30 BulletCapsuleShape::get_radius 0 1 86 10
/**
 *
 */
62
inline PN_stdfloat BulletCapsuleShape::get_radius(void) const;

857 15 get_half_height 0 4 1566 35 BulletCapsuleShape::get_half_height 0 1 87 10
/**
 *
 */
67
inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const;

858 14 get_class_type 0 4 1566 34 BulletCapsuleShape::get_class_type 0 1 88 0
59
static TypeHandle BulletCapsuleShape::get_class_type(void);

859 29 BulletCharacterControllerNode 0 4 1567 60 BulletCharacterControllerNode::BulletCharacterControllerNode 0 1 89 10
/**
 *
 */
138
BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character");

860 19 set_linear_movement 0 4 1567 50 BulletCharacterControllerNode::set_linear_movement 0 1 90 10
/**
 *
 */
97
void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local);

861 20 set_angular_movement 0 4 1567 51 BulletCharacterControllerNode::set_angular_movement 0 1 91 10
/**
 *
 */
76
void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega);

862 9 get_shape 0 4 1567 40 BulletCharacterControllerNode::get_shape 0 1 92 10
/**
 *
 */
66
BulletShape *BulletCharacterControllerNode::get_shape(void) const;

863 11 set_gravity 0 4 1567 42 BulletCharacterControllerNode::set_gravity 0 1 93 10
/**
 *
 */
69
void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity);

864 11 get_gravity 0 4 1567 42 BulletCharacterControllerNode::get_gravity 0 1 94 10
/**
 *
 */
67
PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const;

865 14 set_fall_speed 0 4 1567 45 BulletCharacterControllerNode::set_fall_speed 0 1 95 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed);

866 14 set_jump_speed 0 4 1567 45 BulletCharacterControllerNode::set_jump_speed 0 1 96 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed);

867 19 set_max_jump_height 0 4 1567 50 BulletCharacterControllerNode::set_max_jump_height 0 1 97 10
/**
 *
 */
85
void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height);

868 13 set_max_slope 0 4 1567 44 BulletCharacterControllerNode::set_max_slope 0 1 98 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope);

869 13 get_max_slope 0 4 1567 44 BulletCharacterControllerNode::get_max_slope 0 1 99 10
/**
 *
 */
69
PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const;

870 24 set_use_ghost_sweep_test 0 4 1567 55 BulletCharacterControllerNode::set_use_ghost_sweep_test 0 1 100 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value);

871 12 is_on_ground 0 4 1567 43 BulletCharacterControllerNode::is_on_ground 0 1 101 10
/**
 *
 */
61
bool BulletCharacterControllerNode::is_on_ground(void) const;

872 8 can_jump 0 4 1567 39 BulletCharacterControllerNode::can_jump 0 1 102 10
/**
 *
 */
57
bool BulletCharacterControllerNode::can_jump(void) const;

873 7 do_jump 0 4 1567 38 BulletCharacterControllerNode::do_jump 0 1 103 10
/**
 *
 */
50
void BulletCharacterControllerNode::do_jump(void);

874 14 get_class_type 0 4 1567 45 BulletCharacterControllerNode::get_class_type 0 1 104 0
70
static TypeHandle BulletCharacterControllerNode::get_class_type(void);

875 34 upcast_to_ClosestRayResultCallback 0 12 1568 61 BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback 0 1 116 65
upcast from BulletClosestHitRayResult to ClosestRayResultCallback
112
btCollisionWorld::ClosestRayResultCallback *BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback(void);

876 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 8 0 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 1 117 67
downcast from ClosestRayResultCallback to BulletClosestHitRayResult
140
BulletClosestHitRayResult *downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult(btCollisionWorld::ClosestRayResultCallback *this);

877 5 empty 0 4 1568 32 BulletClosestHitRayResult::empty 0 1 106 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void);

878 12 get_from_pos 0 4 1568 39 BulletClosestHitRayResult::get_from_pos 0 1 107 10
/**
 *
 */
60
LPoint3 BulletClosestHitRayResult::get_from_pos(void) const;

879 10 get_to_pos 0 4 1568 37 BulletClosestHitRayResult::get_to_pos 0 1 108 10
/**
 *
 */
58
LPoint3 BulletClosestHitRayResult::get_to_pos(void) const;

880 7 has_hit 0 4 1568 34 BulletClosestHitRayResult::has_hit 0 1 109 10
/**
 *
 */
52
bool BulletClosestHitRayResult::has_hit(void) const;

881 8 get_node 0 4 1568 35 BulletClosestHitRayResult::get_node 0 1 110 10
/**
 *
 */
59
PandaNode *BulletClosestHitRayResult::get_node(void) const;

882 11 get_hit_pos 0 4 1568 38 BulletClosestHitRayResult::get_hit_pos 0 1 111 10
/**
 *
 */
59
LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const;

883 14 get_hit_normal 0 4 1568 41 BulletClosestHitRayResult::get_hit_normal 0 1 112 10
/**
 *
 */
63
LVector3 BulletClosestHitRayResult::get_hit_normal(void) const;

884 16 get_hit_fraction 0 4 1568 43 BulletClosestHitRayResult::get_hit_fraction 0 1 113 10
/**
 *
 */
68
PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const;

885 14 get_shape_part 0 4 1568 41 BulletClosestHitRayResult::get_shape_part 0 1 114 10
/**
 *
 */
58
int BulletClosestHitRayResult::get_shape_part(void) const;

886 18 get_triangle_index 0 4 1568 45 BulletClosestHitRayResult::get_triangle_index 0 1 115 10
/**
 *
 */
62
int BulletClosestHitRayResult::get_triangle_index(void) const;

887 25 BulletClosestHitRayResult 0 4 1568 52 BulletClosestHitRayResult::BulletClosestHitRayResult 0 1 105 10
/**
 *
 */
105
inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default;

888 26 ~BulletClosestHitRayResult 0 4 1568 53 BulletClosestHitRayResult::~BulletClosestHitRayResult 0 0 0
60
BulletClosestHitRayResult::~BulletClosestHitRayResult(void);

889 37 upcast_to_ClosestConvexResultCallback 0 12 1570 66 BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback 0 1 127 70
upcast from BulletClosestHitSweepResult to ClosestConvexResultCallback
120
btCollisionWorld::ClosestConvexResultCallback *BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback(void);

890 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 8 0 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 1 128 72
downcast from ClosestConvexResultCallback to BulletClosestHitSweepResult
150
BulletClosestHitSweepResult *downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult(btCollisionWorld::ClosestConvexResultCallback *this);

891 5 empty 0 4 1570 34 BulletClosestHitSweepResult::empty 0 1 119 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
83
static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void);

892 12 get_from_pos 0 4 1570 41 BulletClosestHitSweepResult::get_from_pos 0 1 120 10
/**
 *
 */
62
LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const;

893 10 get_to_pos 0 4 1570 39 BulletClosestHitSweepResult::get_to_pos 0 1 121 10
/**
 *
 */
60
LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const;

894 7 has_hit 0 4 1570 36 BulletClosestHitSweepResult::has_hit 0 1 122 10
/**
 *
 */
54
bool BulletClosestHitSweepResult::has_hit(void) const;

895 8 get_node 0 4 1570 37 BulletClosestHitSweepResult::get_node 0 1 123 10
/**
 *
 */
61
PandaNode *BulletClosestHitSweepResult::get_node(void) const;

896 11 get_hit_pos 0 4 1570 40 BulletClosestHitSweepResult::get_hit_pos 0 1 124 10
/**
 *
 */
61
LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const;

897 14 get_hit_normal 0 4 1570 43 BulletClosestHitSweepResult::get_hit_normal 0 1 125 10
/**
 *
 */
65
LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const;

898 16 get_hit_fraction 0 4 1570 45 BulletClosestHitSweepResult::get_hit_fraction 0 1 126 10
/**
 *
 */
70
PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const;

899 27 BulletClosestHitSweepResult 0 4 1570 56 BulletClosestHitSweepResult::BulletClosestHitSweepResult 0 1 118 10
/**
 *
 */
111
inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default;

900 28 ~BulletClosestHitSweepResult 0 4 1570 57 BulletClosestHitSweepResult::~BulletClosestHitSweepResult 0 0 0
64
BulletClosestHitSweepResult::~BulletClosestHitSweepResult(void);

901 15 BulletConeShape 0 4 1572 32 BulletConeShape::BulletConeShape 0 2 129 130 22
/**
 *
 */

/**
 *
 */
169
BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletConeShape::BulletConeShape(BulletConeShape const &copy);

902 10 operator = 0 4 1572 27 BulletConeShape::operator = 0 1 131 0
69
inline void BulletConeShape::operator =(BulletConeShape const &copy);

903 10 get_radius 0 4 1572 27 BulletConeShape::get_radius 0 1 132 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_radius(void) const;

904 10 get_height 0 4 1572 27 BulletConeShape::get_height 0 1 133 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_height(void) const;

905 14 get_class_type 0 4 1572 31 BulletConeShape::get_class_type 0 1 134 0
56
static TypeHandle BulletConeShape::get_class_type(void);

906 16 get_rigid_body_a 0 4 1573 34 BulletConstraint::get_rigid_body_a 0 1 135 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void);

907 16 get_rigid_body_b 0 4 1573 34 BulletConstraint::get_rigid_body_b 0 1 136 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void);

908 15 enable_feedback 0 4 1573 33 BulletConstraint::enable_feedback 0 1 137 10
/**
 *
 */
51
void BulletConstraint::enable_feedback(bool value);

909 19 set_debug_draw_size 0 4 1573 37 BulletConstraint::set_debug_draw_size 0 1 138 10
/**
 *
 */
61
void BulletConstraint::set_debug_draw_size(PN_stdfloat size);

910 19 get_debug_draw_size 0 4 1573 37 BulletConstraint::get_debug_draw_size 0 1 139 10
/**
 *
 */
56
PN_stdfloat BulletConstraint::get_debug_draw_size(void);

911 19 get_applied_impulse 0 4 1573 37 BulletConstraint::get_applied_impulse 0 1 140 10
/**
 *
 */
62
PN_stdfloat BulletConstraint::get_applied_impulse(void) const;

912 22 set_breaking_threshold 0 4 1573 40 BulletConstraint::set_breaking_threshold 0 1 141 212
/**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */
76
inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold);

913 22 get_breaking_threshold 0 4 1573 40 BulletConstraint::get_breaking_threshold 0 1 142 73
/**
 * Returns the applied impluse limit for breaking the constraint.
 */
72
inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const;

914 11 set_enabled 0 4 1573 29 BulletConstraint::set_enabled 0 1 143 10
/**
 *
 */
56
inline void BulletConstraint::set_enabled(bool enabled);

915 10 is_enabled 0 4 1573 28 BulletConstraint::is_enabled 0 1 144 53
/**
 * Returns TRUE if the constraint is enabled.
 */
53
inline bool BulletConstraint::is_enabled(void) const;

916 9 set_param 0 4 1573 27 BulletConstraint::set_param 0 1 145 10
/**
 *
 */
106
void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1);

917 9 get_param 0 4 1573 27 BulletConstraint::get_param 0 1 146 10
/**
 *
 */
94
PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1);

918 19 BulletRigidBodyNode 0 4 1577 40 BulletRigidBodyNode::BulletRigidBodyNode 0 1 148 138
/**
 *
 */

/**
 * Do not call the copy constructor directly; instead, use make_copy() or
 * copy_subgraph() to make a copy of a node.
 */
78
explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid");

919 8 set_mass 0 4 1577 29 BulletRigidBodyNode::set_mass 0 1 149 295
// Mass & inertia

// Mass & inertia

/**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */
53
void BulletRigidBodyNode::set_mass(PN_stdfloat mass);

920 8 get_mass 0 4 1577 29 BulletRigidBodyNode::get_mass 0 1 150 128
/**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */
54
PN_stdfloat BulletRigidBodyNode::get_mass(void) const;

921 12 get_inv_mass 0 4 1577 33 BulletRigidBodyNode::get_inv_mass 0 1 151 52
/**
 * Returns the inverse mass of a rigid body.
 */
58
PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const;

922 11 set_inertia 0 4 1577 32 BulletRigidBodyNode::set_inertia 0 1 152 591
/**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */
64
void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia);

923 11 get_inertia 0 4 1577 32 BulletRigidBodyNode::get_inertia 0 1 153 174
/**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */
54
LVector3 BulletRigidBodyNode::get_inertia(void) const;

924 26 get_inv_inertia_diag_local 0 4 1577 47 BulletRigidBodyNode::get_inv_inertia_diag_local 0 1 154 10
/**
 *
 */
69
LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const;

925 28 get_inv_inertia_tensor_world 0 4 1577 49 BulletRigidBodyNode::get_inv_inertia_tensor_world 0 1 155 10
/**
 *
 */
71
LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const;

926 19 get_linear_velocity 0 4 1577 40 BulletRigidBodyNode::get_linear_velocity 0 1 156 36
// Velocity

// Velocity

/**
 *
 */
62
LVector3 BulletRigidBodyNode::get_linear_velocity(void) const;

927 20 get_angular_velocity 0 4 1577 41 BulletRigidBodyNode::get_angular_velocity 0 1 157 10
/**
 *
 */
63
LVector3 BulletRigidBodyNode::get_angular_velocity(void) const;

928 19 set_linear_velocity 0 4 1577 40 BulletRigidBodyNode::set_linear_velocity 0 1 158 10
/**
 *
 */
72
void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity);

929 20 set_angular_velocity 0 4 1577 41 BulletRigidBodyNode::set_angular_velocity 0 1 159 10
/**
 *
 */
73
void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity);

930 18 get_linear_damping 0 4 1577 39 BulletRigidBodyNode::get_linear_damping 0 1 160 34
// Damping

// Damping

/**
 *
 */
71
inline PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const;

931 19 get_angular_damping 0 4 1577 40 BulletRigidBodyNode::get_angular_damping 0 1 161 10
/**
 *
 */
72
inline PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const;

932 18 set_linear_damping 0 4 1577 39 BulletRigidBodyNode::set_linear_damping 0 1 162 10
/**
 *
 */
71
inline void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value);

933 19 set_angular_damping 0 4 1577 40 BulletRigidBodyNode::set_angular_damping 0 1 163 10
/**
 *
 */
72
inline void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value);

934 12 clear_forces 0 4 1577 33 BulletRigidBodyNode::clear_forces 0 1 164 21
// Forces

/**
 *
 */
45
void BulletRigidBodyNode::clear_forces(void);

935 11 apply_force 0 4 1577 32 BulletRigidBodyNode::apply_force 0 1 165 10
/**
 *
 */
81
void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos);

936 19 apply_central_force 0 4 1577 40 BulletRigidBodyNode::apply_central_force 0 1 166 10
/**
 *
 */
69
void BulletRigidBodyNode::apply_central_force(LVector3 const &force);

937 13 apply_impulse 0 4 1577 34 BulletRigidBodyNode::apply_impulse 0 1 167 10
/**
 *
 */
85
void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos);

938 21 apply_central_impulse 0 4 1577 42 BulletRigidBodyNode::apply_central_impulse 0 1 168 10
/**
 *
 */
73
void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse);

939 12 apply_torque 0 4 1577 33 BulletRigidBodyNode::apply_torque 0 1 169 10
/**
 *
 */
63
void BulletRigidBodyNode::apply_torque(LVector3 const &torque);

940 20 apply_torque_impulse 0 4 1577 41 BulletRigidBodyNode::apply_torque_impulse 0 1 170 10
/**
 *
 */
71
void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque);

941 15 get_total_force 0 4 1577 36 BulletRigidBodyNode::get_total_force 0 1 171 10
/**
 *
 */
58
LVector3 BulletRigidBodyNode::get_total_force(void) const;

942 16 get_total_torque 0 4 1577 37 BulletRigidBodyNode::get_total_torque 0 1 172 10
/**
 *
 */
59
LVector3 BulletRigidBodyNode::get_total_torque(void) const;

943 26 get_linear_sleep_threshold 0 4 1577 47 BulletRigidBodyNode::get_linear_sleep_threshold 0 1 173 66
// Deactivation thresholds

// Deactivation thresholds

/**
 *
 */
72
PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const;

944 27 get_angular_sleep_threshold 0 4 1577 48 BulletRigidBodyNode::get_angular_sleep_threshold 0 1 174 10
/**
 *
 */
73
PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const;

945 26 set_linear_sleep_threshold 0 4 1577 47 BulletRigidBodyNode::set_linear_sleep_threshold 0 1 175 10
/**
 *
 */
76
void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold);

946 27 set_angular_sleep_threshold 0 4 1577 48 BulletRigidBodyNode::set_angular_sleep_threshold 0 1 176 10
/**
 *
 */
77
void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold);

947 11 set_gravity 0 4 1577 32 BulletRigidBodyNode::set_gravity 0 1 177 34
// Gravity

// Gravity

/**
 *
 */
63
void BulletRigidBodyNode::set_gravity(LVector3 const &gravity);

948 11 get_gravity 0 4 1577 32 BulletRigidBodyNode::get_gravity 0 1 178 10
/**
 *
 */
54
LVector3 BulletRigidBodyNode::get_gravity(void) const;

949 17 get_linear_factor 0 4 1577 38 BulletRigidBodyNode::get_linear_factor 0 1 179 54
// Restrict movement

// Restrict movement

/**
 *
 */
60
LVector3 BulletRigidBodyNode::get_linear_factor(void) const;

950 18 get_angular_factor 0 4 1577 39 BulletRigidBodyNode::get_angular_factor 0 1 180 10
/**
 *
 */
61
LVector3 BulletRigidBodyNode::get_angular_factor(void) const;

951 17 set_linear_factor 0 4 1577 38 BulletRigidBodyNode::set_linear_factor 0 1 181 10
/**
 *
 */
68
void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor);

952 18 set_angular_factor 0 4 1577 39 BulletRigidBodyNode::set_angular_factor 0 1 182 10
/**
 *
 */
69
void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor);

953 15 pick_dirty_flag 0 4 1577 36 BulletRigidBodyNode::pick_dirty_flag 0 1 183 135
// Special

/**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */
48
bool BulletRigidBodyNode::pick_dirty_flag(void);

954 14 get_class_type 0 4 1577 35 BulletRigidBodyNode::get_class_type 0 1 184 0
60
static TypeHandle BulletRigidBodyNode::get_class_type(void);

955 14 get_class_type 0 4 1573 32 BulletConstraint::get_class_type 0 1 147 0
57
static TypeHandle BulletConstraint::get_class_type(void);

956 25 BulletConeTwistConstraint 0 4 1580 52 BulletConeTwistConstraint::BulletConeTwistConstraint 0 2 185 186 22
/**
 *
 */

/**
 *
 */
305
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a);
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b);

957 9 set_limit 0 4 1580 36 BulletConeTwistConstraint::set_limit 0 2 187 188 22
/**
 *
 */

/**
 *
 */
272
void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value);
void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

958 11 set_damping 0 4 1580 38 BulletConeTwistConstraint::set_damping 0 1 189 10
/**
 *
 */
65
void BulletConeTwistConstraint::set_damping(PN_stdfloat damping);

959 17 get_fix_threshold 0 4 1580 44 BulletConeTwistConstraint::get_fix_threshold 0 1 190 10
/**
 *
 */
69
PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const;

960 17 set_fix_threshold 0 4 1580 44 BulletConeTwistConstraint::set_fix_threshold 0 1 191 10
/**
 *
 */
73
void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold);

961 12 enable_motor 0 4 1580 39 BulletConeTwistConstraint::enable_motor 0 1 192 10
/**
 *
 */
58
void BulletConeTwistConstraint::enable_motor(bool enable);

962 21 set_max_motor_impulse 0 4 1580 48 BulletConeTwistConstraint::set_max_motor_impulse 0 1 193 10
/**
 *
 */
79
void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

963 32 set_max_motor_impulse_normalized 0 4 1580 59 BulletConeTwistConstraint::set_max_motor_impulse_normalized 0 1 194 10
/**
 *
 */
90
void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse);

964 16 set_motor_target 0 4 1580 43 BulletConeTwistConstraint::set_motor_target 0 1 195 10
/**
 *
 */
74
void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat);

965 36 set_motor_target_in_constraint_space 0 4 1580 63 BulletConeTwistConstraint::set_motor_target_in_constraint_space 0 1 196 10
/**
 *
 */
94
void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat);

966 10 set_frames 0 4 1580 37 BulletConeTwistConstraint::set_frames 0 1 197 10
/**
 *
 */
99
void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

967 11 get_frame_a 0 4 1580 38 BulletConeTwistConstraint::get_frame_a 0 1 198 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const;

968 11 get_frame_b 0 4 1580 38 BulletConeTwistConstraint::get_frame_b 0 1 199 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const;

969 14 get_class_type 0 4 1580 41 BulletConeTwistConstraint::get_class_type 0 1 200 0
66
static TypeHandle BulletConeTwistConstraint::get_class_type(void);

970 20 ~BulletManifoldPoint 0 4 1581 41 BulletManifoldPoint::~BulletManifoldPoint 0 0 10
/**
 *
 */
55
inline BulletManifoldPoint::~BulletManifoldPoint(void);

971 13 get_life_time 0 4 1581 34 BulletManifoldPoint::get_life_time 0 1 201 10
/**
 *
 */
51
int BulletManifoldPoint::get_life_time(void) const;

972 12 get_distance 0 4 1581 33 BulletManifoldPoint::get_distance 0 1 202 10
/**
 *
 */
58
PN_stdfloat BulletManifoldPoint::get_distance(void) const;

973 19 get_applied_impulse 0 4 1581 40 BulletManifoldPoint::get_applied_impulse 0 1 203 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const;

974 23 get_position_world_on_a 0 4 1581 44 BulletManifoldPoint::get_position_world_on_a 0 1 204 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const;

975 23 get_position_world_on_b 0 4 1581 44 BulletManifoldPoint::get_position_world_on_b 0 1 205 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const;

976 21 get_normal_world_on_b 0 4 1581 42 BulletManifoldPoint::get_normal_world_on_b 0 1 206 10
/**
 *
 */
64
LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const;

977 17 get_local_point_a 0 4 1581 38 BulletManifoldPoint::get_local_point_a 0 1 207 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_a(void) const;

978 17 get_local_point_b 0 4 1581 38 BulletManifoldPoint::get_local_point_b 0 1 208 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_b(void) const;

979 12 get_part_id0 0 4 1581 33 BulletManifoldPoint::get_part_id0 0 1 209 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id0(void) const;

980 12 get_part_id1 0 4 1581 33 BulletManifoldPoint::get_part_id1 0 1 210 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id1(void) const;

981 10 get_index0 0 4 1581 31 BulletManifoldPoint::get_index0 0 1 211 10
/**
 *
 */
48
int BulletManifoldPoint::get_index0(void) const;

982 10 get_index1 0 4 1581 31 BulletManifoldPoint::get_index1 0 1 212 10
/**
 *
 */
48
int BulletManifoldPoint::get_index1(void) const;

983 32 set_lateral_friction_initialized 0 4 1581 53 BulletManifoldPoint::set_lateral_friction_initialized 0 1 213 10
/**
 *
 */
78
inline void BulletManifoldPoint::set_lateral_friction_initialized(bool value);

984 25 set_lateral_friction_dir1 0 4 1581 46 BulletManifoldPoint::set_lateral_friction_dir1 0 1 214 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir);

985 25 set_lateral_friction_dir2 0 4 1581 46 BulletManifoldPoint::set_lateral_friction_dir2 0 1 215 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir);

986 19 set_contact_motion1 0 4 1581 40 BulletManifoldPoint::set_contact_motion1 0 1 216 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value);

987 19 set_contact_motion2 0 4 1581 40 BulletManifoldPoint::set_contact_motion2 0 1 217 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value);

988 21 set_combined_friction 0 4 1581 42 BulletManifoldPoint::set_combined_friction 0 1 218 10
/**
 *
 */
74
inline void BulletManifoldPoint::set_combined_friction(PN_stdfloat value);

989 24 set_combined_restitution 0 4 1581 45 BulletManifoldPoint::set_combined_restitution 0 1 219 10
/**
 *
 */
77
inline void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value);

990 19 set_applied_impulse 0 4 1581 40 BulletManifoldPoint::set_applied_impulse 0 1 220 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value);

991 28 set_applied_impulse_lateral1 0 4 1581 49 BulletManifoldPoint::set_applied_impulse_lateral1 0 1 221 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value);

992 28 set_applied_impulse_lateral2 0 4 1581 49 BulletManifoldPoint::set_applied_impulse_lateral2 0 1 222 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value);

993 16 set_contact_cfm1 0 4 1581 37 BulletManifoldPoint::set_contact_cfm1 0 1 223 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value);

994 16 set_contact_cfm2 0 4 1581 37 BulletManifoldPoint::set_contact_cfm2 0 1 224 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value);

995 32 get_lateral_friction_initialized 0 4 1581 53 BulletManifoldPoint::get_lateral_friction_initialized 0 1 225 10
/**
 *
 */
78
inline bool BulletManifoldPoint::get_lateral_friction_initialized(void) const;

996 25 get_lateral_friction_dir1 0 4 1581 46 BulletManifoldPoint::get_lateral_friction_dir1 0 1 226 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const;

997 25 get_lateral_friction_dir2 0 4 1581 46 BulletManifoldPoint::get_lateral_friction_dir2 0 1 227 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const;

998 19 get_contact_motion1 0 4 1581 40 BulletManifoldPoint::get_contact_motion1 0 1 228 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const;

999 19 get_contact_motion2 0 4 1581 40 BulletManifoldPoint::get_contact_motion2 0 1 229 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const;

1000 21 get_combined_friction 0 4 1581 42 BulletManifoldPoint::get_combined_friction 0 1 230 10
/**
 *
 */
74
inline PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const;

1001 24 get_combined_restitution 0 4 1581 45 BulletManifoldPoint::get_combined_restitution 0 1 231 10
/**
 *
 */
77
inline PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const;

1002 28 get_applied_impulse_lateral1 0 4 1581 49 BulletManifoldPoint::get_applied_impulse_lateral1 0 1 232 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const;

1003 28 get_applied_impulse_lateral2 0 4 1581 49 BulletManifoldPoint::get_applied_impulse_lateral2 0 1 233 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const;

1004 16 get_contact_cfm1 0 4 1581 37 BulletManifoldPoint::get_contact_cfm1 0 1 234 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const;

1005 16 get_contact_cfm2 0 4 1581 37 BulletManifoldPoint::get_contact_cfm2 0 1 235 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const;

1006 25 BulletContactCallbackData 0 4 1582 52 BulletContactCallbackData::BulletContactCallbackData 0 1 236 10
/**
 *
 */
163
inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1);

1007 12 get_manifold 0 4 1582 39 BulletContactCallbackData::get_manifold 0 1 237 10
/**
 *
 */
80
inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const;

1008 9 get_node0 0 4 1582 36 BulletContactCallbackData::get_node0 0 1 238 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node0(void) const;

1009 9 get_node1 0 4 1582 36 BulletContactCallbackData::get_node1 0 1 239 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node1(void) const;

1010 12 get_part_id0 0 4 1582 39 BulletContactCallbackData::get_part_id0 0 1 240 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id0(void) const;

1011 12 get_part_id1 0 4 1582 39 BulletContactCallbackData::get_part_id1 0 1 241 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id1(void) const;

1012 10 get_index0 0 4 1582 37 BulletContactCallbackData::get_index0 0 1 242 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index0(void) const;

1013 10 get_index1 0 4 1582 37 BulletContactCallbackData::get_index1 0 1 243 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index1(void) const;

1014 14 get_class_type 0 4 1582 41 BulletContactCallbackData::get_class_type 0 1 244 0
66
static TypeHandle BulletContactCallbackData::get_class_type(void);

1015 18 get_manifold_point 0 4 1584 33 BulletContact::get_manifold_point 0 1 245 10
/**
 *
 */
68
inline BulletManifoldPoint &BulletContact::get_manifold_point(void);

1016 9 get_node0 0 4 1584 24 BulletContact::get_node0 0 1 246 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node0(void) const;

1017 9 get_node1 0 4 1584 24 BulletContact::get_node1 0 1 247 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node1(void) const;

1018 8 get_idx0 0 4 1584 23 BulletContact::get_idx0 0 1 248 10
/**
 *
 */
47
inline int BulletContact::get_idx0(void) const;

1019 8 get_idx1 0 4 1584 23 BulletContact::get_idx1 0 1 249 10
/**
 *
 */
47
inline int BulletContact::get_idx1(void) const;

1020 12 get_part_id0 0 4 1584 27 BulletContact::get_part_id0 0 1 250 10
/**
 *
 */
51
inline int BulletContact::get_part_id0(void) const;

1021 12 get_part_id1 0 4 1584 27 BulletContact::get_part_id1 0 1 251 10
/**
 *
 */
51
inline int BulletContact::get_part_id1(void) const;

1022 14 ~BulletContact 0 4 1584 29 BulletContact::~BulletContact 0 0 0
36
BulletContact::~BulletContact(void);

1023 31 upcast_to_ContactResultCallback 0 12 1585 52 BulletContactResult::upcast_to_ContactResultCallback 0 1 254 56
upcast from BulletContactResult to ContactResultCallback
100
btCollisionWorld::ContactResultCallback *BulletContactResult::upcast_to_ContactResultCallback(void);

1024 53 downcast_ContactResultCallback_to_BulletContactResult 0 8 0 53 downcast_ContactResultCallback_to_BulletContactResult 0 1 255 58
downcast from ContactResultCallback to BulletContactResult
122
BulletContactResult *downcast_ContactResultCallback_to_BulletContactResult(btCollisionWorld::ContactResultCallback *this);

1025 16 get_num_contacts 0 4 1585 37 BulletContactResult::get_num_contacts 0 1 252 10
/**
 *
 */
61
inline int BulletContactResult::get_num_contacts(void) const;

1026 11 get_contact 0 4 1585 32 BulletContactResult::get_contact 0 1 253 10
/**
 *
 */
63
inline BulletContact BulletContactResult::get_contact(int idx);

1027 0 0 0 0 0 0 0 0
0

1028 20 ~BulletContactResult 0 4 1585 41 BulletContactResult::~BulletContactResult 0 0 0
48
BulletContactResult::~BulletContactResult(void);

1029 15 BulletDebugNode 0 4 1587 32 BulletDebugNode::BulletDebugNode 0 1 256 10
/**
 *
 */
61
BulletDebugNode::BulletDebugNode(char const *name = "debug");

1030 17 draw_mask_changed 0 6 1587 34 BulletDebugNode::draw_mask_changed 0 1 257 10
/**
 *
 */
54
virtual void BulletDebugNode::draw_mask_changed(void);

1031 14 show_wireframe 0 4 1587 31 BulletDebugNode::show_wireframe 0 1 258 10
/**
 *
 */
55
inline void BulletDebugNode::show_wireframe(bool show);

1032 16 show_constraints 0 4 1587 33 BulletDebugNode::show_constraints 0 1 259 10
/**
 *
 */
57
inline void BulletDebugNode::show_constraints(bool show);

1033 19 show_bounding_boxes 0 4 1587 36 BulletDebugNode::show_bounding_boxes 0 1 260 10
/**
 *
 */
60
inline void BulletDebugNode::show_bounding_boxes(bool show);

1034 12 show_normals 0 4 1587 29 BulletDebugNode::show_normals 0 1 261 10
/**
 *
 */
53
inline void BulletDebugNode::show_normals(bool show);

1035 18 get_show_wireframe 0 4 1587 35 BulletDebugNode::get_show_wireframe 0 1 262 10
/**
 *
 */
60
inline bool BulletDebugNode::get_show_wireframe(void) const;

1036 20 get_show_constraints 0 4 1587 37 BulletDebugNode::get_show_constraints 0 1 263 10
/**
 *
 */
62
inline bool BulletDebugNode::get_show_constraints(void) const;

1037 23 get_show_bounding_boxes 0 4 1587 40 BulletDebugNode::get_show_bounding_boxes 0 1 264 10
/**
 *
 */
65
inline bool BulletDebugNode::get_show_bounding_boxes(void) const;

1038 16 get_show_normals 0 4 1587 33 BulletDebugNode::get_show_normals 0 1 265 10
/**
 *
 */
58
inline bool BulletDebugNode::get_show_normals(void) const;

1039 14 get_class_type 0 4 1587 31 BulletDebugNode::get_class_type 0 1 266 0
56
static TypeHandle BulletDebugNode::get_class_type(void);

1040 15 BulletGhostNode 0 4 1588 32 BulletGhostNode::BulletGhostNode 0 1 267 10
/**
 *
 */
61
BulletGhostNode::BulletGhostNode(char const *name = "ghost");

1041 25 get_num_overlapping_nodes 0 4 1588 42 BulletGhostNode::get_num_overlapping_nodes 0 1 268 58
// Overlapping

// Overlapping

// Overlapping

/**
 *
 */
66
inline int BulletGhostNode::get_num_overlapping_nodes(void) const;

1042 20 get_overlapping_node 0 4 1588 37 BulletGhostNode::get_overlapping_node 0 1 269 10
/**
 *
 */
71
inline PandaNode *BulletGhostNode::get_overlapping_node(int idx) const;

1043 0 0 0 0 0 0 0 0
0

1044 14 get_class_type 0 4 1588 31 BulletGhostNode::get_class_type 0 1 270 0
56
static TypeHandle BulletGhostNode::get_class_type(void);

1045 26 ~BulletSoftBodyNodeElement 0 4 1589 53 BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement 0 0 10
/**
 *
 */
67
inline BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement(void);

1046 5 empty 0 4 1589 32 BulletSoftBodyNodeElement::empty 0 1 272 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void);

1047 7 get_pos 0 4 1589 34 BulletSoftBodyNodeElement::get_pos 0 1 273 10
/**
 *
 */
62
inline LPoint3 BulletSoftBodyNodeElement::get_pos(void) const;

1048 12 get_velocity 0 4 1589 39 BulletSoftBodyNodeElement::get_velocity 0 1 274 10
/**
 *
 */
68
inline LVector3 BulletSoftBodyNodeElement::get_velocity(void) const;

1049 10 get_normal 0 4 1589 37 BulletSoftBodyNodeElement::get_normal 0 1 275 10
/**
 *
 */
66
inline LVector3 BulletSoftBodyNodeElement::get_normal(void) const;

1050 12 get_inv_mass 0 4 1589 39 BulletSoftBodyNodeElement::get_inv_mass 0 1 276 10
/**
 *
 */
71
inline PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const;

1051 8 get_area 0 4 1589 35 BulletSoftBodyNodeElement::get_area 0 1 277 10
/**
 *
 */
67
inline PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const;

1052 11 is_attached 0 4 1589 38 BulletSoftBodyNodeElement::is_attached 0 1 278 10
/**
 *
 */
62
inline int BulletSoftBodyNodeElement::is_attached(void) const;

1053 25 BulletSoftBodyNodeElement 0 4 1589 52 BulletSoftBodyNodeElement::BulletSoftBodyNodeElement 0 1 271 10
/**
 *
 */
105
inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default;

1054 7 get_cfg 0 4 1590 27 BulletSoftBodyNode::get_cfg 0 1 279 10
/**
 *
 */
55
BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void);

1055 14 get_world_info 0 4 1590 34 BulletSoftBodyNode::get_world_info 0 1 280 10
/**
 *
 */
65
BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void);

1056 28 generate_bending_constraints 0 4 1590 48 BulletSoftBodyNode::generate_bending_constraints 0 1 281 10
/**
 *
 */
109
void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = NULL);

1057 21 randomize_constraints 0 4 1590 41 BulletSoftBodyNode::randomize_constraints 0 1 282 10
/**
 *
 */
53
void BulletSoftBodyNode::randomize_constraints(void);

1058 15 set_volume_mass 0 4 1590 35 BulletSoftBodyNode::set_volume_mass 0 1 283 36
// Mass, volume, density

/**
 *
 */
59
void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass);

1059 18 set_volume_density 0 4 1590 38 BulletSoftBodyNode::set_volume_density 0 1 284 10
/**
 *
 */
65
void BulletSoftBodyNode::set_volume_density(PN_stdfloat density);

1060 14 set_total_mass 0 4 1590 34 BulletSoftBodyNode::set_total_mass 0 1 285 10
/**
 *
 */
82
void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false);

1061 17 set_total_density 0 4 1590 37 BulletSoftBodyNode::set_total_density 0 1 286 10
/**
 *
 */
64
void BulletSoftBodyNode::set_total_density(PN_stdfloat density);

1062 8 set_mass 0 4 1590 28 BulletSoftBodyNode::set_mass 0 1 287 10
/**
 *
 */
62
void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass);

1063 8 get_mass 0 4 1590 28 BulletSoftBodyNode::get_mass 0 1 288 10
/**
 *
 */
57
PN_stdfloat BulletSoftBodyNode::get_mass(int node) const;

1064 14 get_total_mass 0 4 1590 34 BulletSoftBodyNode::get_total_mass 0 1 289 10
/**
 *
 */
59
PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const;

1065 10 get_volume 0 4 1590 30 BulletSoftBodyNode::get_volume 0 1 290 10
/**
 *
 */
55
PN_stdfloat BulletSoftBodyNode::get_volume(void) const;

1066 9 add_force 0 4 1590 29 BulletSoftBodyNode::add_force 0 2 291 292 32
// Force

/**
 *
 */

/**
 *
 */
127
void BulletSoftBodyNode::add_force(LVector3 const &force);
void BulletSoftBodyNode::add_force(LVector3 const &force, int node);

1067 12 set_velocity 0 4 1590 32 BulletSoftBodyNode::set_velocity 0 1 293 10
/**
 *
 */
64
void BulletSoftBodyNode::set_velocity(LVector3 const &velocity);

1068 12 add_velocity 0 4 1590 32 BulletSoftBodyNode::add_velocity 0 2 294 295 22
/**
 *
 */

/**
 *
 */
139
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity);
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node);

1069 17 set_wind_velocity 0 4 1590 37 BulletSoftBodyNode::set_wind_velocity 0 1 296 10
/**
 *
 */
69
void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity);

1070 17 get_wind_velocity 0 4 1590 37 BulletSoftBodyNode::get_wind_velocity 0 1 297 10
/**
 *
 */
59
LVector3 BulletSoftBodyNode::get_wind_velocity(void) const;

1071 8 set_pose 0 4 1590 28 BulletSoftBodyNode::set_pose 0 1 298 10
/**
 *
 */
61
void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe);

1072 8 get_aabb 0 4 1590 28 BulletSoftBodyNode::get_aabb 0 1 299 10
/**
 *
 */
53
BoundingBox BulletSoftBodyNode::get_aabb(void) const;

1073 17 generate_clusters 0 4 1590 37 BulletSoftBodyNode::generate_clusters 0 1 300 22
// Cluster

/**
 *
 */
76
void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192);

1074 15 release_cluster 0 4 1590 35 BulletSoftBodyNode::release_cluster 0 1 301 10
/**
 *
 */
52
void BulletSoftBodyNode::release_cluster(int index);

1075 16 release_clusters 0 4 1590 36 BulletSoftBodyNode::release_clusters 0 1 302 10
/**
 *
 */
48
void BulletSoftBodyNode::release_clusters(void);

1076 16 get_num_clusters 0 4 1590 36 BulletSoftBodyNode::get_num_clusters 0 1 303 10
/**
 *
 */
53
int BulletSoftBodyNode::get_num_clusters(void) const;

1077 11 cluster_com 0 4 1590 31 BulletSoftBodyNode::cluster_com 0 1 304 10
/**
 *
 */
61
LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const;

1078 9 link_geom 0 4 1590 29 BulletSoftBodyNode::link_geom 0 1 305 24
// Rendering

/**
 *
 */
47
void BulletSoftBodyNode::link_geom(Geom *geom);

1079 11 unlink_geom 0 4 1590 31 BulletSoftBodyNode::unlink_geom 0 1 306 10
/**
 *
 */
43
void BulletSoftBodyNode::unlink_geom(void);

1080 10 link_curve 0 4 1590 30 BulletSoftBodyNode::link_curve 0 1 307 10
/**
 *
 */
64
void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve);

1081 12 unlink_curve 0 4 1590 32 BulletSoftBodyNode::unlink_curve 0 1 308 10
/**
 *
 */
44
void BulletSoftBodyNode::unlink_curve(void);

1082 12 link_surface 0 4 1590 32 BulletSoftBodyNode::link_surface 0 1 309 10
/**
 *
 */
70
void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface);

1083 14 unlink_surface 0 4 1590 34 BulletSoftBodyNode::unlink_surface 0 1 310 10
/**
 *
 */
46
void BulletSoftBodyNode::unlink_surface(void);

1084 13 append_anchor 0 4 1590 33 BulletSoftBodyNode::append_anchor 0 2 311 312 34
// Anchors

/**
 *
 */

/**
 *
 */
220
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false);
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false);

1085 19 append_linear_joint 0 4 1590 39 BulletSoftBodyNode::append_linear_joint 0 2 313 314 32
// Links

/**
 *
 */

/**
 *
 */
310
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);

1086 20 append_angular_joint 0 4 1590 40 BulletSoftBodyNode::append_angular_joint 0 1 315 10
/**
 *
 */
200
void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = NULL);

1087 17 get_num_materials 0 4 1590 37 BulletSoftBodyNode::get_num_materials 0 1 316 52
// Materials

// Materials

// Materials

/**
 *
 */
54
int BulletSoftBodyNode::get_num_materials(void) const;

1088 12 get_material 0 4 1590 32 BulletSoftBodyNode::get_material 0 1 317 10
/**
 *
 */
71
BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const;

1089 15 append_material 0 4 1590 35 BulletSoftBodyNode::append_material 0 1 318 10
/**
 *
 */
65
BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void);

1090 13 get_num_nodes 0 4 1590 33 BulletSoftBodyNode::get_num_nodes 0 1 319 40
// Nodes

// Nodes

// Nodes

/**
 *
 */
50
int BulletSoftBodyNode::get_num_nodes(void) const;

1091 8 get_node 0 4 1590 28 BulletSoftBodyNode::get_node 0 1 320 10
/**
 *
 */
70
BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const;

1092 22 get_closest_node_index 0 4 1590 42 BulletSoftBodyNode::get_closest_node_index 0 1 321 212
/**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */
76
int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local);

1093 9 make_rope 0 4 1590 29 BulletSoftBodyNode::make_rope 0 1 322 22
// Factory

/**
 *
 */
161
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds);

1094 10 make_patch 0 4 1590 30 BulletSoftBodyNode::make_patch 0 1 323 10
/**
 *
 */
248
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags);

1095 14 make_ellipsoid 0 4 1590 34 BulletSoftBodyNode::make_ellipsoid 0 1 324 10
/**
 *
 */
162
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res);

1096 13 make_tri_mesh 0 4 1590 33 BulletSoftBodyNode::make_tri_mesh 0 2 325 326 22
/**
 *
 */

/**
 *
 */
334
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true);

1097 13 make_tet_mesh 0 4 1590 33 BulletSoftBodyNode::make_tet_mesh 0 2 327 328 22
/**
 *
 */

/**
 *
 */
325
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node);

1098 21 ~BulletSoftBodyConfig 0 4 1591 43 BulletSoftBodyConfig::~BulletSoftBodyConfig 0 0 10
/**
 *
 */
57
inline BulletSoftBodyConfig::~BulletSoftBodyConfig(void);

1099 25 clear_all_collision_flags 0 4 1591 47 BulletSoftBodyConfig::clear_all_collision_flags 0 1 331 10
/**
 *
 */
59
void BulletSoftBodyConfig::clear_all_collision_flags(void);

1100 18 set_collision_flag 0 4 1591 40 BulletSoftBodyConfig::set_collision_flag 0 1 332 10
/**
 *
 */
100
void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value);

1101 18 get_collision_flag 0 4 1591 40 BulletSoftBodyConfig::get_collision_flag 0 1 333 10
/**
 *
 */
94
bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const;

1102 14 set_aero_model 0 4 1591 36 BulletSoftBodyConfig::set_aero_model 0 1 334 10
/**
 *
 */
81
void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value);

1103 14 get_aero_model 0 4 1591 36 BulletSoftBodyConfig::get_aero_model 0 1 335 10
/**
 *
 */
81
BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const;

1104 32 set_velocities_correction_factor 0 4 1591 54 BulletSoftBodyConfig::set_velocities_correction_factor 0 1 336 36
/**
 * Setter for property kVCF.
 */
86
inline void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value);

1105 23 set_damping_coefficient 0 4 1591 45 BulletSoftBodyConfig::set_damping_coefficient 0 1 337 35
/**
 * Setter for property kDP.
 */
77
inline void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value);

1106 20 set_drag_coefficient 0 4 1591 42 BulletSoftBodyConfig::set_drag_coefficient 0 1 338 35
/**
 * Setter for property kDG.
 */
74
inline void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value);

1107 20 set_lift_coefficient 0 4 1591 42 BulletSoftBodyConfig::set_lift_coefficient 0 1 339 35
/**
 * Setter for property kLF.
 */
74
inline void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value);

1108 24 set_pressure_coefficient 0 4 1591 46 BulletSoftBodyConfig::set_pressure_coefficient 0 1 340 35
/**
 * Setter for property kPR.
 */
78
inline void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value);

1109 35 set_volume_conservation_coefficient 0 4 1591 57 BulletSoftBodyConfig::set_volume_conservation_coefficient 0 1 341 35
/**
 * Setter for property kVC.
 */
89
inline void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value);

1110 32 set_dynamic_friction_coefficient 0 4 1591 54 BulletSoftBodyConfig::set_dynamic_friction_coefficient 0 1 342 35
/**
 * Setter for property kDF.
 */
86
inline void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value);

1111 29 set_pose_matching_coefficient 0 4 1591 51 BulletSoftBodyConfig::set_pose_matching_coefficient 0 1 343 35
/**
 * Setter for property kMT.
 */
83
inline void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value);

1112 27 set_rigid_contacts_hardness 0 4 1591 49 BulletSoftBodyConfig::set_rigid_contacts_hardness 0 1 344 36
/**
 * Setter for property kCHR.
 */
81
inline void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value);

1113 29 set_kinetic_contacts_hardness 0 4 1591 51 BulletSoftBodyConfig::set_kinetic_contacts_hardness 0 1 345 36
/**
 * Setter for property kKHR.
 */
83
inline void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value);

1114 26 set_soft_contacts_hardness 0 4 1591 48 BulletSoftBodyConfig::set_soft_contacts_hardness 0 1 346 36
/**
 * Setter for property kSHR.
 */
80
inline void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value);

1115 20 set_anchors_hardness 0 4 1591 42 BulletSoftBodyConfig::set_anchors_hardness 0 1 347 36
/**
 * Setter for property kAHR.
 */
74
inline void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value);

1116 26 set_soft_vs_rigid_hardness 0 4 1591 48 BulletSoftBodyConfig::set_soft_vs_rigid_hardness 0 1 348 40
/**
 * Setter for property kSRHR_CL.
 */
80
inline void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value);

1117 28 set_soft_vs_kinetic_hardness 0 4 1591 50 BulletSoftBodyConfig::set_soft_vs_kinetic_hardness 0 1 349 40
/**
 * Setter for property kSKHR_CL.
 */
82
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value);

1118 25 set_soft_vs_soft_hardness 0 4 1591 47 BulletSoftBodyConfig::set_soft_vs_soft_hardness 0 1 350 40
/**
 * Setter for property kSSHR_CL.
 */
79
inline void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value);

1119 31 set_soft_vs_rigid_impulse_split 0 4 1591 53 BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split 0 1 351 43
/**
 * Setter for property kSR_SPLT_CL.
 */
85
inline void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value);

1120 33 set_soft_vs_kinetic_impulse_split 0 4 1591 55 BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split 0 1 352 43
/**
 * Setter for property kSK_SPLT_CL.
 */
87
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value);

1121 30 set_soft_vs_soft_impulse_split 0 4 1591 52 BulletSoftBodyConfig::set_soft_vs_soft_impulse_split 0 1 353 43
/**
 * Setter for property kSS_SPLT_CL.
 */
84
inline void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value);

1122 13 set_maxvolume 0 4 1591 35 BulletSoftBodyConfig::set_maxvolume 0 1 354 41
/**
 * Setter for property maxvolume.
 */
67
inline void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value);

1123 13 set_timescale 0 4 1591 35 BulletSoftBodyConfig::set_timescale 0 1 355 41
/**
 * Setter for property timescale.
 */
67
inline void BulletSoftBodyConfig::set_timescale(PN_stdfloat value);

1124 31 set_positions_solver_iterations 0 4 1591 53 BulletSoftBodyConfig::set_positions_solver_iterations 0 1 356 43
/**
 * Setter for property piterations.
 */
77
inline void BulletSoftBodyConfig::set_positions_solver_iterations(int value);

1125 32 set_velocities_solver_iterations 0 4 1591 54 BulletSoftBodyConfig::set_velocities_solver_iterations 0 1 357 43
/**
 * Setter for property viterations.
 */
78
inline void BulletSoftBodyConfig::set_velocities_solver_iterations(int value);

1126 27 set_drift_solver_iterations 0 4 1591 49 BulletSoftBodyConfig::set_drift_solver_iterations 0 1 358 43
/**
 * Setter for property diterations.
 */
73
inline void BulletSoftBodyConfig::set_drift_solver_iterations(int value);

1127 29 set_cluster_solver_iterations 0 4 1591 51 BulletSoftBodyConfig::set_cluster_solver_iterations 0 1 359 43
/**
 * Setter for property citerations.
 */
75
inline void BulletSoftBodyConfig::set_cluster_solver_iterations(int value);

1128 32 get_velocities_correction_factor 0 4 1591 54 BulletSoftBodyConfig::get_velocities_correction_factor 0 1 360 36
/**
 * Getter for property kVCF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const;

1129 23 get_damping_coefficient 0 4 1591 45 BulletSoftBodyConfig::get_damping_coefficient 0 1 361 35
/**
 * Getter for property kDP.
 */
77
inline PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const;

1130 20 get_drag_coefficient 0 4 1591 42 BulletSoftBodyConfig::get_drag_coefficient 0 1 362 35
/**
 * Getter for property kDG.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const;

1131 20 get_lift_coefficient 0 4 1591 42 BulletSoftBodyConfig::get_lift_coefficient 0 1 363 35
/**
 * Getter for property kLF.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const;

1132 24 get_pressure_coefficient 0 4 1591 46 BulletSoftBodyConfig::get_pressure_coefficient 0 1 364 35
/**
 * Getter for property kPR.
 */
78
inline PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const;

1133 35 get_volume_conservation_coefficient 0 4 1591 57 BulletSoftBodyConfig::get_volume_conservation_coefficient 0 1 365 35
/**
 * Getter for property kVC.
 */
89
inline PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const;

1134 32 get_dynamic_friction_coefficient 0 4 1591 54 BulletSoftBodyConfig::get_dynamic_friction_coefficient 0 1 366 35
/**
 * Getter for property kDF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const;

1135 29 get_pose_matching_coefficient 0 4 1591 51 BulletSoftBodyConfig::get_pose_matching_coefficient 0 1 367 35
/**
 * Getter for property kMT.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const;

1136 27 get_rigid_contacts_hardness 0 4 1591 49 BulletSoftBodyConfig::get_rigid_contacts_hardness 0 1 368 36
/**
 * Getter for property kCHR.
 */
81
inline PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const;

1137 29 get_kinetic_contacts_hardness 0 4 1591 51 BulletSoftBodyConfig::get_kinetic_contacts_hardness 0 1 369 36
/**
 * Getter for property kKHR.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const;

1138 26 get_soft_contacts_hardness 0 4 1591 48 BulletSoftBodyConfig::get_soft_contacts_hardness 0 1 370 36
/**
 * Getter for property kSHR.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const;

1139 20 get_anchors_hardness 0 4 1591 42 BulletSoftBodyConfig::get_anchors_hardness 0 1 371 36
/**
 * Getter for property kAHR.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const;

1140 26 get_soft_vs_rigid_hardness 0 4 1591 48 BulletSoftBodyConfig::get_soft_vs_rigid_hardness 0 1 372 40
/**
 * Getter for property kSRHR_CL.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const;

1141 28 get_soft_vs_kinetic_hardness 0 4 1591 50 BulletSoftBodyConfig::get_soft_vs_kinetic_hardness 0 1 373 40
/**
 * Getter for property kSKHR_CL.
 */
82
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const;

1142 25 get_soft_vs_soft_hardness 0 4 1591 47 BulletSoftBodyConfig::get_soft_vs_soft_hardness 0 1 374 40
/**
 * Getter for property kSSHR_CL.
 */
79
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const;

1143 31 get_soft_vs_rigid_impulse_split 0 4 1591 53 BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split 0 1 375 43
/**
 * Getter for property kSR_SPLT_CL.
 */
85
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const;

1144 33 get_soft_vs_kinetic_impulse_split 0 4 1591 55 BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split 0 1 376 43
/**
 * Getter for property kSK_SPLT_CL.
 */
87
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const;

1145 30 get_soft_vs_soft_impulse_split 0 4 1591 52 BulletSoftBodyConfig::get_soft_vs_soft_impulse_split 0 1 377 43
/**
 * Getter for property kSS_SPLT_CL.
 */
84
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const;

1146 13 get_maxvolume 0 4 1591 35 BulletSoftBodyConfig::get_maxvolume 0 1 378 41
/**
 * Getter for property maxvolume.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const;

1147 13 get_timescale 0 4 1591 35 BulletSoftBodyConfig::get_timescale 0 1 379 41
/**
 * Getter for property timescale.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const;

1148 31 get_positions_solver_iterations 0 4 1591 53 BulletSoftBodyConfig::get_positions_solver_iterations 0 1 380 43
/**
 * Getter for property piterations.
 */
77
inline int BulletSoftBodyConfig::get_positions_solver_iterations(void) const;

1149 32 get_velocities_solver_iterations 0 4 1591 54 BulletSoftBodyConfig::get_velocities_solver_iterations 0 1 381 43
/**
 * Getter for property viterations.
 */
78
inline int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const;

1150 27 get_drift_solver_iterations 0 4 1591 49 BulletSoftBodyConfig::get_drift_solver_iterations 0 1 382 43
/**
 * Getter for property diterations.
 */
73
inline int BulletSoftBodyConfig::get_drift_solver_iterations(void) const;

1151 29 get_cluster_solver_iterations 0 4 1591 51 BulletSoftBodyConfig::get_cluster_solver_iterations 0 1 383 43
/**
 * Getter for property citerations.
 */
75
inline int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const;

1152 20 BulletSoftBodyConfig 0 4 1591 42 BulletSoftBodyConfig::BulletSoftBodyConfig 0 1 330 10
/**
 *
 */
90
inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default;

1153 24 ~BulletSoftBodyWorldInfo 0 4 1594 49 BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo 0 0 10
/**
 *
 */
63
inline BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo(void);

1154 15 set_air_density 0 4 1594 40 BulletSoftBodyWorldInfo::set_air_density 0 1 385 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density);

1155 17 set_water_density 0 4 1594 42 BulletSoftBodyWorldInfo::set_water_density 0 1 386 10
/**
 *
 */
69
void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density);

1156 16 set_water_offset 0 4 1594 41 BulletSoftBodyWorldInfo::set_water_offset 0 1 387 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset);

1157 16 set_water_normal 0 4 1594 41 BulletSoftBodyWorldInfo::set_water_normal 0 1 388 10
/**
 *
 */
71
void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal);

1158 11 set_gravity 0 4 1594 36 BulletSoftBodyWorldInfo::set_gravity 0 1 389 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity);

1159 15 get_air_density 0 4 1594 40 BulletSoftBodyWorldInfo::get_air_density 0 1 390 10
/**
 *
 */
65
PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const;

1160 17 get_water_density 0 4 1594 42 BulletSoftBodyWorldInfo::get_water_density 0 1 391 10
/**
 *
 */
67
PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const;

1161 16 get_water_offset 0 4 1594 41 BulletSoftBodyWorldInfo::get_water_offset 0 1 392 10
/**
 *
 */
66
PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const;

1162 16 get_water_normal 0 4 1594 41 BulletSoftBodyWorldInfo::get_water_normal 0 1 393 10
/**
 *
 */
63
LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const;

1163 11 get_gravity 0 4 1594 36 BulletSoftBodyWorldInfo::get_gravity 0 1 394 10
/**
 *
 */
58
LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const;

1164 15 garbage_collect 0 4 1594 40 BulletSoftBodyWorldInfo::garbage_collect 0 1 395 10
/**
 *
 */
66
void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256);

1165 23 BulletSoftBodyWorldInfo 0 4 1594 48 BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo 0 1 384 10
/**
 *
 */
99
inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default;

1166 23 ~BulletSoftBodyMaterial 0 4 1596 47 BulletSoftBodyMaterial::~BulletSoftBodyMaterial 0 0 10
/**
 *
 */
61
inline BulletSoftBodyMaterial::~BulletSoftBodyMaterial(void);

1167 5 empty 0 4 1596 29 BulletSoftBodyMaterial::empty 0 1 397 102
/**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */
73
static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void);

1168 20 get_linear_stiffness 0 4 1596 44 BulletSoftBodyMaterial::get_linear_stiffness 0 1 398 42
/**
 * Getter for the property m_kLST.
 */
76
inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const;

1169 20 set_linear_stiffness 0 4 1596 44 BulletSoftBodyMaterial::set_linear_stiffness 0 1 399 42
/**
 * Setter for the property m_kLST.
 */
76
inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value);

1170 21 get_angular_stiffness 0 4 1596 45 BulletSoftBodyMaterial::get_angular_stiffness 0 1 400 42
/**
 * Getter for the property m_kAST.
 */
77
inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const;

1171 21 set_angular_stiffness 0 4 1596 45 BulletSoftBodyMaterial::set_angular_stiffness 0 1 401 42
/**
 * Setter for the property m_kAST.
 */
77
inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value);

1172 23 get_volume_preservation 0 4 1596 47 BulletSoftBodyMaterial::get_volume_preservation 0 1 402 42
/**
 * Getter for the property m_kVST.
 */
79
inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const;

1173 23 set_volume_preservation 0 4 1596 47 BulletSoftBodyMaterial::set_volume_preservation 0 1 403 42
/**
 * Setter for the property m_kVST.
 */
79
inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value);

1174 22 BulletSoftBodyMaterial 0 4 1596 46 BulletSoftBodyMaterial::BulletSoftBodyMaterial 0 1 396 10
/**
 *
 */
96
inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default;

1175 0 0 0 0 0 0 0 0
0

1176 0 0 0 0 0 0 0 0
0

1177 14 get_class_type 0 4 1590 34 BulletSoftBodyNode::get_class_type 0 1 329 0
59
static TypeHandle BulletSoftBodyNode::get_class_type(void);

1178 24 set_suspension_stiffness 0 4 1597 45 BulletVehicleTuning::set_suspension_stiffness 0 1 404 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value);

1179 26 set_suspension_compression 0 4 1597 47 BulletVehicleTuning::set_suspension_compression 0 1 405 10
/**
 *
 */
79
inline void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value);

1180 22 set_suspension_damping 0 4 1597 43 BulletVehicleTuning::set_suspension_damping 0 1 406 10
/**
 *
 */
75
inline void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value);

1181 28 set_max_suspension_travel_cm 0 4 1597 49 BulletVehicleTuning::set_max_suspension_travel_cm 0 1 407 10
/**
 *
 */
81
inline void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value);

1182 17 set_friction_slip 0 4 1597 38 BulletVehicleTuning::set_friction_slip 0 1 408 10
/**
 *
 */
70
inline void BulletVehicleTuning::set_friction_slip(PN_stdfloat value);

1183 24 set_max_suspension_force 0 4 1597 45 BulletVehicleTuning::set_max_suspension_force 0 1 409 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value);

1184 24 get_suspension_stiffness 0 4 1597 45 BulletVehicleTuning::get_suspension_stiffness 0 1 410 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const;

1185 26 get_suspension_compression 0 4 1597 47 BulletVehicleTuning::get_suspension_compression 0 1 411 10
/**
 *
 */
79
inline PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const;

1186 22 get_suspension_damping 0 4 1597 43 BulletVehicleTuning::get_suspension_damping 0 1 412 10
/**
 *
 */
75
inline PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const;

1187 28 get_max_suspension_travel_cm 0 4 1597 49 BulletVehicleTuning::get_max_suspension_travel_cm 0 1 413 10
/**
 *
 */
81
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const;

1188 17 get_friction_slip 0 4 1597 38 BulletVehicleTuning::get_friction_slip 0 1 414 10
/**
 *
 */
70
inline PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const;

1189 24 get_max_suspension_force 0 4 1597 45 BulletVehicleTuning::get_max_suspension_force 0 1 415 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const;

1190 13 BulletVehicle 0 4 1598 28 BulletVehicle::BulletVehicle 0 1 416 94
/**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */
79
BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis);

1191 21 set_coordinate_system 0 4 1598 36 BulletVehicle::set_coordinate_system 0 1 417 100
/**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */
59
void BulletVehicle::set_coordinate_system(BulletUpAxis up);

1192 18 set_steering_value 0 4 1598 33 BulletVehicle::set_steering_value 0 1 418 76
/**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */
70
void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx);

1193 9 set_brake 0 4 1598 24 BulletVehicle::set_brake 0 1 419 61
/**
 * Applies braking force to the wheel with index idx.
 */
58
void BulletVehicle::set_brake(PN_stdfloat brake, int idx);

1194 17 set_pitch_control 0 4 1598 32 BulletVehicle::set_pitch_control 0 1 420 10
/**
 *
 */
57
void BulletVehicle::set_pitch_control(PN_stdfloat pitch);

1195 11 get_chassis 0 4 1598 26 BulletVehicle::get_chassis 0 1 421 82
/**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */
54
BulletRigidBodyNode *BulletVehicle::get_chassis(void);

1196 25 get_current_speed_km_hour 0 4 1598 40 BulletVehicle::get_current_speed_km_hour 0 1 422 106
/**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */
65
PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const;

1197 18 get_steering_value 0 4 1598 33 BulletVehicle::get_steering_value 0 1 423 77
/**
 * Returns the steering angle of the wheel with index idx in degrees.
 */
61
PN_stdfloat BulletVehicle::get_steering_value(int idx) const;

1198 18 get_forward_vector 0 4 1598 33 BulletVehicle::get_forward_vector 0 1 424 145
/**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */
55
LVector3 BulletVehicle::get_forward_vector(void) const;

1199 16 reset_suspension 0 4 1598 31 BulletVehicle::reset_suspension 0 1 425 43
/**
 * Resets the vehicle's suspension.
 */
43
void BulletVehicle::reset_suspension(void);

1200 18 apply_engine_force 0 4 1598 33 BulletVehicle::apply_engine_force 0 1 426 70
/**
 * Applies force at the wheel with index idx for acceleration.
 */
67
void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx);

1201 12 create_wheel 0 4 1598 27 BulletVehicle::create_wheel 0 1 427 83
// Wheels

/**
 * Factory method for creating wheels for this vehicle instance.
 */
46
BulletWheel BulletVehicle::create_wheel(void);

1202 14 get_num_wheels 0 4 1598 29 BulletVehicle::get_num_wheels 0 1 428 57
/**
 * Returns the number of wheels this vehicle has.
 */
53
inline int BulletVehicle::get_num_wheels(void) const;

1203 9 get_wheel 0 4 1598 24 BulletVehicle::get_wheel 0 1 429 132
/**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */
52
BulletWheel BulletVehicle::get_wheel(int idx) const;

1204 10 get_tuning 0 4 1598 25 BulletVehicle::get_tuning 0 1 430 211
// Tuning

// Tuning

/**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */
60
inline BulletVehicleTuning &BulletVehicle::get_tuning(void);

1205 12 ~BulletWheel 0 4 1599 25 BulletWheel::~BulletWheel 0 0 10
/**
 *
 */
39
inline BulletWheel::~BulletWheel(void);

1206 24 set_suspension_stiffness 0 4 1599 37 BulletWheel::set_suspension_stiffness 0 1 433 50
/**
 * Sets how stiff the suspension shall be.
 */
62
void BulletWheel::set_suspension_stiffness(PN_stdfloat value);

1207 28 set_max_suspension_travel_cm 0 4 1599 41 BulletWheel::set_max_suspension_travel_cm 0 1 434 109
/**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */
66
void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value);

1208 17 set_friction_slip 0 4 1599 30 BulletWheel::set_friction_slip 0 1 435 45
/**
 * Sets the slipperyness of the tyre.
 */
55
void BulletWheel::set_friction_slip(PN_stdfloat value);

1209 24 set_max_suspension_force 0 4 1599 37 BulletWheel::set_max_suspension_force 0 1 436 66
/**
 * Sets the maximum suspension force the wheel can handle.
 */
62
void BulletWheel::set_max_suspension_force(PN_stdfloat value);

1210 30 set_wheels_damping_compression 0 4 1599 43 BulletWheel::set_wheels_damping_compression 0 1 437 79
/**
 * Sets the damping forces applied when the suspension gets compressed.
 */
68
void BulletWheel::set_wheels_damping_compression(PN_stdfloat value);

1211 29 set_wheels_damping_relaxation 0 4 1599 42 BulletWheel::set_wheels_damping_relaxation 0 1 438 71
/**
 * Sets the damping forces applied when the suspension relaxes.
 */
67
void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value);

1212 18 set_roll_influence 0 4 1599 31 BulletWheel::set_roll_influence 0 1 439 249
/**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */
56
void BulletWheel::set_roll_influence(PN_stdfloat value);

1213 16 set_wheel_radius 0 4 1599 29 BulletWheel::set_wheel_radius 0 1 440 33
/**
 * Sets the wheel radius.
 */
54
void BulletWheel::set_wheel_radius(PN_stdfloat value);

1214 12 set_steering 0 4 1599 25 BulletWheel::set_steering 0 1 441 35
/**
 * Sets the steering angle.
 */
50
void BulletWheel::set_steering(PN_stdfloat value);

1215 12 set_rotation 0 4 1599 25 BulletWheel::set_rotation 0 1 442 10
/**
 *
 */
50
void BulletWheel::set_rotation(PN_stdfloat value);

1216 18 set_delta_rotation 0 4 1599 31 BulletWheel::set_delta_rotation 0 1 443 10
/**
 *
 */
56
void BulletWheel::set_delta_rotation(PN_stdfloat value);

1217 16 set_engine_force 0 4 1599 29 BulletWheel::set_engine_force 0 1 444 69
/**
 * Defines how much force should be used to rotate the wheel.
 */
54
void BulletWheel::set_engine_force(PN_stdfloat value);

1218 9 set_brake 0 4 1599 22 BulletWheel::set_brake 0 1 445 10
/**
 *
 */
47
void BulletWheel::set_brake(PN_stdfloat value);

1219 13 set_skid_info 0 4 1599 26 BulletWheel::set_skid_info 0 1 446 10
/**
 *
 */
51
void BulletWheel::set_skid_info(PN_stdfloat value);

1220 27 set_wheels_suspension_force 0 4 1599 40 BulletWheel::set_wheels_suspension_force 0 1 447 10
/**
 *
 */
65
void BulletWheel::set_wheels_suspension_force(PN_stdfloat value);

1221 32 set_suspension_relative_velocity 0 4 1599 45 BulletWheel::set_suspension_relative_velocity 0 1 448 10
/**
 *
 */
70
void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value);

1222 35 set_clipped_inv_connection_point_cs 0 4 1599 48 BulletWheel::set_clipped_inv_connection_point_cs 0 1 449 10
/**
 *
 */
73
void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value);

1223 31 set_chassis_connection_point_cs 0 4 1599 44 BulletWheel::set_chassis_connection_point_cs 0 1 450 70
/**
 * Sets the point where the wheel is connected to the chassis.
 */
70
void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos);

1224 22 set_wheel_direction_cs 0 4 1599 35 BulletWheel::set_wheel_direction_cs 0 1 451 92
/**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */
62
void BulletWheel::set_wheel_direction_cs(LVector3 const &dir);

1225 17 set_wheel_axle_cs 0 4 1599 30 BulletWheel::set_wheel_axle_cs 0 1 452 51
/**
 * Determines the wheel axle normal vector.
 */
58
void BulletWheel::set_wheel_axle_cs(LVector3 const &axle);

1226 19 set_world_transform 0 4 1599 32 BulletWheel::set_world_transform 0 1 453 10
/**
 *
 */
59
void BulletWheel::set_world_transform(LMatrix4 const &mat);

1227 15 set_front_wheel 0 4 1599 28 BulletWheel::set_front_wheel 0 1 454 42
/**
 * Sets if the wheel is steerable.
 */
46
void BulletWheel::set_front_wheel(bool value);

1228 8 set_node 0 4 1599 21 BulletWheel::set_node 0 1 455 86
/**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */
44
void BulletWheel::set_node(PandaNode *node);

1229 26 get_suspension_rest_length 0 4 1599 39 BulletWheel::get_suspension_rest_length 0 1 456 83
/**
 * Returns the length of the suspension when the vehicle is standing still.
 */
64
PN_stdfloat BulletWheel::get_suspension_rest_length(void) const;

1230 24 get_suspension_stiffness 0 4 1599 37 BulletWheel::get_suspension_stiffness 0 1 457 51
/**
 * Returns the stiffness of the suspension.
 */
62
PN_stdfloat BulletWheel::get_suspension_stiffness(void) const;

1231 28 get_max_suspension_travel_cm 0 4 1599 41 BulletWheel::get_max_suspension_travel_cm 0 1 458 10
/**
 *
 */
66
PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const;

1232 17 get_friction_slip 0 4 1599 30 BulletWheel::get_friction_slip 0 1 459 46
/**
 * Returns how slippery the tyres are.
 */
55
PN_stdfloat BulletWheel::get_friction_slip(void) const;

1233 24 get_max_suspension_force 0 4 1599 37 BulletWheel::get_max_suspension_force 0 1 460 72
/**
 * Returns the maximum force (weight) the suspension can handle.
 */
62
PN_stdfloat BulletWheel::get_max_suspension_force(void) const;

1234 30 get_wheels_damping_compression 0 4 1599 43 BulletWheel::get_wheels_damping_compression 0 1 461 70
/**
 * Returns the  damping applied to the compressing suspension.
 */
68
PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const;

1235 29 get_wheels_damping_relaxation 0 4 1599 42 BulletWheel::get_wheels_damping_relaxation 0 1 462 66
/**
 * Returns the damping applied to the relaxing suspension.
 */
67
PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const;

1236 18 get_roll_influence 0 4 1599 31 BulletWheel::get_roll_influence 0 1 463 90
/**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */
56
PN_stdfloat BulletWheel::get_roll_influence(void) const;

1237 16 get_wheel_radius 0 4 1599 29 BulletWheel::get_wheel_radius 0 1 464 36
/**
 * Returns the wheel radius.
 */
54
PN_stdfloat BulletWheel::get_wheel_radius(void) const;

1238 12 get_steering 0 4 1599 25 BulletWheel::get_steering 0 1 465 49
/**
 * Returns the steering angle in degrees.
 */
50
PN_stdfloat BulletWheel::get_steering(void) const;

1239 12 get_rotation 0 4 1599 25 BulletWheel::get_rotation 0 1 466 10
/**
 *
 */
50
PN_stdfloat BulletWheel::get_rotation(void) const;

1240 18 get_delta_rotation 0 4 1599 31 BulletWheel::get_delta_rotation 0 1 467 10
/**
 *
 */
56
PN_stdfloat BulletWheel::get_delta_rotation(void) const;

1241 16 get_engine_force 0 4 1599 29 BulletWheel::get_engine_force 0 1 468 71
/**
 * Returns the amount of accelleration force currently applied.
 */
54
PN_stdfloat BulletWheel::get_engine_force(void) const;

1242 9 get_brake 0 4 1599 22 BulletWheel::get_brake 0 1 469 65
/**
 * Returns the amount of braking force currently applied.
 */
47
PN_stdfloat BulletWheel::get_brake(void) const;

1243 13 get_skid_info 0 4 1599 26 BulletWheel::get_skid_info 0 1 470 10
/**
 *
 */
51
PN_stdfloat BulletWheel::get_skid_info(void) const;

1244 27 get_wheels_suspension_force 0 4 1599 40 BulletWheel::get_wheels_suspension_force 0 1 471 10
/**
 *
 */
65
PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const;

1245 32 get_suspension_relative_velocity 0 4 1599 45 BulletWheel::get_suspension_relative_velocity 0 1 472 10
/**
 *
 */
70
PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const;

1246 35 get_clipped_inv_connection_point_cs 0 4 1599 48 BulletWheel::get_clipped_inv_connection_point_cs 0 1 473 10
/**
 *
 */
73
PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const;

1247 31 get_chassis_connection_point_cs 0 4 1599 44 BulletWheel::get_chassis_connection_point_cs 0 1 474 73
/**
 * Returns the point where the wheel is connected to the chassis.
 */
65
LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const;

1248 22 get_wheel_direction_cs 0 4 1599 35 BulletWheel::get_wheel_direction_cs 0 1 475 70
/**
 * Returns the wheel's forward vector relative to the chassis.
 */
57
LVector3 BulletWheel::get_wheel_direction_cs(void) const;

1249 17 get_wheel_axle_cs 0 4 1599 30 BulletWheel::get_wheel_axle_cs 0 1 476 55
/**
 * Returns the normal vector of the wheel axle.
 */
52
LVector3 BulletWheel::get_wheel_axle_cs(void) const;

1250 19 get_world_transform 0 4 1599 32 BulletWheel::get_world_transform 0 1 477 10
/**
 *
 */
54
LMatrix4 BulletWheel::get_world_transform(void) const;

1251 14 is_front_wheel 0 4 1599 27 BulletWheel::is_front_wheel 0 1 478 46
/**
 * Determines if a wheel is steerable.
 */
45
bool BulletWheel::is_front_wheel(void) const;

1252 8 get_node 0 4 1599 21 BulletWheel::get_node 0 1 479 142
/**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */
45
PandaNode *BulletWheel::get_node(void) const;

1253 16 get_raycast_info 0 4 1599 29 BulletWheel::get_raycast_info 0 1 480 10
/**
 *
 */
65
BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const;

1254 23 ~BulletWheelRaycastInfo 0 4 1600 47 BulletWheelRaycastInfo::~BulletWheelRaycastInfo 0 0 10
/**
 *
 */
61
inline BulletWheelRaycastInfo::~BulletWheelRaycastInfo(void);

1255 13 is_in_contact 0 4 1600 37 BulletWheelRaycastInfo::is_in_contact 0 1 482 10
/**
 *
 */
62
inline bool BulletWheelRaycastInfo::is_in_contact(void) const;

1256 21 get_suspension_length 0 4 1600 45 BulletWheelRaycastInfo::get_suspension_length 0 1 483 10
/**
 *
 */
77
inline PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const;

1257 21 get_contact_normal_ws 0 4 1600 45 BulletWheelRaycastInfo::get_contact_normal_ws 0 1 484 10
/**
 *
 */
74
inline LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const;

1258 22 get_wheel_direction_ws 0 4 1600 46 BulletWheelRaycastInfo::get_wheel_direction_ws 0 1 485 10
/**
 *
 */
75
inline LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const;

1259 17 get_wheel_axle_ws 0 4 1600 41 BulletWheelRaycastInfo::get_wheel_axle_ws 0 1 486 10
/**
 *
 */
70
inline LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const;

1260 20 get_contact_point_ws 0 4 1600 44 BulletWheelRaycastInfo::get_contact_point_ws 0 1 487 10
/**
 *
 */
72
inline LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const;

1261 17 get_hard_point_ws 0 4 1600 41 BulletWheelRaycastInfo::get_hard_point_ws 0 1 488 10
/**
 *
 */
69
inline LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const;

1262 17 get_ground_object 0 4 1600 41 BulletWheelRaycastInfo::get_ground_object 0 1 489 10
/**
 *
 */
72
inline PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const;

1263 22 BulletWheelRaycastInfo 0 4 1600 46 BulletWheelRaycastInfo::BulletWheelRaycastInfo 0 1 481 10
/**
 *
 */
96
inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default;

1264 11 BulletWheel 0 4 1599 24 BulletWheel::BulletWheel 0 1 432 10
/**
 *
 */
63
inline BulletWheel::BulletWheel(BulletWheel const &) = default;

1265 0 0 0 0 0 0 0 0
0

1266 14 get_class_type 0 4 1598 29 BulletVehicle::get_class_type 0 1 431 0
54
static TypeHandle BulletVehicle::get_class_type(void);

1267 11 BulletWorld 0 4 1601 24 BulletWorld::BulletWorld 0 1 490 10
/**
 *
 */
31
BulletWorld::BulletWorld(void);

1268 11 set_gravity 0 4 1601 24 BulletWorld::set_gravity 0 2 491 492 22
/**
 *
 */

/**
 *
 */
134
void BulletWorld::set_gravity(LVector3 const &gravity);
void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz);

1269 11 get_gravity 0 4 1601 24 BulletWorld::get_gravity 0 1 493 10
/**
 *
 */
52
LVector3 const BulletWorld::get_gravity(void) const;

1270 10 do_physics 0 4 1601 23 BulletWorld::do_physics 0 1 494 10
/**
 *
 */
103
int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0));

1271 14 get_world_info 0 4 1601 27 BulletWorld::get_world_info 0 1 495 10
/**
 *
 */
58
BulletSoftBodyWorldInfo BulletWorld::get_world_info(void);

1272 14 set_debug_node 0 4 1601 27 BulletWorld::set_debug_node 0 1 496 30
// Debug

// Debug

/**
 *
 */
63
inline void BulletWorld::set_debug_node(BulletDebugNode *node);

1273 16 clear_debug_node 0 4 1601 29 BulletWorld::clear_debug_node 0 1 497 75
/**
 * Removes a debug node that has been assigned to this BulletWorld.
 */
41
void BulletWorld::clear_debug_node(void);

1274 14 get_debug_node 0 4 1601 27 BulletWorld::get_debug_node 0 1 498 10
/**
 *
 */
64
inline BulletDebugNode *BulletWorld::get_debug_node(void) const;

1275 14 has_debug_node 0 4 1601 27 BulletWorld::has_debug_node 0 1 499 10
/**
 *
 */
52
inline bool BulletWorld::has_debug_node(void) const;

1276 6 attach 0 4 1601 19 BulletWorld::attach 0 1 500 27
// AttachRemove

/**
 *
 */
46
void BulletWorld::attach(TypedObject *object);

1277 17 attach_constraint 0 4 1601 30 BulletWorld::attach_constraint 0 1 501 156
/**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */
97
void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false);

1278 6 remove 0 4 1601 19 BulletWorld::remove 0 1 502 10
/**
 *
 */
46
void BulletWorld::remove(TypedObject *object);

1279 14 get_num_ghosts 0 4 1601 27 BulletWorld::get_num_ghosts 0 1 503 61
// Ghost object

// Ghost object

// Ghost object

/**
 *
 */
51
inline int BulletWorld::get_num_ghosts(void) const;

1280 9 get_ghost 0 4 1601 22 BulletWorld::get_ghost 0 1 504 10
/**
 *
 */
62
inline BulletGhostNode *BulletWorld::get_ghost(int idx) const;

1281 20 get_num_rigid_bodies 0 4 1601 33 BulletWorld::get_num_rigid_bodies 0 1 505 55
// Rigid body

// Rigid body

// Rigid body

/**
 *
 */
57
inline int BulletWorld::get_num_rigid_bodies(void) const;

1282 14 get_rigid_body 0 4 1601 27 BulletWorld::get_rigid_body 0 1 506 10
/**
 *
 */
71
inline BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const;

1283 19 get_num_soft_bodies 0 4 1601 32 BulletWorld::get_num_soft_bodies 0 1 507 52
// Soft body

// Soft body

// Soft body

/**
 *
 */
56
inline int BulletWorld::get_num_soft_bodies(void) const;

1284 13 get_soft_body 0 4 1601 26 BulletWorld::get_soft_body 0 1 508 10
/**
 *
 */
69
inline BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const;

1285 18 get_num_characters 0 4 1601 31 BulletWorld::get_num_characters 0 1 509 85
// Character controller

// Character controller

// Character controller

/**
 *
 */
55
inline int BulletWorld::get_num_characters(void) const;

1286 13 get_character 0 4 1601 26 BulletWorld::get_character 0 1 510 10
/**
 *
 */
84
inline BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const;

1287 14 attach_vehicle 0 4 1601 27 BulletWorld::attach_vehicle 0 1 511 66
// Vehicle

/**
 * Deprecated!  Please use BulletWorld::attach
 */
57
void BulletWorld::attach_vehicle(BulletVehicle *vehicle);

1288 14 remove_vehicle 0 4 1601 27 BulletWorld::remove_vehicle 0 1 512 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
57
void BulletWorld::remove_vehicle(BulletVehicle *vehicle);

1289 16 get_num_vehicles 0 4 1601 29 BulletWorld::get_num_vehicles 0 1 513 10
/**
 *
 */
53
inline int BulletWorld::get_num_vehicles(void) const;

1290 11 get_vehicle 0 4 1601 24 BulletWorld::get_vehicle 0 1 514 10
/**
 *
 */
62
inline BulletVehicle *BulletWorld::get_vehicle(int idx) const;

1291 19 get_num_constraints 0 4 1601 32 BulletWorld::get_num_constraints 0 1 515 55
// Constraint

// Constraint

// Constraint

/**
 *
 */
56
inline int BulletWorld::get_num_constraints(void) const;

1292 14 get_constraint 0 4 1601 27 BulletWorld::get_constraint 0 1 516 10
/**
 *
 */
68
inline BulletConstraint *BulletWorld::get_constraint(int idx) const;

1293 16 ray_test_closest 0 4 1601 29 BulletWorld::ray_test_closest 0 1 517 40
// Raycast and other queries

/**
 *
 */
187
BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = ::template< WType, int nbits >::BitMask::all_on()) const;

1294 12 ray_test_all 0 4 1601 25 BulletWorld::ray_test_all 0 1 518 10
/**
 *
 */
180
BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = ::template< WType, int nbits >::BitMask::all_on()) const;

1295 18 sweep_test_closest 0 4 1601 31 BulletWorld::sweep_test_closest 0 1 519 10
/**
 *
 */
254
BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = ::template< WType, int nbits >::BitMask::all_on(), PN_stdfloat penetration = 0.0) const;

1296 12 contact_test 0 4 1601 25 BulletWorld::contact_test 0 1 520 386
/**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */
94
BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const;

1297 17 contact_test_pair 0 4 1601 30 BulletWorld::contact_test_pair 0 1 521 181
/**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */
93
BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const;

1298 11 filter_test 0 4 1601 24 BulletWorld::filter_test 0 1 522 105
/**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */
72
bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const;

1299 17 get_num_manifolds 0 4 1601 30 BulletWorld::get_num_manifolds 0 1 523 52
// Manifolds

// Manifolds

// Manifolds

/**
 *
 */
54
inline int BulletWorld::get_num_manifolds(void) const;

1300 12 get_manifold 0 4 1601 25 BulletWorld::get_manifold 0 1 524 10
/**
 *
 */
67
BulletPersistentManifold *BulletWorld::get_manifold(int idx) const;

1301 24 set_group_collision_flag 0 4 1601 37 BulletWorld::set_group_collision_flag 0 1 525 34
// Collision filtering

/**
 *
 */
98
void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable);

1302 24 get_group_collision_flag 0 4 1601 37 BulletWorld::get_group_collision_flag 0 1 526 10
/**
 *
 */
91
bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const;

1303 26 set_contact_added_callback 0 4 1601 39 BulletWorld::set_contact_added_callback 0 1 527 24
// Callbacks

/**
 *
 */
66
void BulletWorld::set_contact_added_callback(CallbackObject *obj);

1304 28 clear_contact_added_callback 0 4 1601 41 BulletWorld::clear_contact_added_callback 0 1 528 10
/**
 *
 */
53
void BulletWorld::clear_contact_added_callback(void);

1305 17 set_tick_callback 0 4 1601 30 BulletWorld::set_tick_callback 0 1 529 10
/**
 *
 */
82
void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false);

1306 19 clear_tick_callback 0 4 1601 32 BulletWorld::clear_tick_callback 0 1 530 10
/**
 *
 */
44
void BulletWorld::clear_tick_callback(void);

1307 19 set_filter_callback 0 4 1601 32 BulletWorld::set_filter_callback 0 1 531 10
/**
 *
 */
59
void BulletWorld::set_filter_callback(CallbackObject *obj);

1308 21 clear_filter_callback 0 4 1601 34 BulletWorld::clear_filter_callback 0 1 532 10
/**
 *
 */
46
void BulletWorld::clear_filter_callback(void);

1309 0 0 0 0 0 0 0 0
0

1310 0 0 0 0 0 0 0 0
0

1311 0 0 0 0 0 0 0 0
0

1312 0 0 0 0 0 0 0 0
0

1313 0 0 0 0 0 0 0 0
0

1314 0 0 0 0 0 0 0 0
0

1315 25 ~BulletPersistentManifold 0 4 1611 51 BulletPersistentManifold::~BulletPersistentManifold 0 0 10
/**
 *
 */
65
inline BulletPersistentManifold::~BulletPersistentManifold(void);

1316 9 get_node0 0 4 1611 35 BulletPersistentManifold::get_node0 0 1 544 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node0(void);

1317 9 get_node1 0 4 1611 35 BulletPersistentManifold::get_node1 0 1 545 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node1(void);

1318 23 get_num_manifold_points 0 4 1611 49 BulletPersistentManifold::get_num_manifold_points 0 1 546 10
/**
 *
 */
66
int BulletPersistentManifold::get_num_manifold_points(void) const;

1319 18 get_manifold_point 0 4 1611 44 BulletPersistentManifold::get_manifold_point 0 1 547 10
/**
 *
 */
81
BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const;

1320 30 get_contact_breaking_threshold 0 4 1611 56 BulletPersistentManifold::get_contact_breaking_threshold 0 1 548 10
/**
 *
 */
81
PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const;

1321 32 get_contact_processing_threshold 0 4 1611 58 BulletPersistentManifold::get_contact_processing_threshold 0 1 549 10
/**
 *
 */
83
PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const;

1322 14 clear_manifold 0 4 1611 40 BulletPersistentManifold::clear_manifold 0 1 550 10
/**
 *
 */
52
void BulletPersistentManifold::clear_manifold(void);

1323 0 0 0 0 0 0 0 0
0

1324 24 BulletPersistentManifold 0 4 1611 50 BulletPersistentManifold::BulletPersistentManifold 0 1 543 10
/**
 *
 */
102
inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default;

1325 0 0 0 0 0 0 0 0
0

1326 12 attach_ghost 0 4 1601 25 BulletWorld::attach_ghost 0 1 533 103
// Deprecated methods, will become private soon

/**
 * Deprecated!  Please use BulletWorld::attach
 */
54
void BulletWorld::attach_ghost(BulletGhostNode *node);

1327 12 remove_ghost 0 4 1601 25 BulletWorld::remove_ghost 0 1 534 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
54
void BulletWorld::remove_ghost(BulletGhostNode *node);

1328 17 attach_rigid_body 0 4 1601 30 BulletWorld::attach_rigid_body 0 1 535 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
63
void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node);

1329 17 remove_rigid_body 0 4 1601 30 BulletWorld::remove_rigid_body 0 1 536 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
63
void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node);

1330 16 attach_soft_body 0 4 1601 29 BulletWorld::attach_soft_body 0 1 537 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
61
void BulletWorld::attach_soft_body(BulletSoftBodyNode *node);

1331 16 remove_soft_body 0 4 1601 29 BulletWorld::remove_soft_body 0 1 538 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
61
void BulletWorld::remove_soft_body(BulletSoftBodyNode *node);

1332 16 attach_character 0 4 1601 29 BulletWorld::attach_character 0 1 539 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
76
void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node);

1333 16 remove_character 0 4 1601 29 BulletWorld::remove_character 0 1 540 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
76
void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node);

1334 17 remove_constraint 0 4 1601 30 BulletWorld::remove_constraint 0 1 541 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
66
void BulletWorld::remove_constraint(BulletConstraint *constraint);

1335 14 get_class_type 0 4 1601 27 BulletWorld::get_class_type 0 1 542 0
52
static TypeHandle BulletWorld::get_class_type(void);

1336 21 BulletConvexHullShape 0 4 1613 44 BulletConvexHullShape::BulletConvexHullShape 0 2 551 552 22
/**
 *
 */

/**
 *
 */
139
BulletConvexHullShape::BulletConvexHullShape(void);
inline BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy);

1337 10 operator = 0 4 1613 33 BulletConvexHullShape::operator = 0 1 553 0
81
inline void BulletConvexHullShape::operator =(BulletConvexHullShape const &copy);

1338 9 add_point 0 4 1613 32 BulletConvexHullShape::add_point 0 1 554 10
/**
 *
 */
56
void BulletConvexHullShape::add_point(LPoint3 const &p);

1339 9 add_array 0 4 1613 32 BulletConvexHullShape::add_array 0 1 555 10
/**
 *
 */
67
void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points);

1340 8 add_geom 0 4 1613 31 BulletConvexHullShape::add_geom 0 1 556 10
/**
 *
 */
117
void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = ::TransformState::make_identity());

1341 14 get_class_type 0 4 1613 37 BulletConvexHullShape::get_class_type 0 1 557 0
62
static TypeHandle BulletConvexHullShape::get_class_type(void);

1342 27 BulletConvexPointCloudShape 0 4 1614 56 BulletConvexPointCloudShape::BulletConvexPointCloudShape 0 3 558 559 560 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
336
BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0));
BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0));
inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy);

1343 10 operator = 0 4 1614 39 BulletConvexPointCloudShape::operator = 0 1 561 0
93
inline void BulletConvexPointCloudShape::operator =(BulletConvexPointCloudShape const &copy);

1344 14 get_num_points 0 4 1614 43 BulletConvexPointCloudShape::get_num_points 0 1 562 10
/**
 *
 */
67
inline int BulletConvexPointCloudShape::get_num_points(void) const;

1345 14 get_class_type 0 4 1614 43 BulletConvexPointCloudShape::get_class_type 0 1 563 0
68
static TypeHandle BulletConvexPointCloudShape::get_class_type(void);

1346 19 BulletCylinderShape 0 4 1615 40 BulletCylinderShape::BulletCylinderShape 0 3 564 565 566 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
287
BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up);
inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy);

1347 10 operator = 0 4 1615 31 BulletCylinderShape::operator = 0 1 567 0
77
inline void BulletCylinderShape::operator =(BulletCylinderShape const &copy);

1348 10 get_radius 0 4 1615 31 BulletCylinderShape::get_radius 0 1 568 10
/**
 *
 */
63
inline PN_stdfloat BulletCylinderShape::get_radius(void) const;

1349 31 get_half_extents_without_margin 0 4 1615 52 BulletCylinderShape::get_half_extents_without_margin 0 1 569 10
/**
 *
 */
82
inline LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const;

1350 28 get_half_extents_with_margin 0 4 1615 49 BulletCylinderShape::get_half_extents_with_margin 0 1 570 10
/**
 *
 */
79
inline LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const;

1351 14 get_class_type 0 4 1615 35 BulletCylinderShape::get_class_type 0 1 571 0
60
static TypeHandle BulletCylinderShape::get_class_type(void);

1352 24 BulletFilterCallbackData 0 4 1616 50 BulletFilterCallbackData::BulletFilterCallbackData 0 1 572 10
/**
 *
 */
94
inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1);

1353 10 get_node_0 0 4 1616 36 BulletFilterCallbackData::get_node_0 0 1 573 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_0(void) const;

1354 10 get_node_1 0 4 1616 36 BulletFilterCallbackData::get_node_1 0 1 574 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_1(void) const;

1355 11 set_collide 0 4 1616 37 BulletFilterCallbackData::set_collide 0 1 575 10
/**
 *
 */
64
inline void BulletFilterCallbackData::set_collide(bool collide);

1356 11 get_collide 0 4 1616 37 BulletFilterCallbackData::get_collide 0 1 576 10
/**
 *
 */
62
inline bool BulletFilterCallbackData::get_collide(void) const;

1357 14 get_class_type 0 4 1616 40 BulletFilterCallbackData::get_class_type 0 1 577 0
65
static TypeHandle BulletFilterCallbackData::get_class_type(void);

1358 25 ~BulletFilterCallbackData 0 4 1616 51 BulletFilterCallbackData::~BulletFilterCallbackData 0 0 0
58
BulletFilterCallbackData::~BulletFilterCallbackData(void);

1359 26 BulletRotationalLimitMotor 0 4 1617 54 BulletRotationalLimitMotor::BulletRotationalLimitMotor 0 1 578 22
/**
 *
 */

/**
 *
 */
95
BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy);

1360 27 ~BulletRotationalLimitMotor 0 4 1617 55 BulletRotationalLimitMotor::~BulletRotationalLimitMotor 0 0 10
/**
 *
 */
62
BulletRotationalLimitMotor::~BulletRotationalLimitMotor(void);

1361 17 set_motor_enabled 0 4 1617 45 BulletRotationalLimitMotor::set_motor_enabled 0 1 579 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_motor_enabled(bool enable);

1362 13 set_low_limit 0 4 1617 41 BulletRotationalLimitMotor::set_low_limit 0 1 580 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit);

1363 14 set_high_limit 0 4 1617 42 BulletRotationalLimitMotor::set_high_limit 0 1 581 10
/**
 *
 */
74
inline void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit);

1364 19 set_target_velocity 0 4 1617 47 BulletRotationalLimitMotor::set_target_velocity 0 1 582 10
/**
 *
 */
82
inline void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity);

1365 19 set_max_motor_force 0 4 1617 47 BulletRotationalLimitMotor::set_max_motor_force 0 1 583 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force);

1366 19 set_max_limit_force 0 4 1617 47 BulletRotationalLimitMotor::set_max_limit_force 0 1 584 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force);

1367 11 set_damping 0 4 1617 39 BulletRotationalLimitMotor::set_damping 0 1 585 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping);

1368 12 set_softness 0 4 1617 40 BulletRotationalLimitMotor::set_softness 0 1 586 10
/**
 *
 */
75
inline void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness);

1369 10 set_bounce 0 4 1617 38 BulletRotationalLimitMotor::set_bounce 0 1 587 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce);

1370 14 set_normal_cfm 0 4 1617 42 BulletRotationalLimitMotor::set_normal_cfm 0 1 588 10
/**
 *
 */
72
inline void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm);

1371 12 set_stop_cfm 0 4 1617 40 BulletRotationalLimitMotor::set_stop_cfm 0 1 589 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm);

1372 12 set_stop_erp 0 4 1617 40 BulletRotationalLimitMotor::set_stop_erp 0 1 590 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp);

1373 10 is_limited 0 4 1617 38 BulletRotationalLimitMotor::is_limited 0 1 591 10
/**
 *
 */
63
inline bool BulletRotationalLimitMotor::is_limited(void) const;

1374 17 get_motor_enabled 0 4 1617 45 BulletRotationalLimitMotor::get_motor_enabled 0 1 592 10
/**
 *
 */
70
inline bool BulletRotationalLimitMotor::get_motor_enabled(void) const;

1375 17 get_current_limit 0 4 1617 45 BulletRotationalLimitMotor::get_current_limit 0 1 593 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
69
inline int BulletRotationalLimitMotor::get_current_limit(void) const;

1376 17 get_current_error 0 4 1617 45 BulletRotationalLimitMotor::get_current_error 0 1 594 10
/**
 *
 */
77
inline PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const;

1377 20 get_current_position 0 4 1617 48 BulletRotationalLimitMotor::get_current_position 0 1 595 10
/**
 *
 */
80
inline PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const;

1378 23 get_accumulated_impulse 0 4 1617 51 BulletRotationalLimitMotor::get_accumulated_impulse 0 1 596 10
/**
 *
 */
83
inline PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const;

1379 29 BulletTranslationalLimitMotor 0 4 1618 60 BulletTranslationalLimitMotor::BulletTranslationalLimitMotor 0 1 597 22
/**
 *
 */

/**
 *
 */
104
BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy);

1380 30 ~BulletTranslationalLimitMotor 0 4 1618 61 BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor 0 0 10
/**
 *
 */
68
BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor(void);

1381 17 set_motor_enabled 0 4 1618 48 BulletTranslationalLimitMotor::set_motor_enabled 0 1 598 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable);

1382 13 set_low_limit 0 4 1618 44 BulletTranslationalLimitMotor::set_low_limit 0 1 599 10
/**
 *
 */
81
inline void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit);

1383 14 set_high_limit 0 4 1618 45 BulletTranslationalLimitMotor::set_high_limit 0 1 600 10
/**
 *
 */
82
inline void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit);

1384 19 set_target_velocity 0 4 1618 50 BulletTranslationalLimitMotor::set_target_velocity 0 1 601 10
/**
 *
 */
90
inline void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity);

1385 19 set_max_motor_force 0 4 1618 50 BulletTranslationalLimitMotor::set_max_motor_force 0 1 602 10
/**
 *
 */
87
inline void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force);

1386 11 set_damping 0 4 1618 42 BulletTranslationalLimitMotor::set_damping 0 1 603 10
/**
 *
 */
76
inline void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping);

1387 12 set_softness 0 4 1618 43 BulletTranslationalLimitMotor::set_softness 0 1 604 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness);

1388 15 set_restitution 0 4 1618 46 BulletTranslationalLimitMotor::set_restitution 0 1 605 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution);

1389 14 set_normal_cfm 0 4 1618 45 BulletTranslationalLimitMotor::set_normal_cfm 0 1 606 10
/**
 *
 */
80
inline void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm);

1390 12 set_stop_erp 0 4 1618 43 BulletTranslationalLimitMotor::set_stop_erp 0 1 607 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp);

1391 12 set_stop_cfm 0 4 1618 43 BulletTranslationalLimitMotor::set_stop_cfm 0 1 608 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm);

1392 10 is_limited 0 4 1618 41 BulletTranslationalLimitMotor::is_limited 0 1 609 10
/**
 *
 */
70
inline bool BulletTranslationalLimitMotor::is_limited(int axis) const;

1393 17 get_motor_enabled 0 4 1618 48 BulletTranslationalLimitMotor::get_motor_enabled 0 1 610 10
/**
 *
 */
77
inline bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const;

1394 17 get_current_limit 0 4 1618 48 BulletTranslationalLimitMotor::get_current_limit 0 1 611 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
76
inline int BulletTranslationalLimitMotor::get_current_limit(int axis) const;

1395 17 get_current_error 0 4 1618 48 BulletTranslationalLimitMotor::get_current_error 0 1 612 10
/**
 *
 */
77
inline LVector3 BulletTranslationalLimitMotor::get_current_error(void) const;

1396 16 get_current_diff 0 4 1618 47 BulletTranslationalLimitMotor::get_current_diff 0 1 613 10
/**
 *
 */
75
inline LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const;

1397 23 get_accumulated_impulse 0 4 1618 54 BulletTranslationalLimitMotor::get_accumulated_impulse 0 1 614 10
/**
 *
 */
83
inline LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const;

1398 23 BulletGenericConstraint 0 4 1619 48 BulletGenericConstraint::BulletGenericConstraint 0 2 615 616 22
/**
 *
 */

/**
 *
 */
333
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a);
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1399 8 get_axis 0 4 1619 33 BulletGenericConstraint::get_axis 0 1 617 23
// Geometry

/**
 *
 */
59
LVector3 BulletGenericConstraint::get_axis(int axis) const;

1400 9 get_pivot 0 4 1619 34 BulletGenericConstraint::get_pivot 0 1 618 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const;

1401 9 get_angle 0 4 1619 34 BulletGenericConstraint::get_angle 0 1 619 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_angle(int axis) const;

1402 16 set_linear_limit 0 4 1619 41 BulletGenericConstraint::set_linear_limit 0 1 620 20
// Limit

/**
 *
 */
92
void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1403 17 set_angular_limit 0 4 1619 42 BulletGenericConstraint::set_angular_limit 0 1 621 10
/**
 *
 */
93
void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1404 26 get_rotational_limit_motor 0 4 1619 51 BulletGenericConstraint::get_rotational_limit_motor 0 1 622 21
// Motors

/**
 *
 */
89
BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis);

1405 29 get_translational_limit_motor 0 4 1619 54 BulletGenericConstraint::get_translational_limit_motor 0 1 623 10
/**
 *
 */
91
BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void);

1406 10 set_frames 0 4 1619 35 BulletGenericConstraint::set_frames 0 1 624 21
// Frames

/**
 *
 */
97
void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1407 11 get_frame_a 0 4 1619 36 BulletGenericConstraint::get_frame_a 0 1 625 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const;

1408 11 get_frame_b 0 4 1619 36 BulletGenericConstraint::get_frame_b 0 1 626 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const;

1409 14 get_class_type 0 4 1619 39 BulletGenericConstraint::get_class_type 0 1 627 0
64
static TypeHandle BulletGenericConstraint::get_class_type(void);

1410 22 BulletHeightfieldShape 0 4 1620 46 BulletHeightfieldShape::BulletHeightfieldShape 0 3 628 629 630 540
/**
 *
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */
323
BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
inline BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy);

1411 10 operator = 0 4 1620 34 BulletHeightfieldShape::operator = 0 1 631 0
83
inline void BulletHeightfieldShape::operator =(BulletHeightfieldShape const &copy);

1412 27 set_use_diamond_subdivision 0 4 1620 51 BulletHeightfieldShape::set_use_diamond_subdivision 0 1 632 10
/**
 *
 */
75
void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true);

1413 14 get_class_type 0 4 1620 38 BulletHeightfieldShape::get_class_type 0 1 633 0
63
static TypeHandle BulletHeightfieldShape::get_class_type(void);

1414 21 from_collision_solids 0 4 1621 35 BulletHelper::from_collision_solids 0 1 636 31
// Collision shapes

/**
 *
 */
96
static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false);

1415 12 get_sb_index 0 4 1621 26 BulletHelper::get_sb_index 0 1 637 48
// Internal names

// Internal names

/**
 *
 */
73
static inline PointerTo< InternalName > BulletHelper::get_sb_index(void);

1416 11 get_sb_flip 0 4 1621 25 BulletHelper::get_sb_flip 0 1 638 10
/**
 *
 */
72
static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void);

1417 19 add_sb_index_column 0 4 1621 33 BulletHelper::add_sb_index_column 0 1 639 31
// Geom vertex data

/**
 *
 */
108
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format);

1418 18 add_sb_flip_column 0 4 1621 32 BulletHelper::add_sb_flip_column 0 1 640 10
/**
 *
 */
107
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format);

1419 20 make_geom_from_faces 0 4 1621 34 BulletHelper::make_geom_from_faces 0 1 641 25
// Geom utils

/**
 *
 */
149
static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = NULL, bool two_sided = false);

1420 20 make_geom_from_links 0 4 1621 34 BulletHelper::make_geom_from_links 0 1 642 10
/**
 *
 */
125
static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = NULL);

1421 24 make_texcoords_for_patch 0 4 1621 38 BulletHelper::make_texcoords_for_patch 0 1 643 10
/**
 *
 */
83
static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy);

1422 12 BulletHelper 0 4 1621 26 BulletHelper::BulletHelper 0 2 634 635 0
117
inline BulletHelper::BulletHelper(void) = default;
inline BulletHelper::BulletHelper(BulletHelper const &) = default;

1423 13 ~BulletHelper 0 4 1621 27 BulletHelper::~BulletHelper 0 0 0
34
BulletHelper::~BulletHelper(void);

1424 21 BulletHingeConstraint 0 4 1623 44 BulletHingeConstraint::BulletHingeConstraint 0 4 644 645 646 647 709
/**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */

/**
 * Constructs a hinge constraint which connects two rigid bodies.
 */

/**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */

/**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */
725
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false);

1425 15 get_hinge_angle 0 4 1623 38 BulletHingeConstraint::get_hinge_angle 0 1 648 66
/**
 * Returns the angle between node_a and node_b in degrees.
 */
57
PN_stdfloat BulletHingeConstraint::get_hinge_angle(void);

1426 15 get_lower_limit 0 4 1623 38 BulletHingeConstraint::get_lower_limit 0 1 649 54
/**
 * Returns the lower angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const;

1427 15 get_upper_limit 0 4 1623 38 BulletHingeConstraint::get_upper_limit 0 1 650 54
/**
 * Returns the upper angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const;

1428 16 get_angular_only 0 4 1623 39 BulletHingeConstraint::get_angular_only 0 1 651 10
/**
 *
 */
57
bool BulletHingeConstraint::get_angular_only(void) const;

1429 16 set_angular_only 0 4 1623 39 BulletHingeConstraint::set_angular_only 0 1 652 10
/**
 *
 */
57
void BulletHingeConstraint::set_angular_only(bool value);

1430 9 set_limit 0 4 1623 32 BulletHingeConstraint::set_limit 0 1 653 65
/**
 * Sets the lower and upper rotational limits in degrees.
 */
171
void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

1431 8 set_axis 0 4 1623 31 BulletHingeConstraint::set_axis 0 1 654 63
/**
 * Sets the hinge's rotation axis in world coordinates.
 */
59
void BulletHingeConstraint::set_axis(LVector3 const &axis);

1432 20 enable_angular_motor 0 4 1623 43 BulletHingeConstraint::enable_angular_motor 0 1 655 261
/**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */
116
void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse);

1433 12 enable_motor 0 4 1623 35 BulletHingeConstraint::enable_motor 0 1 656 10
/**
 *
 */
54
void BulletHingeConstraint::enable_motor(bool enable);

1434 21 set_max_motor_impulse 0 4 1623 44 BulletHingeConstraint::set_max_motor_impulse 0 1 657 96
/**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */
75
void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

1435 16 set_motor_target 0 4 1623 39 BulletHingeConstraint::set_motor_target 0 2 658 659 22
/**
 *
 */

/**
 *
 */
174
void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt);
void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt);

1436 10 set_frames 0 4 1623 33 BulletHingeConstraint::set_frames 0 1 660 10
/**
 *
 */
95
void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1437 11 get_frame_a 0 4 1623 34 BulletHingeConstraint::get_frame_a 0 1 661 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const;

1438 11 get_frame_b 0 4 1623 34 BulletHingeConstraint::get_frame_b 0 1 662 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const;

1439 14 get_class_type 0 4 1623 37 BulletHingeConstraint::get_class_type 0 1 663 0
62
static TypeHandle BulletHingeConstraint::get_class_type(void);

1440 23 BulletMinkowskiSumShape 0 4 1624 48 BulletMinkowskiSumShape::BulletMinkowskiSumShape 0 2 664 665 22
/**
 *
 */

/**
 *
 */
199
BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b);
inline BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy);

1441 10 operator = 0 4 1624 35 BulletMinkowskiSumShape::operator = 0 1 666 0
85
inline void BulletMinkowskiSumShape::operator =(BulletMinkowskiSumShape const &copy);

1442 15 set_transform_a 0 4 1624 40 BulletMinkowskiSumShape::set_transform_a 0 1 667 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts);

1443 15 set_transform_b 0 4 1624 40 BulletMinkowskiSumShape::set_transform_b 0 1 668 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts);

1444 15 get_transform_a 0 4 1624 40 BulletMinkowskiSumShape::get_transform_a 0 1 669 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const;

1445 15 get_transform_b 0 4 1624 40 BulletMinkowskiSumShape::get_transform_b 0 1 670 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const;

1446 11 get_shape_a 0 4 1624 36 BulletMinkowskiSumShape::get_shape_a 0 1 671 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const;

1447 11 get_shape_b 0 4 1624 36 BulletMinkowskiSumShape::get_shape_b 0 1 672 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const;

1448 10 get_margin 0 4 1624 35 BulletMinkowskiSumShape::get_margin 0 1 673 10
/**
 *
 */
67
inline PN_stdfloat BulletMinkowskiSumShape::get_margin(void) const;

1449 14 get_class_type 0 4 1624 39 BulletMinkowskiSumShape::get_class_type 0 1 674 0
64
static TypeHandle BulletMinkowskiSumShape::get_class_type(void);

1450 22 BulletMultiSphereShape 0 4 1627 46 BulletMultiSphereShape::BulletMultiSphereShape 0 2 675 676 22
/**
 *
 */

/**
 *
 */
194
BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii);
inline BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy);

1451 10 operator = 0 4 1627 34 BulletMultiSphereShape::operator = 0 1 677 0
83
inline void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy);

1452 16 get_sphere_count 0 4 1627 40 BulletMultiSphereShape::get_sphere_count 0 1 678 10
/**
 *
 */
64
inline int BulletMultiSphereShape::get_sphere_count(void) const;

1453 14 get_sphere_pos 0 4 1627 38 BulletMultiSphereShape::get_sphere_pos 0 1 679 10
/**
 *
 */
71
inline LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const;

1454 17 get_sphere_radius 0 4 1627 41 BulletMultiSphereShape::get_sphere_radius 0 1 680 10
/**
 *
 */
78
inline PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const;

1455 0 0 0 0 0 0 0 0
0

1456 0 0 0 0 0 0 0 0
0

1457 14 get_class_type 0 4 1627 38 BulletMultiSphereShape::get_class_type 0 1 681 0
63
static TypeHandle BulletMultiSphereShape::get_class_type(void);

1458 16 BulletPlaneShape 0 4 1628 34 BulletPlaneShape::BulletPlaneShape 0 2 682 683 22
/**
 *
 */

/**
 *
 */
154
BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant);
inline BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy);

1459 10 operator = 0 4 1628 28 BulletPlaneShape::operator = 0 1 684 0
71
inline void BulletPlaneShape::operator =(BulletPlaneShape const &copy);

1460 16 get_plane_normal 0 4 1628 34 BulletPlaneShape::get_plane_normal 0 1 685 10
/**
 *
 */
63
inline LVector3 BulletPlaneShape::get_plane_normal(void) const;

1461 18 get_plane_constant 0 4 1628 36 BulletPlaneShape::get_plane_constant 0 1 686 10
/**
 *
 */
68
inline PN_stdfloat BulletPlaneShape::get_plane_constant(void) const;

1462 15 make_from_solid 0 4 1628 33 BulletPlaneShape::make_from_solid 0 1 687 10
/**
 *
 */
88
static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid);

1463 14 get_class_type 0 4 1628 32 BulletPlaneShape::get_class_type 0 1 688 0
57
static TypeHandle BulletPlaneShape::get_class_type(void);

1464 22 BulletSliderConstraint 0 4 1629 46 BulletSliderConstraint::BulletSliderConstraint 0 2 689 690 22
/**
 *
 */

/**
 *
 */
328
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a);
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1465 14 get_linear_pos 0 4 1629 38 BulletSliderConstraint::get_linear_pos 0 1 691 10
/**
 *
 */
63
PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const;

1466 15 get_angular_pos 0 4 1629 39 BulletSliderConstraint::get_angular_pos 0 1 692 10
/**
 *
 */
64
PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const;

1467 22 get_lower_linear_limit 0 4 1629 46 BulletSliderConstraint::get_lower_linear_limit 0 1 693 32
// Limits

// Limits

/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const;

1468 22 get_upper_linear_limit 0 4 1629 46 BulletSliderConstraint::get_upper_linear_limit 0 1 694 10
/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const;

1469 23 get_lower_angular_limit 0 4 1629 47 BulletSliderConstraint::get_lower_angular_limit 0 1 695 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const;

1470 23 get_upper_angular_limit 0 4 1629 47 BulletSliderConstraint::get_upper_angular_limit 0 1 696 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const;

1471 22 set_lower_linear_limit 0 4 1629 46 BulletSliderConstraint::set_lower_linear_limit 0 1 697 10
/**
 *
 */
71
void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value);

1472 22 set_upper_linear_limit 0 4 1629 46 BulletSliderConstraint::set_upper_linear_limit 0 1 698 10
/**
 *
 */
71
void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value);

1473 23 set_lower_angular_limit 0 4 1629 47 BulletSliderConstraint::set_lower_angular_limit 0 1 699 10
/**
 *
 */
72
void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value);

1474 23 set_upper_angular_limit 0 4 1629 47 BulletSliderConstraint::set_upper_angular_limit 0 1 700 10
/**
 *
 */
72
void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value);

1475 24 set_powered_linear_motor 0 4 1629 48 BulletSliderConstraint::set_powered_linear_motor 0 1 701 44
// Linear motor

// Linear motor

/**
 *
 */
63
void BulletSliderConstraint::set_powered_linear_motor(bool on);

1476 32 set_target_linear_motor_velocity 0 4 1629 56 BulletSliderConstraint::set_target_linear_motor_velocity 0 1 702 10
/**
 *
 */
91
void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity);

1477 26 set_max_linear_motor_force 0 4 1629 50 BulletSliderConstraint::set_max_linear_motor_force 0 1 703 10
/**
 *
 */
79
void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force);

1478 24 get_powered_linear_motor 0 4 1629 48 BulletSliderConstraint::get_powered_linear_motor 0 1 704 10
/**
 *
 */
66
bool BulletSliderConstraint::get_powered_linear_motor(void) const;

1479 32 get_target_linear_motor_velocity 0 4 1629 56 BulletSliderConstraint::get_target_linear_motor_velocity 0 1 705 10
/**
 *
 */
81
PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const;

1480 26 get_max_linear_motor_force 0 4 1629 50 BulletSliderConstraint::get_max_linear_motor_force 0 1 706 10
/**
 *
 */
75
PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const;

1481 25 set_powered_angular_motor 0 4 1629 49 BulletSliderConstraint::set_powered_angular_motor 0 1 707 46
// Angular motor

// Angular motor

/**
 *
 */
64
void BulletSliderConstraint::set_powered_angular_motor(bool on);

1482 33 set_target_angular_motor_velocity 0 4 1629 57 BulletSliderConstraint::set_target_angular_motor_velocity 0 1 708 10
/**
 *
 */
92
void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity);

1483 27 set_max_angular_motor_force 0 4 1629 51 BulletSliderConstraint::set_max_angular_motor_force 0 1 709 10
/**
 *
 */
80
void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force);

1484 25 get_powered_angular_motor 0 4 1629 49 BulletSliderConstraint::get_powered_angular_motor 0 1 710 10
/**
 *
 */
67
bool BulletSliderConstraint::get_powered_angular_motor(void) const;

1485 33 get_target_angular_motor_velocity 0 4 1629 57 BulletSliderConstraint::get_target_angular_motor_velocity 0 1 711 10
/**
 *
 */
82
PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const;

1486 27 get_max_angular_motor_force 0 4 1629 51 BulletSliderConstraint::get_max_angular_motor_force 0 1 712 10
/**
 *
 */
76
PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const;

1487 10 set_frames 0 4 1629 34 BulletSliderConstraint::set_frames 0 1 713 21
// Frames

/**
 *
 */
96
void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1488 11 get_frame_a 0 4 1629 35 BulletSliderConstraint::get_frame_a 0 1 714 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const;

1489 11 get_frame_b 0 4 1629 35 BulletSliderConstraint::get_frame_b 0 1 715 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const;

1490 14 get_class_type 0 4 1629 38 BulletSliderConstraint::get_class_type 0 1 716 0
63
static TypeHandle BulletSliderConstraint::get_class_type(void);

1491 18 upcast_to_IControl 0 12 1630 41 BulletSoftBodyControl::upcast_to_IControl 0 1 723 45
upcast from BulletSoftBodyControl to IControl
78
btSoftBody::AJoint::IControl *BulletSoftBodyControl::upcast_to_IControl(void);

1492 42 downcast_IControl_to_BulletSoftBodyControl 0 8 0 42 downcast_IControl_to_BulletSoftBodyControl 0 1 724 47
downcast from IControl to BulletSoftBodyControl
102
BulletSoftBodyControl *downcast_IControl_to_BulletSoftBodyControl(btSoftBody::AJoint::IControl *this);

1493 21 BulletSoftBodyControl 0 4 1630 44 BulletSoftBodyControl::BulletSoftBodyControl 0 2 717 718 10
/**
 *
 */
145
BulletSoftBodyControl::BulletSoftBodyControl(void);
inline BulletSoftBodyControl::BulletSoftBodyControl(BulletSoftBodyControl const &) = default;

1494 22 ~BulletSoftBodyControl 0 6 1630 45 BulletSoftBodyControl::~BulletSoftBodyControl 0 0 10
/**
 *
 */
60
virtual BulletSoftBodyControl::~BulletSoftBodyControl(void);

1495 8 set_goal 0 4 1630 31 BulletSoftBodyControl::set_goal 0 1 719 20
// Motor

/**
 *
 */
62
inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal);

1496 14 set_max_torque 0 4 1630 37 BulletSoftBodyControl::set_max_torque 0 1 720 10
/**
 *
 */
73
inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque);

1497 9 set_angle 0 4 1630 32 BulletSoftBodyControl::set_angle 0 1 721 20
// Steer

/**
 *
 */
64
inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle);

1498 8 set_sign 0 4 1630 31 BulletSoftBodyControl::set_sign 0 1 722 10
/**
 *
 */
62
inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign);

1499 8 get_body 0 4 1634 29 BulletSoftBodyShape::get_body 0 1 725 10
/**
 *
 */
62
BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const;

1500 14 get_class_type 0 4 1634 35 BulletSoftBodyShape::get_class_type 0 1 726 0
60
static TypeHandle BulletSoftBodyShape::get_class_type(void);

1501 17 BulletSphereShape 0 4 1635 36 BulletSphereShape::BulletSphereShape 0 2 727 728 22
/**
 *
 */

/**
 *
 */
133
BulletSphereShape::BulletSphereShape(PN_stdfloat radius);
inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy);

1502 10 operator = 0 4 1635 29 BulletSphereShape::operator = 0 1 729 0
73
inline void BulletSphereShape::operator =(BulletSphereShape const &copy);

1503 10 get_radius 0 4 1635 29 BulletSphereShape::get_radius 0 1 730 10
/**
 *
 */
61
inline PN_stdfloat BulletSphereShape::get_radius(void) const;

1504 15 make_from_solid 0 4 1635 34 BulletSphereShape::make_from_solid 0 1 731 10
/**
 *
 */
91
static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid);

1505 14 get_class_type 0 4 1635 33 BulletSphereShape::get_class_type 0 1 732 0
58
static TypeHandle BulletSphereShape::get_class_type(void);

1506 25 BulletSphericalConstraint 0 4 1636 52 BulletSphericalConstraint::BulletSphericalConstraint 0 2 733 734 22
/**
 *
 */

/**
 *
 */
284
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a);
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b);

1507 11 set_pivot_a 0 4 1636 38 BulletSphericalConstraint::set_pivot_a 0 1 735 32
// Pivots

// Pivots

/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a);

1508 11 set_pivot_b 0 4 1636 38 BulletSphericalConstraint::set_pivot_b 0 1 736 10
/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b);

1509 14 get_pivot_in_a 0 4 1636 41 BulletSphericalConstraint::get_pivot_in_a 0 1 737 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const;

1510 14 get_pivot_in_b 0 4 1636 41 BulletSphericalConstraint::get_pivot_in_b 0 1 738 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const;

1511 14 get_class_type 0 4 1636 41 BulletSphericalConstraint::get_class_type 0 1 739 0
66
static TypeHandle BulletSphericalConstraint::get_class_type(void);

1512 22 BulletTickCallbackData 0 4 1637 46 BulletTickCallbackData::BulletTickCallbackData 0 1 740 10
/**
 *
 */
73
inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep);

1513 12 get_timestep 0 4 1637 36 BulletTickCallbackData::get_timestep 0 1 741 10
/**
 *
 */
68
inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const;

1514 14 get_class_type 0 4 1637 38 BulletTickCallbackData::get_class_type 0 1 742 0
63
static TypeHandle BulletTickCallbackData::get_class_type(void);

1515 23 ~BulletTickCallbackData 0 4 1637 47 BulletTickCallbackData::~BulletTickCallbackData 0 0 0
54
BulletTickCallbackData::~BulletTickCallbackData(void);

1516 18 BulletTriangleMesh 0 4 1638 38 BulletTriangleMesh::BulletTriangleMesh 0 1 743 10
/**
 *
 */
45
BulletTriangleMesh::BulletTriangleMesh(void);

1517 12 add_triangle 0 4 1638 32 BulletTriangleMesh::add_triangle 0 1 744 347
/**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
135
void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false);

1518 9 add_array 0 4 1638 29 BulletTriangleMesh::add_array 0 1 745 452
/**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
128
void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false);

1519 8 add_geom 0 4 1638 28 BulletTriangleMesh::add_geom 0 1 746 461
/**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
154
void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = ::TransformState::make_identity());

1520 20 set_welding_distance 0 4 1638 40 BulletTriangleMesh::set_welding_distance 0 1 747 254
/**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */
68
void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance);

1521 11 preallocate 0 4 1638 31 BulletTriangleMesh::preallocate 0 1 748 239
/**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */
69
void BulletTriangleMesh::preallocate(int num_verts, int num_indices);

1522 17 get_num_triangles 0 4 1638 37 BulletTriangleMesh::get_num_triangles 0 1 749 65
/**
 * Returns the number of triangles in this triangle mesh.
 */
62
std::size_t BulletTriangleMesh::get_num_triangles(void) const;

1523 20 get_welding_distance 0 4 1638 40 BulletTriangleMesh::get_welding_distance 0 1 750 110
/**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */
65
PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const;

1524 6 output 0 6 1638 26 BulletTriangleMesh::output 0 1 751 10
/**
 *
 */
60
virtual void BulletTriangleMesh::output(ostream &out) const;

1525 5 write 0 6 1638 25 BulletTriangleMesh::write 0 1 752 10
/**
 *
 */
77
virtual void BulletTriangleMesh::write(ostream &out, int indent_level) const;

1526 16 get_num_vertices 0 4 1638 36 BulletTriangleMesh::get_num_vertices 0 1 754 64
/**
 * Returns the number of vertices in this triangle mesh.
 */
68
inline std::size_t BulletTriangleMesh::get_num_vertices(void) const;

1527 0 0 0 0 0 0 0 0
0

1528 0 0 0 0 0 0 0 0
0

1529 14 get_class_type 0 4 1638 34 BulletTriangleMesh::get_class_type 0 1 753 0
59
static TypeHandle BulletTriangleMesh::get_class_type(void);

1530 23 BulletTriangleMeshShape 0 4 1640 48 BulletTriangleMeshShape::BulletTriangleMeshShape 0 2 755 756 145
/**
 *
 */

/**
 * Only used by make_from_bam.
 */

/**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */
222
BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true);
inline BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy);

1531 10 operator = 0 4 1640 35 BulletTriangleMeshShape::operator = 0 1 757 0
85
inline void BulletTriangleMeshShape::operator =(BulletTriangleMeshShape const &copy);

1532 10 refit_tree 0 4 1640 35 BulletTriangleMeshShape::refit_tree 0 1 758 10
/**
 *
 */
91
void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max);

1533 9 is_static 0 4 1640 34 BulletTriangleMeshShape::is_static 0 1 759 10
/**
 *
 */
59
inline bool BulletTriangleMeshShape::is_static(void) const;

1534 10 is_dynamic 0 4 1640 35 BulletTriangleMeshShape::is_dynamic 0 1 760 10
/**
 *
 */
60
inline bool BulletTriangleMeshShape::is_dynamic(void) const;

1535 14 get_class_type 0 4 1640 39 BulletTriangleMeshShape::get_class_type 0 1 761 0
64
static TypeHandle BulletTriangleMeshShape::get_class_type(void);

763
1 0 0 7 27 1641 774 0 0 0 
2 0 0 7 27 1641 774 0 0 1 6 param0 0 1642  
3 0 0 7 5 1641 774 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
4 0 0 7 6 1538 0 0 10 /**
 *
 */ 1 4 this 3 1642  
5 0 0 7 7 1644 0 0 10 /**
 *
 */ 1 4 this 3 1642  
6 0 0 7 8 1645 0 0 10 /**
 *
 */ 1 4 this 3 1642  
7 0 0 6 9 1544 0 0 10 /**
 *
 */ 1 4 this 3 1642  
8 0 0 6 10 1546 0 0 10 /**
 *
 */ 1 4 this 3 1642  
9 0 0 6 11 1546 0 0 10 /**
 *
 */ 1 4 this 3 1642  
10 0 0 7 34 1646 785 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
11 0 0 7 35 1644 0 0 10 /**
 *
 */ 1 4 this 3 1647  
12 0 0 7 36 1644 0 0 10 /**
 *
 */ 1 4 this 3 1647  
13 0 0 6 37 1552 0 0 10 /**
 *
 */ 1 4 this 3 1647  
14 0 0 6 38 1544 0 0 10 /**
 *
 */ 1 4 this 3 1647  
15 0 0 6 39 1546 0 0 10 /**
 *
 */ 1 4 this 3 1647  
16 0 0 7 40 1642 0 0 10 /**
 *
 */ 2 4 this 3 1647  3 idx 1 1546  
17 0 0 6 32 1649 0 0 0 1 4 this 3 1646  
18 0 0 6 33 1646 0 0 0 2 4 this 3 1649  4 this 1 1649  
19 0 0 6 50 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
20 0 0 6 51 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
21 0 0 6 52 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
22 0 0 6 53 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
23 0 0 6 54 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
24 0 0 6 55 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
25 0 0 6 56 1552 0 0 10 /**
 *
 */ 1 4 this 3 1625  
26 0 0 4 57 1650 0 0 10 /**
 *
 */ 2 4 this 3 1559  6 margin 1 1544  
27 0 0 6 58 1651 0 0 10 /**
 *
 */ 1 4 this 3 1625  
28 0 0 6 59 1544 0 0 10 /**
 *
 */ 1 4 this 3 1625  
29 0 0 7 60 1652 0 0 62 /**
 * Returns the current bounds of this collision shape.
 */ 1 4 this 3 1625  
30 0 0 7 76 1654 0 0 0 0 
31 0 0 7 78 1654 0 0 0 0 
32 0 0 4 81 1650 0 0 9 // Shapes 3 4 this 3 1655  5 shape 1 1559  5 xform 1 1656  
33 0 0 4 82 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  5 shape 1 1559  
34 0 0 6 83 1546 0 0 10 /**
 *
 */ 1 4 this 3 1659  
35 0 0 7 84 1559 0 0 10 /**
 *
 */ 2 4 this 3 1659  3 idx 1 1546  
36 0 0 7 86 1644 0 0 10 /**
 *
 */ 2 4 this 3 1659  3 idx 1 1546  
37 0 0 7 87 1661 0 0 10 /**
 *
 */ 2 4 this 3 1659  3 idx 1 1546  
38 0 0 7 88 1656 0 0 10 /**
 *
 */ 2 4 this 3 1659  3 idx 1 1546  
39 0 0 7 89 1652 0 0 81 /**
 * Returns the current bounds of all collision shapes owned by this body.
 */ 1 4 this 3 1659  
40 0 0 4 90 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  5 cnode 1 1662  
41 0 0 6 91 1552 0 0 23 // Static and kinematic 1 4 this 3 1659  
42 0 0 6 92 1552 0 0 10 /**
 *
 */ 1 4 this 3 1659  
43 0 0 4 93 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  5 value 1 1552  
44 0 0 4 94 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  5 value 1 1552  
45 0 0 4 95 1650 0 0 11 // Contacts 2 4 this 3 1655  4 mask 1 1664  
46 0 0 4 96 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  5 value 1 1552  
47 0 0 6 97 1552 0 0 10 /**
 *
 */ 1 4 this 3 1659  
48 0 0 4 98 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  5 value 1 1552  
49 0 0 6 99 1552 0 0 10 /**
 *
 */ 1 4 this 3 1659  
50 0 0 6 100 1552 0 0 10 /**
 *
 */ 2 4 this 3 1655  4 node 1 1538  
51 0 0 6 101 1552 0 0 10 /**
 *
 */ 1 4 this 3 1659  
52 0 0 6 102 1544 0 0 10 /**
 *
 */ 1 4 this 3 1659  
53 0 0 4 103 1650 0 0 106 /**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */ 2 4 this 3 1655  9 threshold 1 1544  
54 0 0 6 104 1552 0 0 15 // Deactivation 1 4 this 3 1659  
55 0 0 4 105 1650 0 0 10 /**
 *
 */ 3 4 this 3 1655  6 active 1 1552  5 force 1 1552  
56 0 0 4 106 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  6 active 1 1552  
57 0 0 4 107 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  2 dt 1 1544  
58 0 0 6 108 1544 0 0 10 /**
 *
 */ 1 4 this 3 1659  
59 0 0 4 109 1650 0 0 163 /**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */ 2 4 this 3 1655  7 enabled 1 1552  
60 0 0 6 110 1552 0 0 10 /**
 *
 */ 1 4 this 3 1659  
61 0 0 4 111 1650 0 0 132 /**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */ 2 4 this 3 1655  7 enabled 1 1668  
62 0 0 6 112 1552 0 0 141 /**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */ 1 4 this 3 1659  
63 0 0 6 113 1544 0 0 27 // Friction and Restitution 1 4 this 3 1659  
64 0 0 4 114 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  11 restitution 1 1544  
65 0 0 6 115 1544 0 0 10 /**
 *
 */ 1 4 this 3 1659  
66 0 0 4 116 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  8 friction 1 1544  
67 0 0 6 117 1552 0 0 10 /**
 *
 */ 1 4 this 3 1659  
68 0 0 4 118 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  8 friction 1 1669  
69 0 0 7 119 1671 0 0 10 /**
 *
 */ 1 4 this 3 1659  
70 0 0 6 120 1544 0 0 10 /**
 *
 */ 1 4 this 3 1659  
71 0 0 6 121 1544 0 0 10 /**
 *
 */ 1 4 this 3 1659  
72 0 0 4 122 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  6 radius 1 1544  
73 0 0 4 123 1650 0 0 10 /**
 *
 */ 2 4 this 3 1655  9 threshold 1 1544  
74 0 0 4 124 1650 0 0 216 /**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */ 1 4 this 3 1655  
75 0 0 7 155 1654 0 0 0 0 
76 0 0 7 157 1674 0 0 10 /**
 *
 */ 1 4 copy 1 1672  
77 0 0 7 157 1674 0 0 10 /**
 *
 */ 1 11 halfExtents 1 1669  
78 0 0 7 158 1674 0 0 0 2 4 this 3 1674  4 copy 1 1672  
79 0 0 7 159 1671 0 0 10 /**
 *
 */ 1 4 this 3 1672  
80 0 0 7 160 1671 0 0 10 /**
 *
 */ 1 4 this 3 1672  
81 0 0 7 161 1674 0 0 10 /**
 *
 */ 1 5 solid 1 1675  
82 0 0 7 164 1654 0 0 0 0 
83 0 0 7 166 1680 0 0 10 /**
 *
 */ 1 4 copy 1 1678  
84 0 0 7 166 1680 0 0 10 /**
 *
 */ 3 6 radius 1 1544  6 height 1 1544  2 up 1 1536  
85 0 0 7 167 1680 0 0 0 2 4 this 3 1680  4 copy 1 1678  
86 0 0 6 168 1544 0 0 10 /**
 *
 */ 1 4 this 3 1678  
87 0 0 6 169 1544 0 0 10 /**
 *
 */ 1 4 this 3 1678  
88 0 0 7 172 1654 0 0 0 0 
89 0 0 7 174 1681 799 0 10 /**
 *
 */ 3 5 shape 1 1559  11 step_height 1 1544  4 name 1 1651  
90 0 0 4 175 1650 0 0 10 /**
 *
 */ 3 4 this 3 1681  8 velocity 1 1682  8 is_local 1 1552  
91 0 0 4 176 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  5 omega 1 1544  
92 0 0 7 177 1559 0 0 10 /**
 *
 */ 1 4 this 3 1684  
93 0 0 4 178 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  7 gravity 1 1544  
94 0 0 6 179 1544 0 0 10 /**
 *
 */ 1 4 this 3 1684  
95 0 0 4 180 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  10 fall_speed 1 1544  
96 0 0 4 181 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  10 jump_speed 1 1544  
97 0 0 4 182 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  15 max_jump_height 1 1544  
98 0 0 4 183 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  9 max_slope 1 1544  
99 0 0 6 184 1544 0 0 10 /**
 *
 */ 1 4 this 3 1684  
100 0 0 4 185 1650 0 0 10 /**
 *
 */ 2 4 this 3 1681  5 value 1 1552  
101 0 0 6 186 1552 0 0 10 /**
 *
 */ 1 4 this 3 1684  
102 0 0 6 187 1552 0 0 10 /**
 *
 */ 1 4 this 3 1684  
103 0 0 4 188 1650 0 0 10 /**
 *
 */ 1 4 this 3 1681  
104 0 0 7 193 1654 0 0 0 0 
105 0 0 7 216 1688 888 0 0 1 6 param0 0 1686  
106 0 0 7 198 1688 888 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
107 0 0 7 199 1644 0 0 10 /**
 *
 */ 1 4 this 3 1686  
108 0 0 7 200 1644 0 0 10 /**
 *
 */ 1 4 this 3 1686  
109 0 0 6 201 1552 0 0 10 /**
 *
 */ 1 4 this 3 1686  
110 0 0 7 202 1538 0 0 10 /**
 *
 */ 1 4 this 3 1686  
111 0 0 7 203 1644 0 0 10 /**
 *
 */ 1 4 this 3 1686  
112 0 0 7 204 1645 0 0 10 /**
 *
 */ 1 4 this 3 1686  
113 0 0 6 205 1544 0 0 10 /**
 *
 */ 1 4 this 3 1686  
114 0 0 6 206 1546 0 0 10 /**
 *
 */ 1 4 this 3 1686  
115 0 0 6 207 1546 0 0 10 /**
 *
 */ 1 4 this 3 1686  
116 0 0 6 196 1689 0 0 0 1 4 this 3 1688  
117 0 0 6 197 1688 0 0 0 2 4 this 3 1689  4 this 1 1689  
118 0 0 7 236 1692 900 0 0 1 6 param0 0 1690  
119 0 0 7 222 1692 900 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
120 0 0 7 223 1644 0 0 10 /**
 *
 */ 1 4 this 3 1690  
121 0 0 7 224 1644 0 0 10 /**
 *
 */ 1 4 this 3 1690  
122 0 0 6 225 1552 0 0 10 /**
 *
 */ 1 4 this 3 1690  
123 0 0 7 226 1538 0 0 10 /**
 *
 */ 1 4 this 3 1690  
124 0 0 7 227 1644 0 0 10 /**
 *
 */ 1 4 this 3 1690  
125 0 0 7 228 1645 0 0 10 /**
 *
 */ 1 4 this 3 1690  
126 0 0 6 229 1544 0 0 10 /**
 *
 */ 1 4 this 3 1690  
127 0 0 6 220 1693 0 0 0 1 4 this 3 1692  
128 0 0 6 221 1692 0 0 0 2 4 this 3 1693  4 this 1 1693  
129 0 0 7 239 1696 0 0 10 /**
 *
 */ 1 4 copy 1 1694  
130 0 0 7 239 1696 0 0 10 /**
 *
 */ 3 6 radius 1 1544  6 height 1 1544  2 up 1 1536  
131 0 0 7 240 1696 0 0 0 2 4 this 3 1696  4 copy 1 1694  
132 0 0 6 241 1544 0 0 10 /**
 *
 */ 1 4 this 3 1694  
133 0 0 6 242 1544 0 0 10 /**
 *
 */ 1 4 this 3 1694  
134 0 0 7 245 1654 0 0 0 0 
135 0 0 7 248 1576 0 0 10 /**
 *
 */ 1 4 this 3 1609  
136 0 0 7 249 1576 0 0 10 /**
 *
 */ 1 4 this 3 1609  
137 0 0 4 250 1650 0 0 10 /**
 *
 */ 2 4 this 3 1609  5 value 1 1552  
138 0 0 4 251 1650 0 0 10 /**
 *
 */ 2 4 this 3 1609  4 size 1 1544  
139 0 0 6 252 1544 0 0 10 /**
 *
 */ 1 4 this 3 1609  
140 0 0 6 253 1544 0 0 10 /**
 *
 */ 1 4 this 3 1697  
141 0 0 4 254 1650 0 0 212 /**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */ 2 4 this 3 1609  9 threshold 1 1544  
142 0 0 6 255 1544 0 0 73 /**
 * Returns the applied impluse limit for breaking the constraint.
 */ 1 4 this 3 1697  
143 0 0 4 256 1650 0 0 10 /**
 *
 */ 2 4 this 3 1609  7 enabled 1 1552  
144 0 0 6 257 1552 0 0 53 /**
 * Returns TRUE if the constraint is enabled.
 */ 1 4 this 3 1697  
145 0 0 4 259 1650 0 0 10 /**
 *
 */ 4 4 this 3 1609  3 num 1 1575  5 value 1 1544  4 axis 1 1546  
146 0 0 6 260 1544 0 0 10 /**
 *
 */ 3 4 this 3 1609  3 num 1 1575  4 axis 1 1546  
147 0 0 7 324 1654 0 0 0 0 
148 0 0 7 264 1576 0 0 10 /**
 *
 */ 1 4 name 1 1651  
149 0 0 4 265 1650 0 0 257 /**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */ 2 4 this 3 1576  4 mass 1 1544  
150 0 0 6 266 1544 0 0 128 /**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */ 1 4 this 3 1699  
151 0 0 6 267 1544 0 0 52 /**
 * Returns the inverse mass of a rigid body.
 */ 1 4 this 3 1699  
152 0 0 4 268 1650 0 0 591 /**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */ 2 4 this 3 1576  7 inertia 1 1669  
153 0 0 7 269 1645 0 0 174 /**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */ 1 4 this 3 1699  
154 0 0 7 270 1645 0 0 10 /**
 *
 */ 1 4 this 3 1699  
155 0 0 7 271 1701 0 0 10 /**
 *
 */ 1 4 this 3 1699  
156 0 0 7 272 1645 0 0 11 // Velocity 1 4 this 3 1699  
157 0 0 7 273 1645 0 0 10 /**
 *
 */ 1 4 this 3 1699  
158 0 0 4 274 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  8 velocity 1 1682  
159 0 0 4 275 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  8 velocity 1 1682  
160 0 0 6 276 1544 0 0 10 // Damping 1 4 this 3 1699  
161 0 0 6 277 1544 0 0 10 /**
 *
 */ 1 4 this 3 1699  
162 0 0 4 278 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  5 value 1 1544  
163 0 0 4 279 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  5 value 1 1544  
164 0 0 4 280 1650 0 0 9 // Forces 1 4 this 3 1576  
165 0 0 4 281 1650 0 0 10 /**
 *
 */ 3 4 this 3 1576  5 force 1 1682  3 pos 1 1702  
166 0 0 4 282 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  5 force 1 1682  
167 0 0 4 283 1650 0 0 10 /**
 *
 */ 3 4 this 3 1576  7 impulse 1 1682  3 pos 1 1702  
168 0 0 4 284 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  7 impulse 1 1682  
169 0 0 4 285 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  6 torque 1 1682  
170 0 0 4 286 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  6 torque 1 1682  
171 0 0 7 287 1645 0 0 10 /**
 *
 */ 1 4 this 3 1699  
172 0 0 7 288 1645 0 0 10 /**
 *
 */ 1 4 this 3 1699  
173 0 0 6 289 1544 0 0 26 // Deactivation thresholds 1 4 this 3 1699  
174 0 0 6 290 1544 0 0 10 /**
 *
 */ 1 4 this 3 1699  
175 0 0 4 291 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  9 threshold 1 1544  
176 0 0 4 292 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  9 threshold 1 1544  
177 0 0 4 293 1650 0 0 10 // Gravity 2 4 this 3 1576  7 gravity 1 1682  
178 0 0 7 294 1645 0 0 10 /**
 *
 */ 1 4 this 3 1699  
179 0 0 7 295 1645 0 0 20 // Restrict movement 1 4 this 3 1699  
180 0 0 7 296 1645 0 0 10 /**
 *
 */ 1 4 this 3 1699  
181 0 0 4 297 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  6 factor 1 1682  
182 0 0 4 298 1650 0 0 10 /**
 *
 */ 2 4 this 3 1576  6 factor 1 1682  
183 0 0 6 299 1552 0 0 123 /**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */ 1 4 this 3 1576  
184 0 0 7 318 1654 0 0 0 0 
185 0 0 7 326 1704 0 0 10 /**
 *
 */ 4 6 node_a 1 1699  6 node_b 1 1699  7 frame_a 1 1656  7 frame_b 1 1656  
186 0 0 7 326 1704 0 0 10 /**
 *
 */ 2 6 node_a 1 1699  7 frame_a 1 1656  
187 0 0 4 327 1650 0 0 10 /**
 *
 */ 7 4 this 3 1704  6 swing1 1 1544  6 swing2 1 1544  5 twist 1 1544  8 softness 1 1544  4 bias 1 1544  10 relaxation 1 1544  
188 0 0 4 327 1650 0 0 10 /**
 *
 */ 3 4 this 3 1704  5 index 1 1546  5 value 1 1544  
189 0 0 4 328 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  7 damping 1 1544  
190 0 0 6 329 1544 0 0 10 /**
 *
 */ 1 4 this 3 1705  
191 0 0 4 330 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  9 threshold 1 1544  
192 0 0 4 331 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  6 enable 1 1552  
193 0 0 4 332 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  11 max_impulse 1 1544  
194 0 0 4 333 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  11 max_impulse 1 1544  
195 0 0 4 334 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  4 quat 1 1707  
196 0 0 4 335 1650 0 0 10 /**
 *
 */ 2 4 this 3 1704  4 quat 1 1707  
197 0 0 4 336 1650 0 0 10 /**
 *
 */ 3 4 this 3 1704  4 ts_a 1 1656  4 ts_b 1 1656  
198 0 0 7 337 1656 0 0 10 /**
 *
 */ 1 4 this 3 1705  
199 0 0 7 338 1656 0 0 10 /**
 *
 */ 1 4 this 3 1705  
200 0 0 7 342 1654 0 0 0 0 
201 0 0 6 345 1546 0 0 10 /**
 *
 */ 1 4 this 3 1711  
202 0 0 6 346 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
203 0 0 6 347 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
204 0 0 7 348 1644 0 0 10 /**
 *
 */ 1 4 this 3 1711  
205 0 0 7 349 1644 0 0 10 /**
 *
 */ 1 4 this 3 1711  
206 0 0 7 350 1645 0 0 10 /**
 *
 */ 1 4 this 3 1711  
207 0 0 7 351 1644 0 0 10 /**
 *
 */ 1 4 this 3 1711  
208 0 0 7 352 1644 0 0 10 /**
 *
 */ 1 4 this 3 1711  
209 0 0 6 353 1546 0 0 10 /**
 *
 */ 1 4 this 3 1711  
210 0 0 6 354 1546 0 0 10 /**
 *
 */ 1 4 this 3 1711  
211 0 0 6 355 1546 0 0 10 /**
 *
 */ 1 4 this 3 1711  
212 0 0 6 356 1546 0 0 10 /**
 *
 */ 1 4 this 3 1711  
213 0 0 4 357 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1552  
214 0 0 4 358 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  3 dir 1 1669  
215 0 0 4 359 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  3 dir 1 1669  
216 0 0 4 360 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
217 0 0 4 361 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
218 0 0 4 362 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
219 0 0 4 363 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
220 0 0 4 364 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
221 0 0 4 365 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
222 0 0 4 366 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
223 0 0 4 367 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
224 0 0 4 368 1650 0 0 10 /**
 *
 */ 2 4 this 3 1612  5 value 1 1544  
225 0 0 6 369 1552 0 0 10 /**
 *
 */ 1 4 this 3 1711  
226 0 0 7 370 1645 0 0 10 /**
 *
 */ 1 4 this 3 1711  
227 0 0 7 371 1645 0 0 10 /**
 *
 */ 1 4 this 3 1711  
228 0 0 6 372 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
229 0 0 6 373 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
230 0 0 6 374 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
231 0 0 6 375 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
232 0 0 6 376 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
233 0 0 6 377 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
234 0 0 6 378 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
235 0 0 6 379 1544 0 0 10 /**
 *
 */ 1 4 this 3 1711  
236 0 0 7 405 1713 0 0 10 /**
 *
 */ 7 2 mp 1 1612  5 node0 1 1538  5 node1 1 1538  3 id0 1 1546  3 id1 1 1546  6 index0 1 1546  6 index1 1 1546  
237 0 0 6 406 1612 0 0 10 /**
 *
 */ 1 4 this 3 1714  
238 0 0 7 407 1538 0 0 10 /**
 *
 */ 1 4 this 3 1714  
239 0 0 7 408 1538 0 0 10 /**
 *
 */ 1 4 this 3 1714  
240 0 0 6 409 1546 0 0 10 /**
 *
 */ 1 4 this 3 1714  
241 0 0 6 410 1546 0 0 10 /**
 *
 */ 1 4 this 3 1714  
242 0 0 6 411 1546 0 0 10 /**
 *
 */ 1 4 this 3 1714  
243 0 0 6 412 1546 0 0 10 /**
 *
 */ 1 4 this 3 1714  
244 0 0 7 420 1654 0 0 0 0 
245 0 0 6 422 1612 0 0 10 /**
 *
 */ 1 4 this 3 1716  
246 0 0 7 423 1538 0 0 10 /**
 *
 */ 1 4 this 3 1717  
247 0 0 7 424 1538 0 0 10 /**
 *
 */ 1 4 this 3 1717  
248 0 0 6 425 1546 0 0 10 /**
 *
 */ 1 4 this 3 1717  
249 0 0 6 426 1546 0 0 10 /**
 *
 */ 1 4 this 3 1717  
250 0 0 6 427 1546 0 0 10 /**
 *
 */ 1 4 this 3 1717  
251 0 0 6 428 1546 0 0 10 /**
 *
 */ 1 4 this 3 1717  
252 0 0 6 441 1546 0 0 10 /**
 *
 */ 1 4 this 3 1719  
253 0 0 7 442 1716 1022 0 10 /**
 *
 */ 2 4 this 3 1721  3 idx 1 1546  
254 0 0 6 439 1722 0 0 0 1 4 this 3 1721  
255 0 0 6 440 1721 0 0 0 2 4 this 3 1722  4 this 1 1722  
256 0 0 7 448 1604 0 0 10 /**
 *
 */ 1 4 name 1 1651  
257 0 0 4 449 1650 0 0 10 /**
 *
 */ 1 4 this 3 1604  
258 0 0 4 450 1650 0 0 10 /**
 *
 */ 2 4 this 3 1604  4 show 1 1552  
259 0 0 4 451 1650 0 0 10 /**
 *
 */ 2 4 this 3 1604  4 show 1 1552  
260 0 0 4 452 1650 0 0 10 /**
 *
 */ 2 4 this 3 1604  4 show 1 1552  
261 0 0 4 453 1650 0 0 10 /**
 *
 */ 2 4 this 3 1604  4 show 1 1552  
262 0 0 6 454 1552 0 0 10 /**
 *
 */ 1 4 this 3 1723  
263 0 0 6 455 1552 0 0 10 /**
 *
 */ 1 4 this 3 1723  
264 0 0 6 456 1552 0 0 10 /**
 *
 */ 1 4 this 3 1723  
265 0 0 6 457 1552 0 0 10 /**
 *
 */ 1 4 this 3 1723  
266 0 0 7 462 1654 0 0 0 0 
267 0 0 7 464 1605 0 0 10 /**
 *
 */ 1 4 name 1 1651  
268 0 0 6 465 1546 0 0 14 // Overlapping 1 4 this 3 1725  
269 0 0 7 466 1538 0 0 10 /**
 *
 */ 2 4 this 3 1725  3 idx 1 1546  
270 0 0 7 470 1654 0 0 0 0 
271 0 0 7 486 1729 1045 0 0 1 6 param0 0 1727  
272 0 0 7 473 1729 1045 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
273 0 0 7 474 1644 0 0 10 /**
 *
 */ 1 4 this 3 1727  
274 0 0 7 475 1645 0 0 10 /**
 *
 */ 1 4 this 3 1727  
275 0 0 7 476 1645 0 0 10 /**
 *
 */ 1 4 this 3 1727  
276 0 0 6 477 1544 0 0 10 /**
 *
 */ 1 4 this 3 1727  
277 0 0 6 478 1544 0 0 10 /**
 *
 */ 1 4 this 3 1727  
278 0 0 6 479 1546 0 0 10 /**
 *
 */ 1 4 this 3 1727  
279 0 0 7 488 1730 1098 0 10 /**
 *
 */ 1 4 this 3 1606  
280 0 0 7 489 1731 1153 0 10 /**
 *
 */ 1 4 this 3 1606  
281 0 0 4 490 1650 0 0 10 /**
 *
 */ 3 4 this 3 1606  8 distance 1 1546  8 material 1 1732  
282 0 0 4 491 1650 0 0 10 /**
 *
 */ 1 4 this 3 1606  
283 0 0 4 492 1650 0 0 24 // Mass, volume, density 2 4 this 3 1606  4 mass 1 1544  
284 0 0 4 493 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  7 density 1 1544  
285 0 0 4 494 1650 0 0 10 /**
 *
 */ 3 4 this 3 1606  4 mass 1 1544  9 fromfaces 1 1552  
286 0 0 4 495 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  7 density 1 1544  
287 0 0 4 496 1650 0 0 10 /**
 *
 */ 3 4 this 3 1606  4 node 1 1546  4 mass 1 1544  
288 0 0 6 497 1544 0 0 10 /**
 *
 */ 2 4 this 3 1733  4 node 1 1546  
289 0 0 6 498 1544 0 0 10 /**
 *
 */ 1 4 this 3 1733  
290 0 0 6 499 1544 0 0 10 /**
 *
 */ 1 4 this 3 1733  
291 0 0 4 500 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  5 force 1 1682  
292 0 0 4 500 1650 0 0 10 /**
 *
 */ 3 4 this 3 1606  5 force 1 1682  4 node 1 1546  
293 0 0 4 501 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  8 velocity 1 1682  
294 0 0 4 502 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  8 velocity 1 1682  
295 0 0 4 502 1650 0 0 10 /**
 *
 */ 3 4 this 3 1606  8 velocity 1 1682  4 node 1 1546  
296 0 0 4 503 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  8 velocity 1 1682  
297 0 0 7 504 1645 0 0 10 /**
 *
 */ 1 4 this 3 1733  
298 0 0 4 505 1650 0 0 10 /**
 *
 */ 3 4 this 3 1606  7 bvolume 1 1552  6 bframe 1 1552  
299 0 0 7 506 1735 0 0 10 /**
 *
 */ 1 4 this 3 1733  
300 0 0 4 507 1650 0 0 10 // Cluster 3 4 this 3 1606  1 k 1 1546  13 maxiterations 1 1546  
301 0 0 4 508 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  5 index 1 1546  
302 0 0 4 509 1650 0 0 10 /**
 *
 */ 1 4 this 3 1606  
303 0 0 6 510 1546 0 0 10 /**
 *
 */ 1 4 this 3 1733  
304 0 0 7 511 1671 0 0 10 /**
 *
 */ 2 4 this 3 1733  7 cluster 1 1546  
305 0 0 4 512 1650 0 0 12 // Rendering 2 4 this 3 1606  4 geom 1 1736  
306 0 0 4 513 1650 0 0 10 /**
 *
 */ 1 4 this 3 1606  
307 0 0 4 514 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  5 curve 1 1738  
308 0 0 4 515 1650 0 0 10 /**
 *
 */ 1 4 this 3 1606  
309 0 0 4 516 1650 0 0 10 /**
 *
 */ 2 4 this 3 1606  7 surface 1 1740  
310 0 0 4 517 1650 0 0 10 /**
 *
 */ 1 4 this 3 1606  
311 0 0 4 518 1650 0 0 10 /**
 *
 */ 5 4 this 3 1606  4 node 1 1546  4 body 1 1576  5 pivot 1 1682  7 disable 1 1552  
312 0 0 4 518 1650 0 0 10 // Anchors 4 4 this 3 1606  4 node 1 1546  4 body 1 1576  7 disable 1 1552  
313 0 0 4 519 1650 0 0 10 /**
 *
 */ 6 4 this 3 1606  4 body 1 1655  3 pos 1 1702  3 erp 1 1544  3 cfm 1 1544  5 split 1 1544  
314 0 0 4 519 1650 0 0 10 /**
 *
 */ 6 4 this 3 1606  4 body 1 1655  7 cluster 1 1546  3 erp 1 1544  3 cfm 1 1544  5 split 1 1544  
315 0 0 4 520 1650 0 0 10 /**
 *
 */ 7 4 this 3 1606  4 body 1 1655  4 axis 1 1682  3 erp 1 1544  3 cfm 1 1544  5 split 1 1544  7 control 1 1742  
316 0 0 6 521 1546 0 0 12 // Materials 1 4 this 3 1733  
317 0 0 7 522 1732 1166 0 10 /**
 *
 */ 2 4 this 3 1733  3 idx 1 1546  
318 0 0 7 524 1732 1166 0 10 /**
 *
 */ 1 4 this 3 1606  
319 0 0 6 525 1546 0 0 10 /**
 *
 */ 1 4 this 3 1733  
320 0 0 7 526 1729 1045 0 10 /**
 *
 */ 2 4 this 3 1733  3 idx 1 1546  
321 0 0 6 528 1546 0 0 212 /**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */ 3 4 this 3 1606  5 point 1 1671  5 local 1 1552  
322 0 0 7 529 1606 0 0 10 // Factory 5 4 info 1 1731  4 from 1 1702  2 to 1 1702  3 res 1 1546  6 fixeds 1 1546  
323 0 0 7 530 1606 0 0 10 /**
 *
 */ 9 4 info 1 1731  8 corner00 1 1702  8 corner10 1 1702  8 corner01 1 1702  8 corner11 1 1702  4 resx 1 1546  4 resy 1 1546  6 fixeds 1 1546  8 gendiags 1 1552  
324 0 0 7 531 1606 0 0 10 /**
 *
 */ 4 4 info 1 1731  6 center 1 1702  6 radius 1 1669  3 res 1 1546  
325 0 0 7 532 1606 0 0 10 /**
 *
 */ 3 4 info 1 1731  4 geom 1 1743  20 randomizeConstraints 1 1552  
326 0 0 7 532 1606 0 0 10 /**
 *
 */ 4 4 info 1 1731  6 points 1 1745  7 indices 1 1749  20 randomizeConstraints 1 1552  
327 0 0 7 533 1606 0 0 10 /**
 *
 */ 4 4 info 1 1731  6 points 1 1745  7 indices 1 1749  10 tetralinks 1 1552  
328 0 0 7 533 1606 0 0 10 /**
 *
 */ 4 4 info 1 1731  3 ele 1 1651  4 face 1 1651  4 node 1 1651  
329 0 0 7 659 1654 0 0 0 0 
330 0 0 7 617 1730 1098 0 0 1 6 param0 0 1752  
331 0 0 4 539 1650 0 0 10 /**
 *
 */ 1 4 this 3 1730  
332 0 0 4 540 1650 0 0 10 /**
 *
 */ 3 4 this 3 1730  4 flag 1 1592  5 value 1 1552  
333 0 0 6 541 1552 0 0 10 /**
 *
 */ 2 4 this 3 1752  4 flag 1 1592  
334 0 0 4 542 1650 0 0 10 /**
 *
 */ 2 4 this 3 1730  5 value 1 1593  
335 0 0 6 543 1593 0 0 10 /**
 *
 */ 1 4 this 3 1752  
336 0 0 4 544 1650 0 0 36 /**
 * Setter for property kVCF.
 */ 2 4 this 3 1730  5 value 1 1544  
337 0 0 4 545 1650 0 0 35 /**
 * Setter for property kDP.
 */ 2 4 this 3 1730  5 value 1 1544  
338 0 0 4 546 1650 0 0 35 /**
 * Setter for property kDG.
 */ 2 4 this 3 1730  5 value 1 1544  
339 0 0 4 547 1650 0 0 35 /**
 * Setter for property kLF.
 */ 2 4 this 3 1730  5 value 1 1544  
340 0 0 4 548 1650 0 0 35 /**
 * Setter for property kPR.
 */ 2 4 this 3 1730  5 value 1 1544  
341 0 0 4 549 1650 0 0 35 /**
 * Setter for property kVC.
 */ 2 4 this 3 1730  5 value 1 1544  
342 0 0 4 550 1650 0 0 35 /**
 * Setter for property kDF.
 */ 2 4 this 3 1730  5 value 1 1544  
343 0 0 4 551 1650 0 0 35 /**
 * Setter for property kMT.
 */ 2 4 this 3 1730  5 value 1 1544  
344 0 0 4 552 1650 0 0 36 /**
 * Setter for property kCHR.
 */ 2 4 this 3 1730  5 value 1 1544  
345 0 0 4 553 1650 0 0 36 /**
 * Setter for property kKHR.
 */ 2 4 this 3 1730  5 value 1 1544  
346 0 0 4 554 1650 0 0 36 /**
 * Setter for property kSHR.
 */ 2 4 this 3 1730  5 value 1 1544  
347 0 0 4 555 1650 0 0 36 /**
 * Setter for property kAHR.
 */ 2 4 this 3 1730  5 value 1 1544  
348 0 0 4 556 1650 0 0 40 /**
 * Setter for property kSRHR_CL.
 */ 2 4 this 3 1730  5 value 1 1544  
349 0 0 4 557 1650 0 0 40 /**
 * Setter for property kSKHR_CL.
 */ 2 4 this 3 1730  5 value 1 1544  
350 0 0 4 558 1650 0 0 40 /**
 * Setter for property kSSHR_CL.
 */ 2 4 this 3 1730  5 value 1 1544  
351 0 0 4 559 1650 0 0 43 /**
 * Setter for property kSR_SPLT_CL.
 */ 2 4 this 3 1730  5 value 1 1544  
352 0 0 4 560 1650 0 0 43 /**
 * Setter for property kSK_SPLT_CL.
 */ 2 4 this 3 1730  5 value 1 1544  
353 0 0 4 561 1650 0 0 43 /**
 * Setter for property kSS_SPLT_CL.
 */ 2 4 this 3 1730  5 value 1 1544  
354 0 0 4 562 1650 0 0 41 /**
 * Setter for property maxvolume.
 */ 2 4 this 3 1730  5 value 1 1544  
355 0 0 4 563 1650 0 0 41 /**
 * Setter for property timescale.
 */ 2 4 this 3 1730  5 value 1 1544  
356 0 0 4 564 1650 0 0 43 /**
 * Setter for property piterations.
 */ 2 4 this 3 1730  5 value 1 1546  
357 0 0 4 565 1650 0 0 43 /**
 * Setter for property viterations.
 */ 2 4 this 3 1730  5 value 1 1546  
358 0 0 4 566 1650 0 0 43 /**
 * Setter for property diterations.
 */ 2 4 this 3 1730  5 value 1 1546  
359 0 0 4 567 1650 0 0 43 /**
 * Setter for property citerations.
 */ 2 4 this 3 1730  5 value 1 1546  
360 0 0 6 568 1544 0 0 36 /**
 * Getter for property kVCF.
 */ 1 4 this 3 1752  
361 0 0 6 569 1544 0 0 35 /**
 * Getter for property kDP.
 */ 1 4 this 3 1752  
362 0 0 6 570 1544 0 0 35 /**
 * Getter for property kDG.
 */ 1 4 this 3 1752  
363 0 0 6 571 1544 0 0 35 /**
 * Getter for property kLF.
 */ 1 4 this 3 1752  
364 0 0 6 572 1544 0 0 35 /**
 * Getter for property kPR.
 */ 1 4 this 3 1752  
365 0 0 6 573 1544 0 0 35 /**
 * Getter for property kVC.
 */ 1 4 this 3 1752  
366 0 0 6 574 1544 0 0 35 /**
 * Getter for property kDF.
 */ 1 4 this 3 1752  
367 0 0 6 575 1544 0 0 35 /**
 * Getter for property kMT.
 */ 1 4 this 3 1752  
368 0 0 6 576 1544 0 0 36 /**
 * Getter for property kCHR.
 */ 1 4 this 3 1752  
369 0 0 6 577 1544 0 0 36 /**
 * Getter for property kKHR.
 */ 1 4 this 3 1752  
370 0 0 6 578 1544 0 0 36 /**
 * Getter for property kSHR.
 */ 1 4 this 3 1752  
371 0 0 6 579 1544 0 0 36 /**
 * Getter for property kAHR.
 */ 1 4 this 3 1752  
372 0 0 6 580 1544 0 0 40 /**
 * Getter for property kSRHR_CL.
 */ 1 4 this 3 1752  
373 0 0 6 581 1544 0 0 40 /**
 * Getter for property kSKHR_CL.
 */ 1 4 this 3 1752  
374 0 0 6 582 1544 0 0 40 /**
 * Getter for property kSSHR_CL.
 */ 1 4 this 3 1752  
375 0 0 6 583 1544 0 0 43 /**
 * Getter for property kSR_SPLT_CL.
 */ 1 4 this 3 1752  
376 0 0 6 584 1544 0 0 43 /**
 * Getter for property kSK_SPLT_CL.
 */ 1 4 this 3 1752  
377 0 0 6 585 1544 0 0 43 /**
 * Getter for property kSS_SPLT_CL.
 */ 1 4 this 3 1752  
378 0 0 6 586 1544 0 0 41 /**
 * Getter for property maxvolume.
 */ 1 4 this 3 1752  
379 0 0 6 587 1544 0 0 41 /**
 * Getter for property timescale.
 */ 1 4 this 3 1752  
380 0 0 6 588 1546 0 0 43 /**
 * Getter for property piterations.
 */ 1 4 this 3 1752  
381 0 0 6 589 1546 0 0 43 /**
 * Getter for property viterations.
 */ 1 4 this 3 1752  
382 0 0 6 590 1546 0 0 43 /**
 * Getter for property diterations.
 */ 1 4 this 3 1752  
383 0 0 6 591 1546 0 0 43 /**
 * Getter for property citerations.
 */ 1 4 this 3 1752  
384 0 0 7 637 1731 1153 0 0 1 6 param0 0 1754  
385 0 0 4 621 1650 0 0 10 /**
 *
 */ 2 4 this 3 1731  7 density 1 1544  
386 0 0 4 622 1650 0 0 10 /**
 *
 */ 2 4 this 3 1731  7 density 1 1544  
387 0 0 4 623 1650 0 0 10 /**
 *
 */ 2 4 this 3 1731  6 offset 1 1544  
388 0 0 4 624 1650 0 0 10 /**
 *
 */ 2 4 this 3 1731  6 normal 1 1682  
389 0 0 4 625 1650 0 0 10 /**
 *
 */ 2 4 this 3 1731  7 gravity 1 1682  
390 0 0 6 626 1544 0 0 10 /**
 *
 */ 1 4 this 3 1754  
391 0 0 6 627 1544 0 0 10 /**
 *
 */ 1 4 this 3 1754  
392 0 0 6 628 1544 0 0 10 /**
 *
 */ 1 4 this 3 1754  
393 0 0 7 629 1645 0 0 10 /**
 *
 */ 1 4 this 3 1754  
394 0 0 7 630 1645 0 0 10 /**
 *
 */ 1 4 this 3 1754  
395 0 0 4 631 1650 0 0 10 /**
 *
 */ 2 4 this 3 1731  8 lifetime 1 1546  
396 0 0 7 655 1732 1166 0 0 1 6 param0 0 1756  
397 0 0 7 645 1732 1166 0 102 /**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */ 0 
398 0 0 6 646 1544 0 0 42 /**
 * Getter for the property m_kLST.
 */ 1 4 this 3 1756  
399 0 0 4 647 1650 0 0 42 /**
 * Setter for the property m_kLST.
 */ 2 4 this 3 1732  5 value 1 1544  
400 0 0 6 648 1544 0 0 42 /**
 * Getter for the property m_kAST.
 */ 1 4 this 3 1756  
401 0 0 4 649 1650 0 0 42 /**
 * Setter for the property m_kAST.
 */ 2 4 this 3 1732  5 value 1 1544  
402 0 0 6 650 1544 0 0 42 /**
 * Getter for the property m_kVST.
 */ 1 4 this 3 1756  
403 0 0 4 651 1650 0 0 42 /**
 * Setter for the property m_kVST.
 */ 2 4 this 3 1732  5 value 1 1544  
404 0 0 4 661 1650 0 0 10 /**
 *
 */ 2 4 this 3 1758  5 value 1 1544  
405 0 0 4 662 1650 0 0 10 /**
 *
 */ 2 4 this 3 1758  5 value 1 1544  
406 0 0 4 663 1650 0 0 10 /**
 *
 */ 2 4 this 3 1758  5 value 1 1544  
407 0 0 4 664 1650 0 0 10 /**
 *
 */ 2 4 this 3 1758  5 value 1 1544  
408 0 0 4 665 1650 0 0 10 /**
 *
 */ 2 4 this 3 1758  5 value 1 1544  
409 0 0 4 666 1650 0 0 10 /**
 *
 */ 2 4 this 3 1758  5 value 1 1544  
410 0 0 6 667 1544 0 0 10 /**
 *
 */ 1 4 this 3 1759  
411 0 0 6 668 1544 0 0 10 /**
 *
 */ 1 4 this 3 1759  
412 0 0 6 669 1544 0 0 10 /**
 *
 */ 1 4 this 3 1759  
413 0 0 6 670 1544 0 0 10 /**
 *
 */ 1 4 this 3 1759  
414 0 0 6 671 1544 0 0 10 /**
 *
 */ 1 4 this 3 1759  
415 0 0 6 672 1544 0 0 10 /**
 *
 */ 1 4 this 3 1759  
416 0 0 7 680 1608 0 0 94 /**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */ 2 5 world 1 1761  7 chassis 1 1576  
417 0 0 4 681 1650 0 0 100 /**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */ 2 4 this 3 1608  2 up 1 1536  
418 0 0 4 682 1650 0 0 76 /**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */ 3 4 this 3 1608  8 steering 1 1544  3 idx 1 1546  
419 0 0 4 683 1650 0 0 61 /**
 * Applies braking force to the wheel with index idx.
 */ 3 4 this 3 1608  5 brake 1 1544  3 idx 1 1546  
420 0 0 4 684 1650 0 0 10 /**
 *
 */ 2 4 this 3 1608  5 pitch 1 1544  
421 0 0 7 685 1576 0 0 82 /**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */ 1 4 this 3 1608  
422 0 0 6 686 1544 0 0 106 /**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */ 1 4 this 3 1762  
423 0 0 6 687 1544 0 0 77 /**
 * Returns the steering angle of the wheel with index idx in degrees.
 */ 2 4 this 3 1762  3 idx 1 1546  
424 0 0 7 688 1645 0 0 145 /**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */ 1 4 this 3 1762  
425 0 0 4 689 1650 0 0 43 /**
 * Resets the vehicle's suspension.
 */ 1 4 this 3 1608  
426 0 0 4 690 1650 0 0 70 /**
 * Applies force at the wheel with index idx for acceleration.
 */ 3 4 this 3 1608  5 force 1 1544  3 idx 1 1546  
427 0 0 7 691 1764 1205 0 72 /**
 * Factory method for creating wheels for this vehicle instance.
 */ 1 4 this 3 1608  
428 0 0 6 692 1546 0 0 57 /**
 * Returns the number of wheels this vehicle has.
 */ 1 4 this 3 1762  
429 0 0 7 693 1764 1205 0 132 /**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */ 2 4 this 3 1762  3 idx 1 1546  
430 0 0 6 695 1758 0 0 189 /**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */ 1 4 this 3 1608  
431 0 0 7 797 1654 0 0 0 0 
432 0 0 7 794 1764 1205 0 0 1 6 param0 0 1765  
433 0 0 4 702 1650 0 0 50 /**
 * Sets how stiff the suspension shall be.
 */ 2 4 this 3 1764  5 value 1 1544  
434 0 0 4 703 1650 0 0 109 /**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */ 2 4 this 3 1764  5 value 1 1544  
435 0 0 4 704 1650 0 0 45 /**
 * Sets the slipperyness of the tyre.
 */ 2 4 this 3 1764  5 value 1 1544  
436 0 0 4 705 1650 0 0 66 /**
 * Sets the maximum suspension force the wheel can handle.
 */ 2 4 this 3 1764  5 value 1 1544  
437 0 0 4 706 1650 0 0 79 /**
 * Sets the damping forces applied when the suspension gets compressed.
 */ 2 4 this 3 1764  5 value 1 1544  
438 0 0 4 707 1650 0 0 71 /**
 * Sets the damping forces applied when the suspension relaxes.
 */ 2 4 this 3 1764  5 value 1 1544  
439 0 0 4 708 1650 0 0 249 /**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */ 2 4 this 3 1764  5 value 1 1544  
440 0 0 4 709 1650 0 0 33 /**
 * Sets the wheel radius.
 */ 2 4 this 3 1764  5 value 1 1544  
441 0 0 4 710 1650 0 0 35 /**
 * Sets the steering angle.
 */ 2 4 this 3 1764  5 value 1 1544  
442 0 0 4 711 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
443 0 0 4 712 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
444 0 0 4 713 1650 0 0 69 /**
 * Defines how much force should be used to rotate the wheel.
 */ 2 4 this 3 1764  5 value 1 1544  
445 0 0 4 714 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
446 0 0 4 715 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
447 0 0 4 716 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
448 0 0 4 717 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
449 0 0 4 718 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  5 value 1 1544  
450 0 0 4 719 1650 0 0 70 /**
 * Sets the point where the wheel is connected to the chassis.
 */ 2 4 this 3 1764  3 pos 1 1702  
451 0 0 4 720 1650 0 0 92 /**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */ 2 4 this 3 1764  3 dir 1 1682  
452 0 0 4 721 1650 0 0 51 /**
 * Determines the wheel axle normal vector.
 */ 2 4 this 3 1764  4 axle 1 1682  
453 0 0 4 722 1650 0 0 10 /**
 *
 */ 2 4 this 3 1764  3 mat 1 1767  
454 0 0 4 723 1650 0 0 42 /**
 * Sets if the wheel is steerable.
 */ 2 4 this 3 1764  5 value 1 1552  
455 0 0 4 724 1650 0 0 86 /**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */ 2 4 this 3 1764  4 node 1 1538  
456 0 0 6 725 1544 0 0 83 /**
 * Returns the length of the suspension when the vehicle is standing still.
 */ 1 4 this 3 1765  
457 0 0 6 726 1544 0 0 51 /**
 * Returns the stiffness of the suspension.
 */ 1 4 this 3 1765  
458 0 0 6 727 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
459 0 0 6 728 1544 0 0 46 /**
 * Returns how slippery the tyres are.
 */ 1 4 this 3 1765  
460 0 0 6 729 1544 0 0 72 /**
 * Returns the maximum force (weight) the suspension can handle.
 */ 1 4 this 3 1765  
461 0 0 6 730 1544 0 0 70 /**
 * Returns the  damping applied to the compressing suspension.
 */ 1 4 this 3 1765  
462 0 0 6 731 1544 0 0 66 /**
 * Returns the damping applied to the relaxing suspension.
 */ 1 4 this 3 1765  
463 0 0 6 732 1544 0 0 90 /**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */ 1 4 this 3 1765  
464 0 0 6 733 1544 0 0 36 /**
 * Returns the wheel radius.
 */ 1 4 this 3 1765  
465 0 0 6 734 1544 0 0 49 /**
 * Returns the steering angle in degrees.
 */ 1 4 this 3 1765  
466 0 0 6 735 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
467 0 0 6 736 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
468 0 0 6 737 1544 0 0 71 /**
 * Returns the amount of accelleration force currently applied.
 */ 1 4 this 3 1765  
469 0 0 6 738 1544 0 0 65 /**
 * Returns the amount of braking force currently applied.
 */ 1 4 this 3 1765  
470 0 0 6 739 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
471 0 0 6 740 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
472 0 0 6 741 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
473 0 0 6 742 1544 0 0 10 /**
 *
 */ 1 4 this 3 1765  
474 0 0 7 743 1644 0 0 73 /**
 * Returns the point where the wheel is connected to the chassis.
 */ 1 4 this 3 1765  
475 0 0 7 744 1645 0 0 70 /**
 * Returns the wheel's forward vector relative to the chassis.
 */ 1 4 this 3 1765  
476 0 0 7 745 1645 0 0 55 /**
 * Returns the normal vector of the wheel axle.
 */ 1 4 this 3 1765  
477 0 0 7 746 1661 0 0 10 /**
 *
 */ 1 4 this 3 1765  
478 0 0 6 747 1552 0 0 46 /**
 * Determines if a wheel is steerable.
 */ 1 4 this 3 1765  
479 0 0 7 748 1538 0 0 142 /**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */ 1 4 this 3 1765  
480 0 0 7 749 1769 1254 0 10 /**
 *
 */ 1 4 this 3 1765  
481 0 0 7 769 1769 1254 0 0 1 6 param0 0 1770  
482 0 0 6 753 1552 0 0 10 /**
 *
 */ 1 4 this 3 1770  
483 0 0 6 754 1544 0 0 10 /**
 *
 */ 1 4 this 3 1770  
484 0 0 7 755 1645 0 0 10 /**
 *
 */ 1 4 this 3 1770  
485 0 0 7 756 1645 0 0 10 /**
 *
 */ 1 4 this 3 1770  
486 0 0 7 757 1645 0 0 10 /**
 *
 */ 1 4 this 3 1770  
487 0 0 7 758 1644 0 0 10 /**
 *
 */ 1 4 this 3 1770  
488 0 0 7 759 1644 0 0 10 /**
 *
 */ 1 4 this 3 1770  
489 0 0 7 760 1538 0 0 10 /**
 *
 */ 1 4 this 3 1770  
490 0 0 7 799 1761 0 0 10 /**
 *
 */ 0 
491 0 0 4 800 1650 0 0 10 /**
 *
 */ 2 4 this 3 1761  7 gravity 1 1682  
492 0 0 4 800 1650 0 0 10 /**
 *
 */ 4 4 this 3 1761  2 gx 1 1544  2 gy 1 1544  2 gz 1 1544  
493 0 0 7 801 1682 0 0 10 /**
 *
 */ 1 4 this 3 1772  
494 0 0 6 802 1546 0 0 10 /**
 *
 */ 4 4 this 3 1761  2 dt 1 1544  12 max_substeps 1 1546  8 stepsize 1 1544  
495 0 0 7 803 1731 1153 0 10 /**
 *
 */ 1 4 this 3 1761  
496 0 0 4 804 1650 0 0 10 /**
 *
 */ 2 4 this 3 1761  4 node 1 1604  
497 0 0 4 805 1650 0 0 75 /**
 * Removes a debug node that has been assigned to this BulletWorld.
 */ 1 4 this 3 1761  
498 0 0 7 806 1604 0 0 10 /**
 *
 */ 1 4 this 3 1772  
499 0 0 6 807 1552 0 0 10 /**
 *
 */ 1 4 this 3 1772  
500 0 0 4 808 1650 0 0 15 // AttachRemove 2 4 this 3 1761  6 object 1 1774  
501 0 0 4 809 1650 0 0 156 /**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */ 3 4 this 3 1761  10 constraint 1 1609  16 linked_collision 1 1552  
502 0 0 4 810 1650 0 0 10 /**
 *
 */ 2 4 this 3 1761  6 object 1 1774  
503 0 0 6 811 1546 0 0 15 // Ghost object 1 4 this 3 1772  
504 0 0 7 812 1605 0 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
505 0 0 6 814 1546 0 0 13 // Rigid body 1 4 this 3 1772  
506 0 0 7 815 1576 0 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
507 0 0 6 817 1546 0 0 12 // Soft body 1 4 this 3 1772  
508 0 0 7 818 1606 0 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
509 0 0 6 820 1546 0 0 23 // Character controller 1 4 this 3 1772  
510 0 0 7 821 1607 799 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
511 0 0 4 823 1650 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1761  7 vehicle 1 1608  
512 0 0 4 824 1650 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1761  7 vehicle 1 1608  
513 0 0 6 825 1546 0 0 10 /**
 *
 */ 1 4 this 3 1772  
514 0 0 7 826 1608 0 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
515 0 0 6 828 1546 0 0 13 // Constraint 1 4 this 3 1772  
516 0 0 7 829 1609 0 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
517 0 0 7 831 1688 888 0 28 // Raycast and other queries 4 4 this 3 1772  8 from_pos 1 1702  6 to_pos 1 1702  4 mask 1 1776  
518 0 0 7 832 1646 785 0 10 /**
 *
 */ 4 4 this 3 1772  8 from_pos 1 1702  6 to_pos 1 1702  4 mask 1 1776  
519 0 0 7 833 1692 900 0 10 /**
 *
 */ 6 4 this 3 1772  5 shape 1 1559  7 from_ts 1 1656  5 to_ts 1 1656  4 mask 1 1776  11 penetration 1 1544  
520 0 0 7 834 1721 1028 0 386 /**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */ 3 4 this 3 1772  4 node 1 1538  10 use_filter 1 1552  
521 0 0 7 835 1721 1028 0 181 /**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */ 3 4 this 3 1772  5 node0 1 1538  5 node1 1 1538  
522 0 0 6 836 1552 0 0 105 /**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */ 3 4 this 3 1772  5 node0 1 1538  5 node1 1 1538  
523 0 0 6 837 1546 0 0 12 // Manifolds 1 4 this 3 1772  
524 0 0 6 838 1610 0 0 10 /**
 *
 */ 2 4 this 3 1772  3 idx 1 1546  
525 0 0 4 840 1650 0 0 22 // Collision filtering 4 4 this 3 1761  6 group1 1 1778  6 group2 1 1778  6 enable 1 1552  
526 0 0 6 841 1552 0 0 10 /**
 *
 */ 3 4 this 3 1772  6 group1 1 1778  6 group2 1 1778  
527 0 0 4 842 1650 0 0 12 // Callbacks 2 4 this 3 1761  3 obj 1 1779  
528 0 0 4 843 1650 0 0 10 /**
 *
 */ 1 4 this 3 1761  
529 0 0 4 844 1650 0 0 10 /**
 *
 */ 3 4 this 3 1761  3 obj 1 1779  10 is_pretick 1 1552  
530 0 0 4 845 1650 0 0 10 /**
 *
 */ 1 4 this 3 1761  
531 0 0 4 846 1650 0 0 10 /**
 *
 */ 2 4 this 3 1761  3 obj 1 1779  
532 0 0 4 847 1650 0 0 10 /**
 *
 */ 1 4 this 3 1761  
533 0 0 4 892 1650 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1761  4 node 1 1605  
534 0 0 4 893 1650 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1761  4 node 1 1605  
535 0 0 4 894 1650 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1761  4 node 1 1576  
536 0 0 4 895 1650 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1761  4 node 1 1576  
537 0 0 4 896 1650 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1761  4 node 1 1606  
538 0 0 4 897 1650 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1761  4 node 1 1606  
539 0 0 4 898 1650 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1761  4 node 1 1607  
540 0 0 4 899 1650 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1761  4 node 1 1607  
541 0 0 4 900 1650 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1761  10 constraint 1 1609  
542 0 0 7 901 1654 0 0 0 0 
543 0 0 7 890 1610 1315 0 0 1 6 param0 0 1781  
544 0 0 7 875 1538 0 0 10 /**
 *
 */ 1 4 this 3 1610  
545 0 0 7 876 1538 0 0 10 /**
 *
 */ 1 4 this 3 1610  
546 0 0 6 877 1546 0 0 10 /**
 *
 */ 1 4 this 3 1781  
547 0 0 6 878 1612 0 0 10 /**
 *
 */ 2 4 this 3 1781  3 idx 1 1546  
548 0 0 6 880 1544 0 0 10 /**
 *
 */ 1 4 this 3 1781  
549 0 0 6 881 1544 0 0 10 /**
 *
 */ 1 4 this 3 1781  
550 0 0 4 882 1650 0 0 10 /**
 *
 */ 1 4 this 3 1610  
551 0 0 7 903 1783 0 0 10 /**
 *
 */ 0 
552 0 0 7 903 1783 0 0 10 /**
 *
 */ 1 4 copy 1 1784  
553 0 0 7 904 1783 0 0 0 2 4 this 3 1783  4 copy 1 1784  
554 0 0 4 905 1650 0 0 10 /**
 *
 */ 2 4 this 3 1783  1 p 1 1702  
555 0 0 4 906 1650 0 0 10 /**
 *
 */ 2 4 this 3 1783  6 points 1 1786  
556 0 0 4 907 1650 0 0 10 /**
 *
 */ 3 4 this 3 1783  4 geom 1 1743  2 ts 1 1656  
557 0 0 7 908 1654 0 0 0 0 
558 0 0 7 910 1790 0 0 10 /**
 *
 */ 1 4 copy 1 1788  
559 0 0 7 910 1790 0 0 10 /**
 *
 */ 2 4 geom 1 1743  5 scale 1 1671  
560 0 0 7 910 1790 0 0 10 /**
 *
 */ 2 6 points 1 1786  5 scale 1 1671  
561 0 0 7 911 1790 0 0 0 2 4 this 3 1790  4 copy 1 1788  
562 0 0 6 912 1546 0 0 10 /**
 *
 */ 1 4 this 3 1788  
563 0 0 7 914 1654 0 0 0 0 
564 0 0 7 916 1793 0 0 10 /**
 *
 */ 1 4 copy 1 1791  
565 0 0 7 916 1793 0 0 10 /**
 *
 */ 2 12 half_extents 1 1682  2 up 1 1536  
566 0 0 7 916 1793 0 0 10 /**
 *
 */ 3 6 radius 1 1544  6 height 1 1544  2 up 1 1536  
567 0 0 7 917 1793 0 0 0 2 4 this 3 1793  4 copy 1 1791  
568 0 0 6 918 1544 0 0 10 /**
 *
 */ 1 4 this 3 1791  
569 0 0 7 919 1671 0 0 10 /**
 *
 */ 1 4 this 3 1791  
570 0 0 7 920 1671 0 0 10 /**
 *
 */ 1 4 this 3 1791  
571 0 0 7 924 1654 0 0 0 0 
572 0 0 7 926 1794 1358 0 10 /**
 *
 */ 2 5 node0 1 1538  5 node1 1 1538  
573 0 0 7 927 1538 0 0 10 /**
 *
 */ 1 4 this 3 1795  
574 0 0 7 928 1538 0 0 10 /**
 *
 */ 1 4 this 3 1795  
575 0 0 4 929 1650 0 0 10 /**
 *
 */ 2 4 this 3 1794  7 collide 1 1552  
576 0 0 6 930 1552 0 0 10 /**
 *
 */ 1 4 this 3 1795  
577 0 0 7 934 1654 0 0 0 0 
578 0 0 7 937 1799 1360 0 10 /**
 *
 */ 1 4 copy 1 1797  
579 0 0 4 939 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  6 enable 1 1552  
580 0 0 4 940 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  5 limit 1 1544  
581 0 0 4 941 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  5 limit 1 1544  
582 0 0 4 942 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  8 velocity 1 1544  
583 0 0 4 943 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  5 force 1 1544  
584 0 0 4 944 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  5 force 1 1544  
585 0 0 4 945 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  7 damping 1 1544  
586 0 0 4 946 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  8 softness 1 1544  
587 0 0 4 947 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  6 bounce 1 1544  
588 0 0 4 948 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  3 cfm 1 1544  
589 0 0 4 949 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  3 cfm 1 1544  
590 0 0 4 950 1650 0 0 10 /**
 *
 */ 2 4 this 3 1799  3 erp 1 1544  
591 0 0 6 951 1552 0 0 10 /**
 *
 */ 1 4 this 3 1797  
592 0 0 6 952 1552 0 0 10 /**
 *
 */ 1 4 this 3 1797  
593 0 0 6 953 1546 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 1 4 this 3 1797  
594 0 0 6 954 1544 0 0 10 /**
 *
 */ 1 4 this 3 1797  
595 0 0 6 955 1544 0 0 10 /**
 *
 */ 1 4 this 3 1797  
596 0 0 6 956 1544 0 0 10 /**
 *
 */ 1 4 this 3 1797  
597 0 0 7 964 1802 1380 0 10 /**
 *
 */ 1 4 copy 1 1800  
598 0 0 4 966 1650 0 0 10 /**
 *
 */ 3 4 this 3 1802  4 axis 1 1546  6 enable 1 1552  
599 0 0 4 967 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  5 limit 1 1669  
600 0 0 4 968 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  5 limit 1 1669  
601 0 0 4 969 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  8 velocity 1 1669  
602 0 0 4 970 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  5 force 1 1669  
603 0 0 4 971 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  7 damping 1 1544  
604 0 0 4 972 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  8 softness 1 1544  
605 0 0 4 973 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  11 restitution 1 1544  
606 0 0 4 974 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  3 cfm 1 1669  
607 0 0 4 975 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  3 erp 1 1669  
608 0 0 4 976 1650 0 0 10 /**
 *
 */ 2 4 this 3 1802  3 cfm 1 1669  
609 0 0 6 977 1552 0 0 10 /**
 *
 */ 2 4 this 3 1800  4 axis 1 1546  
610 0 0 6 978 1552 0 0 10 /**
 *
 */ 2 4 this 3 1800  4 axis 1 1546  
611 0 0 6 979 1546 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 2 4 this 3 1800  4 axis 1 1546  
612 0 0 7 980 1645 0 0 10 /**
 *
 */ 1 4 this 3 1800  
613 0 0 7 981 1644 0 0 10 /**
 *
 */ 1 4 this 3 1800  
614 0 0 7 982 1645 0 0 10 /**
 *
 */ 1 4 this 3 1800  
615 0 0 7 987 1803 0 0 10 /**
 *
 */ 5 6 node_a 1 1699  6 node_b 1 1699  7 frame_a 1 1656  7 frame_b 1 1656  11 use_frame_a 1 1552  
616 0 0 7 987 1803 0 0 10 /**
 *
 */ 3 6 node_a 1 1699  7 frame_a 1 1656  11 use_frame_a 1 1552  
617 0 0 7 988 1645 0 0 11 // Geometry 2 4 this 3 1804  4 axis 1 1546  
618 0 0 6 989 1544 0 0 10 /**
 *
 */ 2 4 this 3 1804  4 axis 1 1546  
619 0 0 6 990 1544 0 0 10 /**
 *
 */ 2 4 this 3 1804  4 axis 1 1546  
620 0 0 4 991 1650 0 0 10 /**
 *
 */ 4 4 this 3 1803  4 axis 1 1546  3 low 1 1544  4 high 1 1544  
621 0 0 4 992 1650 0 0 10 /**
 *
 */ 4 4 this 3 1803  4 axis 1 1546  3 low 1 1544  4 high 1 1544  
622 0 0 7 993 1799 1360 0 9 // Motors 2 4 this 3 1803  4 axis 1 1546  
623 0 0 7 994 1802 1380 0 10 /**
 *
 */ 1 4 this 3 1803  
624 0 0 4 995 1650 0 0 9 // Frames 3 4 this 3 1803  4 ts_a 1 1656  4 ts_b 1 1656  
625 0 0 7 996 1656 0 0 10 /**
 *
 */ 1 4 this 3 1804  
626 0 0 7 997 1656 0 0 10 /**
 *
 */ 1 4 this 3 1804  
627 0 0 7 1001 1654 0 0 0 0 
628 0 0 7 1003 1808 0 0 10 /**
 *
 */ 1 4 copy 1 1806  
629 0 0 7 1003 1808 0 0 215 /**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */ 3 5 image 1 1809  10 max_height 1 1544  2 up 1 1536  
630 0 0 7 1003 1808 0 0 311 /**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */ 3 3 tex 1 1812  10 max_height 1 1544  2 up 1 1536  
631 0 0 7 1004 1808 0 0 0 2 4 this 3 1808  4 copy 1 1806  
632 0 0 4 1005 1650 0 0 10 /**
 *
 */ 2 4 this 3 1808  4 flag 1 1552  
633 0 0 7 1006 1654 0 0 0 0 
634 0 0 7 1019 1814 1423 0 0 0 
635 0 0 7 1019 1814 1423 0 0 1 6 param0 0 1815  
636 0 0 7 1008 1820 0 0 19 // Collision shapes 2 2 np 1 1818  5 clear 1 1552  
637 0 0 7 1009 1822 0 0 17 // Internal names 0 
638 0 0 7 1010 1822 0 0 10 /**
 *
 */ 0 
639 0 0 7 1011 1825 0 0 19 // Geom vertex data 1 6 format 1 1825  
640 0 0 7 1012 1825 0 0 10 /**
 *
 */ 1 6 format 1 1825  
641 0 0 7 1013 1736 0 0 13 // Geom utils 3 4 node 1 1606  6 format 1 1825  9 two_sided 1 1552  
642 0 0 7 1014 1736 0 0 10 /**
 *
 */ 2 4 node 1 1606  6 format 1 1825  
643 0 0 4 1015 1650 0 0 10 /**
 *
 */ 3 4 geom 1 1736  4 resx 1 1546  4 resy 1 1546  
644 0 0 7 1022 1826 0 0 342 /**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */ 7 6 node_a 1 1699  6 node_b 1 1699  7 pivot_a 1 1702  7 pivot_b 1 1702  6 axis_a 1 1682  6 axis_b 1 1682  11 use_frame_a 1 1552  
645 0 0 7 1022 1826 0 0 73 /**
 * Constructs a hinge constraint which connects two rigid bodies.
 */ 5 6 node_a 1 1699  6 node_b 1 1699  4 ts_a 1 1656  4 ts_b 1 1656  11 use_frame_a 1 1552  
646 0 0 7 1022 1826 0 0 182 /**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */ 4 6 node_a 1 1699  7 pivot_a 1 1702  6 axis_a 1 1682  11 use_frame_a 1 1552  
647 0 0 7 1022 1826 0 0 106 /**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */ 3 6 node_a 1 1699  4 ts_a 1 1656  11 use_frame_a 1 1552  
648 0 0 6 1023 1544 0 0 66 /**
 * Returns the angle between node_a and node_b in degrees.
 */ 1 4 this 3 1826  
649 0 0 6 1024 1544 0 0 54 /**
 * Returns the lower angular limit in degrees.
 */ 1 4 this 3 1827  
650 0 0 6 1025 1544 0 0 54 /**
 * Returns the upper angular limit in degrees.
 */ 1 4 this 3 1827  
651 0 0 6 1026 1552 0 0 10 /**
 *
 */ 1 4 this 3 1827  
652 0 0 4 1027 1650 0 0 10 /**
 *
 */ 2 4 this 3 1826  5 value 1 1552  
653 0 0 4 1028 1650 0 0 65 /**
 * Sets the lower and upper rotational limits in degrees.
 */ 6 4 this 3 1826  3 low 1 1544  4 high 1 1544  8 softness 1 1544  4 bias 1 1544  10 relaxation 1 1544  
654 0 0 4 1029 1650 0 0 63 /**
 * Sets the hinge's rotation axis in world coordinates.
 */ 2 4 this 3 1826  4 axis 1 1682  
655 0 0 4 1030 1650 0 0 261 /**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */ 4 4 this 3 1826  6 enable 1 1552  15 target_velocity 1 1544  11 max_impulse 1 1544  
656 0 0 4 1031 1650 0 0 10 /**
 *
 */ 2 4 this 3 1826  6 enable 1 1552  
657 0 0 4 1032 1650 0 0 96 /**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */ 2 4 this 3 1826  11 max_impulse 1 1544  
658 0 0 4 1033 1650 0 0 10 /**
 *
 */ 3 4 this 3 1826  4 quat 1 1707  2 dt 1 1544  
659 0 0 4 1033 1650 0 0 10 /**
 *
 */ 3 4 this 3 1826  12 target_angle 1 1544  2 dt 1 1544  
660 0 0 4 1034 1650 0 0 10 /**
 *
 */ 3 4 this 3 1826  4 ts_a 1 1656  4 ts_b 1 1656  
661 0 0 7 1035 1656 0 0 10 /**
 *
 */ 1 4 this 3 1827  
662 0 0 7 1036 1656 0 0 10 /**
 *
 */ 1 4 this 3 1827  
663 0 0 7 1043 1654 0 0 0 0 
664 0 0 7 1045 1831 0 0 10 /**
 *
 */ 1 4 copy 1 1829  
665 0 0 7 1045 1831 0 0 10 /**
 *
 */ 2 7 shape_a 1 1625  7 shape_b 1 1625  
666 0 0 7 1046 1831 0 0 0 2 4 this 3 1831  4 copy 1 1829  
667 0 0 4 1047 1650 0 0 10 /**
 *
 */ 2 4 this 3 1831  2 ts 1 1656  
668 0 0 4 1048 1650 0 0 10 /**
 *
 */ 2 4 this 3 1831  2 ts 1 1656  
669 0 0 7 1049 1656 0 0 10 /**
 *
 */ 1 4 this 3 1829  
670 0 0 7 1050 1656 0 0 10 /**
 *
 */ 1 4 this 3 1829  
671 0 0 7 1051 1625 0 0 10 /**
 *
 */ 1 4 this 3 1829  
672 0 0 7 1052 1625 0 0 10 /**
 *
 */ 1 4 this 3 1829  
673 0 0 6 1053 1544 0 0 10 /**
 *
 */ 1 4 this 3 1829  
674 0 0 7 1061 1654 0 0 0 0 
675 0 0 7 1063 1834 0 0 10 /**
 *
 */ 1 4 copy 1 1832  
676 0 0 7 1063 1834 0 0 10 /**
 *
 */ 2 6 points 1 1786  5 radii 1 1835  
677 0 0 7 1064 1834 0 0 0 2 4 this 3 1834  4 copy 1 1832  
678 0 0 6 1065 1546 0 0 10 /**
 *
 */ 1 4 this 3 1832  
679 0 0 7 1066 1644 0 0 10 /**
 *
 */ 2 4 this 3 1832  5 index 1 1546  
680 0 0 6 1067 1544 0 0 10 /**
 *
 */ 2 4 this 3 1832  5 index 1 1546  
681 0 0 7 1073 1654 0 0 0 0 
682 0 0 7 1075 1842 0 0 10 /**
 *
 */ 1 4 copy 1 1840  
683 0 0 7 1075 1842 0 0 10 /**
 *
 */ 2 6 normal 1 1682  8 constant 1 1544  
684 0 0 7 1076 1842 0 0 0 2 4 this 3 1842  4 copy 1 1840  
685 0 0 7 1077 1645 0 0 10 /**
 *
 */ 1 4 this 3 1840  
686 0 0 6 1078 1544 0 0 10 /**
 *
 */ 1 4 this 3 1840  
687 0 0 7 1079 1842 0 0 10 /**
 *
 */ 1 5 solid 1 1843  
688 0 0 7 1082 1654 0 0 0 0 
689 0 0 7 1084 1846 0 0 10 /**
 *
 */ 5 6 node_a 1 1699  6 node_b 1 1699  7 frame_a 1 1656  7 frame_b 1 1656  11 use_frame_a 1 1552  
690 0 0 7 1084 1846 0 0 10 /**
 *
 */ 3 6 node_a 1 1699  7 frame_a 1 1656  10 useFrame_a 1 1552  
691 0 0 6 1085 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
692 0 0 6 1086 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
693 0 0 6 1087 1544 0 0 9 // Limits 1 4 this 3 1847  
694 0 0 6 1088 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
695 0 0 6 1089 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
696 0 0 6 1090 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
697 0 0 4 1091 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  5 value 1 1544  
698 0 0 4 1092 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  5 value 1 1544  
699 0 0 4 1093 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  5 value 1 1544  
700 0 0 4 1094 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  5 value 1 1544  
701 0 0 4 1095 1650 0 0 15 // Linear motor 2 4 this 3 1846  2 on 1 1552  
702 0 0 4 1096 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  15 target_velocity 1 1544  
703 0 0 4 1097 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  9 max_force 1 1544  
704 0 0 6 1098 1552 0 0 10 /**
 *
 */ 1 4 this 3 1847  
705 0 0 6 1099 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
706 0 0 6 1100 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
707 0 0 4 1101 1650 0 0 16 // Angular motor 2 4 this 3 1846  2 on 1 1552  
708 0 0 4 1102 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  15 target_velocity 1 1544  
709 0 0 4 1103 1650 0 0 10 /**
 *
 */ 2 4 this 3 1846  9 max_force 1 1544  
710 0 0 6 1104 1552 0 0 10 /**
 *
 */ 1 4 this 3 1847  
711 0 0 6 1105 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
712 0 0 6 1106 1544 0 0 10 /**
 *
 */ 1 4 this 3 1847  
713 0 0 4 1107 1650 0 0 9 // Frames 3 4 this 3 1846  4 ts_a 1 1656  4 ts_b 1 1656  
714 0 0 7 1108 1656 0 0 10 /**
 *
 */ 1 4 this 3 1847  
715 0 0 7 1109 1656 0 0 10 /**
 *
 */ 1 4 this 3 1847  
716 0 0 7 1124 1654 0 0 0 0 
717 0 0 7 1131 1742 1494 0 10 /**
 *
 */ 0 
718 0 0 7 1131 1742 1494 0 0 1 6 param0 0 1849  
719 0 0 4 1133 1650 0 0 10 /**
 *
 */ 2 4 this 3 1742  4 goal 1 1544  
720 0 0 4 1134 1650 0 0 10 /**
 *
 */ 2 4 this 3 1742  9 maxtorque 1 1544  
721 0 0 4 1135 1650 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 angle 1 1544  
722 0 0 4 1136 1650 0 0 10 /**
 *
 */ 2 4 this 3 1742  4 sign 1 1544  
723 0 0 6 1129 1851 0 0 0 1 4 this 3 1742  
724 0 0 6 1130 1742 0 0 0 2 4 this 3 1851  4 this 1 1851  
725 0 0 7 1138 1606 0 0 10 /**
 *
 */ 1 4 this 3 1852  
726 0 0 7 1140 1654 0 0 0 0 
727 0 0 7 1142 1856 0 0 10 /**
 *
 */ 1 4 copy 1 1854  
728 0 0 7 1142 1856 0 0 10 /**
 *
 */ 1 6 radius 1 1544  
729 0 0 7 1143 1856 0 0 0 2 4 this 3 1856  4 copy 1 1854  
730 0 0 6 1144 1544 0 0 10 /**
 *
 */ 1 4 this 3 1854  
731 0 0 7 1145 1856 0 0 10 /**
 *
 */ 1 5 solid 1 1857  
732 0 0 7 1147 1654 0 0 0 0 
733 0 0 7 1149 1860 0 0 10 /**
 *
 */ 4 6 node_a 1 1699  6 node_b 1 1699  7 pivot_a 1 1702  7 pivot_b 1 1702  
734 0 0 7 1149 1860 0 0 10 /**
 *
 */ 2 6 node_a 1 1699  7 pivot_a 1 1702  
735 0 0 4 1150 1650 0 0 9 // Pivots 2 4 this 3 1860  7 pivot_a 1 1702  
736 0 0 4 1151 1650 0 0 10 /**
 *
 */ 2 4 this 3 1860  7 pivot_b 1 1702  
737 0 0 7 1152 1644 0 0 10 /**
 *
 */ 1 4 this 3 1861  
738 0 0 7 1153 1644 0 0 10 /**
 *
 */ 1 4 this 3 1861  
739 0 0 7 1156 1654 0 0 0 0 
740 0 0 7 1158 1865 1515 0 10 /**
 *
 */ 1 8 timestep 1 1863  
741 0 0 6 1159 1544 0 0 10 /**
 *
 */ 1 4 this 3 1866  
742 0 0 7 1161 1654 0 0 0 0 
743 0 0 7 1164 1868 0 0 10 /**
 *
 */ 0 
744 0 0 4 1165 1650 0 0 347 /**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 5 4 this 3 1868  2 p0 1 1702  2 p1 1 1702  2 p2 1 1702  25 remove_duplicate_vertices 1 1552  
745 0 0 4 1166 1650 0 0 452 /**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1868  6 points 1 1786  7 indices 1 1869  25 remove_duplicate_vertices 1 1552  
746 0 0 4 1167 1650 0 0 461 /**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1868  4 geom 1 1743  25 remove_duplicate_vertices 1 1552  2 ts 1 1656  
747 0 0 4 1168 1650 0 0 254 /**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */ 2 4 this 3 1868  8 distance 1 1544  
748 0 0 4 1169 1650 0 0 239 /**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */ 3 4 this 3 1868  9 num_verts 1 1546  11 num_indices 1 1546  
749 0 0 6 1170 1873 0 0 65 /**
 * Returns the number of triangles in this triangle mesh.
 */ 1 4 this 3 1871  
750 0 0 6 1171 1544 0 0 110 /**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */ 1 4 this 3 1871  
751 0 0 4 1172 1650 0 0 10 /**
 *
 */ 2 4 this 3 1871  3 out 1 1875  
752 0 0 4 1173 1650 0 0 10 /**
 *
 */ 3 4 this 3 1871  3 out 1 1875  12 indent_level 1 1546  
753 0 0 7 1181 1654 0 0 0 0 
754 0 0 6 1175 1873 0 0 64 /**
 * Returns the number of vertices in this triangle mesh.
 */ 1 4 this 3 1871  
755 0 0 7 1183 1877 0 0 93 /**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */ 4 4 mesh 1 1868  7 dynamic 1 1552  8 compress 1 1552  3 bvh 1 1552  
756 0 0 7 1183 1877 0 0 10 /**
 *
 */ 1 4 copy 1 1878  
757 0 0 7 1184 1877 0 0 0 2 4 this 3 1877  4 copy 1 1878  
758 0 0 4 1185 1650 0 0 10 /**
 *
 */ 3 4 this 3 1877  8 aabb_min 1 1702  8 aabb_max 1 1702  
759 0 0 6 1186 1552 0 0 10 /**
 *
 */ 1 4 this 3 1878  
760 0 0 6 1187 1552 0 0 10 /**
 *
 */ 1 4 this 3 1878  
761 0 0 7 1190 1654 0 0 0 0 
762 0 0 6 2 1536 0 0 10 /**
 *
 */ 0 
763 0 0 6 3 1546 0 0 60 /**
 * Returns the version of the linked Bullet library.
 */ 0 
344
1536 12 BulletUpAxis 0 532481 12 BulletUpAxis 12 BulletUpAxis 0 0 0 0 0 0 0 0 0 0 3 4 X_up 4 X_up 0
0 4 Y_up 4 Y_up 0
1 4 Z_up 4 Z_up 0
2 0 0

1537 12 BulletRayHit 0 140289 12 BulletRayHit 12 BulletRayHit 0 0 0 1 773 774 6 1880 1881 1882 1883 1884 1885 7 766 767 768 769 770 771 772 0 0 0 0 0 10
/**
 *
 */

1538 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1539 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1540 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1541 0 0 0 0 0 0 0 0 0 0

1541 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1542 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1544 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1545 0 0 0 0 0 0 0 0 0 0

1545 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1546 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1547 22 BulletAllHitsRayResult 0 140289 22 BulletAllHitsRayResult 22 BulletAllHitsRayResult 0 0 0 0 785 4 1886 1887 1888 1889 7 777 778 779 780 781 782 783 1 2178 0 1 3 1548 775 776 0 0 10
/**
 *
 */

1548 24 AllHitsRayResultCallback 0 263169 42 btCollisionWorld::AllHitsRayResultCallback 42 btCollisionWorld::AllHitsRayResultCallback 1549 0 0 0 0 0 0 0 0 0 0 0 0

1549 16 btCollisionWorld 0 2048 16 btCollisionWorld 16 btCollisionWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1550 11 BulletShape 0 75777 11 BulletShape 11 BulletShape 0 0 0 0 0 10 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 12 786 787 788 789 790 791 792 793 794 795 796 797 0 0 1 0 1551 0 0 0 0 10
/**
 *
 */

1551 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1552 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1553 12 char const * 0 8576 12 char const * 12 char const * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 10 char const 0 8832 10 char const 10 char const 0 0 1555 0 0 0 0 0 0 0 0 0 0

1555 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1556 14 BoundingSphere 0 2048 14 BoundingSphere 14 BoundingSphere 0 0 0 0 0 0 0 0 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1557 33 BulletBaseCharacterControllerNode 0 141313 33 BulletBaseCharacterControllerNode 33 BulletBaseCharacterControllerNode 0 0 0 0 799 0 1 798 0 0 1 0 1539 0 0 0 0 10
/**
 *
 */

1558 14 BulletBodyNode 0 75777 14 BulletBodyNode 14 BulletBodyNode 0 0 0 0 0 20 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 44 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 847 1 2179 0 1 0 1539 0 0 0 0 10
/**
 *
 */

1559 13 BulletShape * 0 8576 13 BulletShape * 13 BulletShape * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1560 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1561 0 0 0 0 0 0 0 0 0 0

1561 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1562 32 ConstPointerTo< TransformState > 0 2048 32 ConstPointerTo< TransformState > 32 ConstPointerTo< TransformState > 0 0 0 0 0 0 0 0 0 0 0 0 0

1563 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 1564 0 0 0 0 0 0 0 0 0 0

1564 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1565 14 BulletBoxShape 0 75777 14 BulletBoxShape 14 BulletBoxShape 0 0 0 1 848 0 2 1920 1921 5 849 850 851 852 853 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1566 18 BulletCapsuleShape 0 75777 18 BulletCapsuleShape 18 BulletCapsuleShape 0 0 0 1 854 0 2 1922 1923 4 855 856 857 858 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1567 29 BulletCharacterControllerNode 0 75777 29 BulletCharacterControllerNode 29 BulletCharacterControllerNode 0 0 0 1 859 799 4 1924 1925 1926 1927 15 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 0 0 1 0 1557 0 0 0 0 10
/**
 *
 */

1568 25 BulletClosestHitRayResult 0 140289 25 BulletClosestHitRayResult 25 BulletClosestHitRayResult 0 0 0 1 887 888 8 1928 1929 1930 1931 1932 1933 1934 1935 10 877 878 879 880 881 882 883 884 885 886 0 0 1 3 1569 875 876 0 0 10
/**
 *
 */

1569 24 ClosestRayResultCallback 0 263169 42 btCollisionWorld::ClosestRayResultCallback 42 btCollisionWorld::ClosestRayResultCallback 1549 0 0 0 0 0 0 0 0 0 0 0 0

1570 27 BulletClosestHitSweepResult 0 140289 27 BulletClosestHitSweepResult 27 BulletClosestHitSweepResult 0 0 0 1 899 900 6 1936 1937 1938 1939 1940 1941 8 891 892 893 894 895 896 897 898 0 0 1 3 1571 889 890 0 0 10
/**
 *
 */

1571 27 ClosestConvexResultCallback 0 263169 45 btCollisionWorld::ClosestConvexResultCallback 45 btCollisionWorld::ClosestConvexResultCallback 1549 0 0 0 0 0 0 0 0 0 0 0 0

1572 15 BulletConeShape 0 75777 15 BulletConeShape 15 BulletConeShape 0 0 0 1 901 0 2 1942 1943 4 902 903 904 905 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1573 16 BulletConstraint 0 75777 16 BulletConstraint 16 BulletConstraint 0 0 0 0 0 6 1944 1961 1962 1963 1964 1965 13 906 907 908 909 910 911 912 913 914 915 916 917 955 0 0 1 0 1574 0 0 0 1 1575 10
/**
 *
 */

1574 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1575 15 ConstraintParam 0 794624 33 BulletConstraint::ConstraintParam 33 BulletConstraint::ConstraintParam 1573 0 0 0 0 0 0 0 0 0 4 6 CP_erp 24 BulletConstraint::CP_erp 0
1 11 CP_stop_erp 29 BulletConstraint::CP_stop_erp 0
2 6 CP_cfm 24 BulletConstraint::CP_cfm 0
3 11 CP_stop_cfm 29 BulletConstraint::CP_stop_cfm 0
4 0 0

1576 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1577 0 0 0 0 0 0 0 0 0 0

1577 19 BulletRigidBodyNode 0 75777 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 1 918 0 16 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 36 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 0 0 1 0 1558 0 0 0 0 10
/**
 *
 */

1578 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 1579 0 0 0 0 0 0 0 0 0 0

1579 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1580 25 BulletConeTwistConstraint 0 75777 25 BulletConeTwistConstraint 25 BulletConeTwistConstraint 0 0 0 1 956 0 3 1966 1967 1968 13 957 958 959 960 961 962 963 964 965 966 967 968 969 0 0 1 0 1573 0 0 0 0 10
/**
 *
 */

1581 19 BulletManifoldPoint 0 26625 19 BulletManifoldPoint 19 BulletManifoldPoint 0 0 0 0 970 23 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 35 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 0 0 0 0 0 10
/**
 *
 */

1582 25 BulletContactCallbackData 0 10241 25 BulletContactCallbackData 25 BulletContactCallbackData 0 0 0 1 1006 0 7 1992 1993 1994 1995 1996 1997 1998 8 1007 1008 1009 1010 1011 1012 1013 1014 0 0 1 0 1583 0 0 0 0 10
/**
 *
 */

1583 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1584 13 BulletContact 0 140289 13 BulletContact 13 BulletContact 0 0 0 0 1022 7 1999 2000 2001 2002 2003 2004 2005 7 1015 1016 1017 1018 1019 1020 1021 0 0 0 0 0 10
/**
 *
 */

1585 19 BulletContactResult 0 140289 19 BulletContactResult 19 BulletContactResult 0 0 0 0 1028 1 2006 2 1025 1026 1 2180 0 1 3 1586 1023 1024 0 0 10
/**
 *
 */

1586 21 ContactResultCallback 0 263169 39 btCollisionWorld::ContactResultCallback 39 btCollisionWorld::ContactResultCallback 1549 0 0 0 0 0 0 0 0 0 0 0 0

1587 15 BulletDebugNode 0 75777 15 BulletDebugNode 15 BulletDebugNode 0 0 0 1 1029 0 4 2007 2008 2009 2010 10 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 0 0 1 0 1539 0 0 0 0 10
/**
 *
 */

1588 15 BulletGhostNode 0 75777 15 BulletGhostNode 15 BulletGhostNode 0 0 0 1 1040 0 1 2011 3 1041 1042 1044 1 2181 0 1 0 1558 0 0 0 0 10
/**
 *
 */

1589 25 BulletSoftBodyNodeElement 0 26625 25 BulletSoftBodyNodeElement 25 BulletSoftBodyNodeElement 0 0 0 1 1053 1045 6 2012 2013 2014 2015 2016 2017 7 1046 1047 1048 1049 1050 1051 1052 0 0 0 0 0 10
/**
 *
 */

1590 18 BulletSoftBodyNode 0 75777 18 BulletSoftBodyNode 18 BulletSoftBodyNode 0 0 0 0 0 7 2018 2044 2050 2051 2052 2053 2057 45 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1177 2 2182 2183 0 1 0 1558 0 0 0 0 10
/**
 *
 */

1591 20 BulletSoftBodyConfig 0 26625 20 BulletSoftBodyConfig 20 BulletSoftBodyConfig 0 0 0 1 1152 1098 25 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 53 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 0 0 0 0 2 1592 1593 10
/**
 *
 */

1592 13 CollisionFlag 0 794624 35 BulletSoftBodyConfig::CollisionFlag 35 BulletSoftBodyConfig::CollisionFlag 1591 0 0 0 0 0 0 0 0 0 7 21 CF_rigid_vs_soft_mask 43 BulletSoftBodyConfig::CF_rigid_vs_soft_mask 34
// RVSmask: Rigid versus soft mask
15 17 CF_sdf_rigid_soft 39 BulletSoftBodyConfig::CF_sdf_rigid_soft 35
// SDF_RS:  SDF based rigid vs soft
1 21 CF_cluster_rigid_soft 43 BulletSoftBodyConfig::CF_cluster_rigid_soft 43
// CL_RS:   Cluster vs convex rigid vs soft
2 20 CF_soft_vs_soft_mask 42 BulletSoftBodyConfig::CF_soft_vs_soft_mask 33
// SVSmask: Soft versus soft mask
48 24 CF_vertex_face_soft_soft 46 BulletSoftBodyConfig::CF_vertex_face_soft_soft 48
// VF_SS:   Vertex vs face soft vs soft handling
16 20 CF_cluster_soft_soft 42 BulletSoftBodyConfig::CF_cluster_soft_soft 52
// CL_SS:   Cluster vs cluster soft vs soft handling
32 15 CF_cluster_self 37 BulletSoftBodyConfig::CF_cluster_self 44
// CL_SELF: Cluster soft body self collision
64 0 0

1593 9 AeroModel 0 794624 31 BulletSoftBodyConfig::AeroModel 31 BulletSoftBodyConfig::AeroModel 1591 0 0 0 0 0 0 0 0 0 5 15 AM_vertex_point 37 BulletSoftBodyConfig::AM_vertex_point 58
// V_Point:    Vertex normals are oriented toward velocity
0 19 AM_vertex_two_sided 41 BulletSoftBodyConfig::AM_vertex_two_sided 58
// V_TwoSided: Vertex normals are fliped to match velocity
1 19 AM_vertex_one_sided 41 BulletSoftBodyConfig::AM_vertex_one_sided 48
// V_OneSided: Vertex normals are taken as it is
2 17 AM_face_two_sided 39 BulletSoftBodyConfig::AM_face_two_sided 56
// F_TwoSided: Face normals are fliped to match velocity
3 17 AM_face_one_sided 39 BulletSoftBodyConfig::AM_face_one_sided 46
// F_OneSided: Face normals are taken as it is
4 0 0

1594 23 BulletSoftBodyWorldInfo 0 26625 23 BulletSoftBodyWorldInfo 23 BulletSoftBodyWorldInfo 0 0 0 1 1165 1153 5 2045 2046 2047 2048 2049 11 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 0 0 0 0 0 10
/**
 *
 */

1595 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1596 22 BulletSoftBodyMaterial 0 26625 22 BulletSoftBodyMaterial 22 BulletSoftBodyMaterial 0 0 0 1 1174 1166 3 2054 2055 2056 7 1167 1168 1169 1170 1171 1172 1173 0 0 0 0 0 10
/**
 *
 */

1597 19 BulletVehicleTuning 0 10241 19 BulletVehicleTuning 19 BulletVehicleTuning 0 0 0 0 0 6 2058 2059 2060 2061 2062 2063 12 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 0 0 0 0 0 10
/**
 *
 */

1598 13 BulletVehicle 0 75777 13 BulletVehicle 13 BulletVehicle 0 0 0 1 1190 0 5 2064 2065 2066 2067 2101 15 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1266 1 2184 0 1 0 1574 0 0 0 0 257
/**
 * Simulates a raycast vehicle which casts a ray per wheel at the ground as a
 * cheap replacement for complex suspension simulation.  The suspension can be
 * tuned in various ways.  It is possible to add a (probably) arbitrary number
 * of wheels.
 */

1599 11 BulletWheel 0 26625 11 BulletWheel 11 BulletWheel 0 0 0 1 1264 1205 25 2068 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 48 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 0 0 0 0 0 145
/**
 * One wheel of a BulletVehicle.  Instances should not be created directly but
 * using the factory method BulletVehicle::create_wheel().
 */

1600 22 BulletWheelRaycastInfo 0 26625 22 BulletWheelRaycastInfo 22 BulletWheelRaycastInfo 0 0 0 1 1263 1254 8 2069 2070 2071 2072 2073 2074 2075 2076 8 1255 1256 1257 1258 1259 1260 1261 1262 0 0 0 0 0 10
/**
 *
 */

1601 11 BulletWorld 0 75777 11 BulletWorld 11 BulletWorld 0 0 0 1 1267 0 10 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 51 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 7 2185 2186 2187 2188 2189 2190 2191 0 1 0 1574 0 0 0 2 1602 1603 10
/**
 *
 */

1602 19 BroadphaseAlgorithm 0 794624 32 BulletWorld::BroadphaseAlgorithm 32 BulletWorld::BroadphaseAlgorithm 1601 0 0 0 0 0 0 0 0 0 2 18 BA_sweep_and_prune 31 BulletWorld::BA_sweep_and_prune 0
0 20 BA_dynamic_aabb_tree 33 BulletWorld::BA_dynamic_aabb_tree 0
1 0 16
// Configuration

1603 15 FilterAlgorithm 0 794624 28 BulletWorld::FilterAlgorithm 28 BulletWorld::FilterAlgorithm 1601 0 0 0 0 0 0 0 0 0 3 7 FA_mask 20 BulletWorld::FA_mask 0
0 14 FA_groups_mask 27 BulletWorld::FA_groups_mask 0
1 11 FA_callback 24 BulletWorld::FA_callback 0
2 0 0

1604 17 BulletDebugNode * 0 8576 17 BulletDebugNode * 17 BulletDebugNode * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1605 17 BulletGhostNode * 0 8576 17 BulletGhostNode * 17 BulletGhostNode * 0 0 1588 0 0 0 0 0 0 0 0 0 0

1606 20 BulletSoftBodyNode * 0 8576 20 BulletSoftBodyNode * 20 BulletSoftBodyNode * 0 0 1590 0 0 0 0 0 0 0 0 0 0

1607 35 BulletBaseCharacterControllerNode * 0 8576 35 BulletBaseCharacterControllerNode * 35 BulletBaseCharacterControllerNode * 0 0 1557 0 0 0 0 0 0 0 0 0 0

1608 15 BulletVehicle * 0 8576 15 BulletVehicle * 15 BulletVehicle * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1609 18 BulletConstraint * 0 8576 18 BulletConstraint * 18 BulletConstraint * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1610 26 BulletPersistentManifold * 0 8576 26 BulletPersistentManifold * 26 BulletPersistentManifold * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1611 24 BulletPersistentManifold 0 26625 24 BulletPersistentManifold 24 BulletPersistentManifold 0 0 0 1 1324 1315 5 2112 2113 2114 2115 2116 7 1316 1317 1318 1319 1320 1321 1322 1 2192 0 0 0 0 10
/**
 *
 */

1612 21 BulletManifoldPoint * 0 8576 21 BulletManifoldPoint * 21 BulletManifoldPoint * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1613 21 BulletConvexHullShape 0 75777 21 BulletConvexHullShape 21 BulletConvexHullShape 0 0 0 1 1336 0 0 5 1337 1338 1339 1340 1341 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1614 27 BulletConvexPointCloudShape 0 75777 27 BulletConvexPointCloudShape 27 BulletConvexPointCloudShape 0 0 0 1 1342 0 1 2117 3 1343 1344 1345 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1615 19 BulletCylinderShape 0 75777 19 BulletCylinderShape 19 BulletCylinderShape 0 0 0 1 1346 0 3 2118 2119 2120 5 1347 1348 1349 1350 1351 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1616 24 BulletFilterCallbackData 0 141313 24 BulletFilterCallbackData 24 BulletFilterCallbackData 0 0 0 1 1352 1358 3 2121 2122 2123 5 1353 1354 1355 1356 1357 0 0 1 0 1583 0 0 0 0 10
/**
 *
 */

1617 26 BulletRotationalLimitMotor 0 26625 26 BulletRotationalLimitMotor 26 BulletRotationalLimitMotor 0 0 0 1 1359 1360 6 2124 2125 2126 2127 2128 2129 18 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1618 29 BulletTranslationalLimitMotor 0 26625 29 BulletTranslationalLimitMotor 29 BulletTranslationalLimitMotor 0 0 0 1 1379 1380 3 2130 2131 2132 17 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1619 23 BulletGenericConstraint 0 75777 23 BulletGenericConstraint 23 BulletGenericConstraint 0 0 0 1 1398 0 3 2133 2134 2135 11 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 0 0 1 0 1573 0 0 0 0 10
/**
 *
 */

1620 22 BulletHeightfieldShape 0 75777 22 BulletHeightfieldShape 22 BulletHeightfieldShape 0 0 0 1 1410 0 0 3 1411 1412 1413 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1621 12 BulletHelper 0 141313 12 BulletHelper 12 BulletHelper 0 0 0 1 1422 1423 2 2136 2137 8 1414 1415 1416 1417 1418 1419 1420 1421 0 0 0 0 0 10
/**
 *
 */

1622 25 PointerTo< InternalName > 0 2048 25 PointerTo< InternalName > 25 PointerTo< InternalName > 0 0 0 0 0 0 0 0 0 0 0 0 0

1623 21 BulletHingeConstraint 0 75777 21 BulletHingeConstraint 21 BulletHingeConstraint 0 0 0 1 1424 0 6 2138 2139 2140 2141 2142 2143 15 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 0 0 1 0 1573 0 0 0 0 158
/**
 * The hinge constraint lets two bodies rotate around a given axis while
 * adhering to specified limits.  It's motor can apply angular force to them.
 */

1624 23 BulletMinkowskiSumShape 0 75777 23 BulletMinkowskiSumShape 23 BulletMinkowskiSumShape 0 0 0 1 1440 0 5 2144 2145 2146 2147 2148 9 1441 1442 1443 1444 1445 1446 1447 1448 1449 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1625 19 BulletShape const * 0 8576 19 BulletShape const * 19 BulletShape const * 0 0 1626 0 0 0 0 0 0 0 0 0 0

1626 17 BulletShape const 0 8832 17 BulletShape const 17 BulletShape const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1627 22 BulletMultiSphereShape 0 75777 22 BulletMultiSphereShape 22 BulletMultiSphereShape 0 0 0 1 1450 0 3 2149 2150 2151 5 1451 1452 1453 1454 1457 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1628 16 BulletPlaneShape 0 75777 16 BulletPlaneShape 16 BulletPlaneShape 0 0 0 1 1458 0 2 2152 2153 5 1459 1460 1461 1462 1463 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1629 22 BulletSliderConstraint 0 75777 22 BulletSliderConstraint 22 BulletSliderConstraint 0 0 0 1 1464 0 14 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 26 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 0 0 1 0 1573 0 0 0 0 10
/**
 *
 */

1630 21 BulletSoftBodyControl 0 26625 21 BulletSoftBodyControl 21 BulletSoftBodyControl 0 0 0 1 1493 1494 0 4 1495 1496 1497 1498 0 0 1 3 1631 1491 1492 0 0 10
/**
 *
 */

1631 8 IControl 0 263169 28 btSoftBody::AJoint::IControl 28 btSoftBody::AJoint::IControl 1632 0 0 0 0 0 0 0 0 0 0 0 0

1632 6 AJoint 0 263168 18 btSoftBody::AJoint 18 btSoftBody::AJoint 1633 0 0 0 0 0 0 0 0 0 0 0 0

1633 10 btSoftBody 0 2048 10 btSoftBody 10 btSoftBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1634 19 BulletSoftBodyShape 0 75777 19 BulletSoftBodyShape 19 BulletSoftBodyShape 0 0 0 0 0 1 2168 2 1499 1500 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1635 17 BulletSphereShape 0 75777 17 BulletSphereShape 17 BulletSphereShape 0 0 0 1 1501 0 1 2169 4 1502 1503 1504 1505 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1636 25 BulletSphericalConstraint 0 75777 25 BulletSphericalConstraint 25 BulletSphericalConstraint 0 0 0 1 1506 0 2 2170 2171 5 1507 1508 1509 1510 1511 0 0 1 0 1573 0 0 0 0 328
/**
 * A constraint between two rigid bodies, each with a pivot point.  The pivot
 * points are described in the body's local space.  The constraint limits
 * movement of the two rigid bodies in such a way that the pivot points match
 * in global space.  The spherical constraint can be seen as a "ball and
 * socket" joint.
 */

1637 22 BulletTickCallbackData 0 141313 22 BulletTickCallbackData 22 BulletTickCallbackData 0 0 0 1 1512 1515 1 2172 2 1513 1514 0 0 1 0 1583 0 0 0 0 10
/**
 *
 */

1638 18 BulletTriangleMesh 0 75777 18 BulletTriangleMesh 18 BulletTriangleMesh 0 0 0 1 1516 0 3 2173 2174 2175 10 1517 1518 1519 1520 1521 1522 1523 1524 1525 1529 0 0 1 0 1551 0 0 0 0 10
/**
 *
 */

1639 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1640 23 BulletTriangleMeshShape 0 75777 23 BulletTriangleMeshShape 23 BulletTriangleMeshShape 0 0 0 1 1530 0 2 2176 2177 5 1531 1532 1533 1534 1535 0 0 1 0 1550 0 0 0 0 10
/**
 *
 */

1641 14 BulletRayHit * 0 8576 14 BulletRayHit * 14 BulletRayHit * 0 0 1537 0 0 0 0 0 0 0 0 0 0

1642 20 BulletRayHit const * 0 8576 20 BulletRayHit const * 20 BulletRayHit const * 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 18 BulletRayHit const 0 8832 18 BulletRayHit const 18 BulletRayHit const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1644 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1645 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1646 24 BulletAllHitsRayResult * 0 8576 24 BulletAllHitsRayResult * 24 BulletAllHitsRayResult * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1647 30 BulletAllHitsRayResult const * 0 8576 30 BulletAllHitsRayResult const * 30 BulletAllHitsRayResult const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 28 BulletAllHitsRayResult const 0 8832 28 BulletAllHitsRayResult const 28 BulletAllHitsRayResult const 0 0 1547 0 0 0 0 0 0 0 0 0 0

1649 26 AllHitsRayResultCallback * 0 8576 44 btCollisionWorld::AllHitsRayResultCallback * 44 btCollisionWorld::AllHitsRayResultCallback * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1650 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1651 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1652 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1653 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1654 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1655 16 BulletBodyNode * 0 8576 16 BulletBodyNode * 16 BulletBodyNode * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1656 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1657 0 0 0 0 0 0 0 0 0 0

1657 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1658 0 0 0 0 0 0 0 0 0 0

1658 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1659 22 BulletBodyNode const * 0 8576 22 BulletBodyNode const * 22 BulletBodyNode const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 20 BulletBodyNode const 0 8832 20 BulletBodyNode const 20 BulletBodyNode const 0 0 1558 0 0 0 0 0 0 0 0 0 0

1661 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1662 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 1663 0 0 0 0 0 0 0 0 0 0

1663 13 CollisionNode 0 2048 13 CollisionNode 13 CollisionNode 0 0 0 0 0 0 0 0 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

1664 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 1665 0 0 0 0 0 0 0 0 0 0

1665 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1667 0 0 0 0 0 0 0 0 0 0

1667 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1668 10 bool const 0 8832 10 bool const 10 bool const 0 0 1552 0 0 0 0 0 0 0 0 0 0

1669 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 1670 0 0 0 0 0 0 0 0 0 0

1670 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 1563 0 0 0 0 0 0 0 0 0 0

1671 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1672 22 BulletBoxShape const * 0 8576 22 BulletBoxShape const * 22 BulletBoxShape const * 0 0 1673 0 0 0 0 0 0 0 0 0 0

1673 20 BulletBoxShape const 0 8832 20 BulletBoxShape const 20 BulletBoxShape const 0 0 1565 0 0 0 0 0 0 0 0 0 0

1674 16 BulletBoxShape * 0 8576 16 BulletBoxShape * 16 BulletBoxShape * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1675 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 1676 0 0 0 0 0 0 0 0 0 0

1676 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 12 CollisionBox 0 2048 12 CollisionBox 12 CollisionBox 0 0 0 0 0 0 0 0 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

1678 26 BulletCapsuleShape const * 0 8576 26 BulletCapsuleShape const * 26 BulletCapsuleShape const * 0 0 1679 0 0 0 0 0 0 0 0 0 0

1679 24 BulletCapsuleShape const 0 8832 24 BulletCapsuleShape const 24 BulletCapsuleShape const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1680 20 BulletCapsuleShape * 0 8576 20 BulletCapsuleShape * 20 BulletCapsuleShape * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1681 31 BulletCharacterControllerNode * 0 8576 31 BulletCharacterControllerNode * 31 BulletCharacterControllerNode * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1682 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1542 0 0 0 0 0 0 0 0 0 0

1684 37 BulletCharacterControllerNode const * 0 8576 37 BulletCharacterControllerNode const * 37 BulletCharacterControllerNode const * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 35 BulletCharacterControllerNode const 0 8832 35 BulletCharacterControllerNode const 35 BulletCharacterControllerNode const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1686 33 BulletClosestHitRayResult const * 0 8576 33 BulletClosestHitRayResult const * 33 BulletClosestHitRayResult const * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 31 BulletClosestHitRayResult const 0 8832 31 BulletClosestHitRayResult const 31 BulletClosestHitRayResult const 0 0 1568 0 0 0 0 0 0 0 0 0 0

1688 27 BulletClosestHitRayResult * 0 8576 27 BulletClosestHitRayResult * 27 BulletClosestHitRayResult * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1689 26 ClosestRayResultCallback * 0 8576 44 btCollisionWorld::ClosestRayResultCallback * 44 btCollisionWorld::ClosestRayResultCallback * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1690 35 BulletClosestHitSweepResult const * 0 8576 35 BulletClosestHitSweepResult const * 35 BulletClosestHitSweepResult const * 0 0 1691 0 0 0 0 0 0 0 0 0 0

1691 33 BulletClosestHitSweepResult const 0 8832 33 BulletClosestHitSweepResult const 33 BulletClosestHitSweepResult const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1692 29 BulletClosestHitSweepResult * 0 8576 29 BulletClosestHitSweepResult * 29 BulletClosestHitSweepResult * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1693 29 ClosestConvexResultCallback * 0 8576 47 btCollisionWorld::ClosestConvexResultCallback * 47 btCollisionWorld::ClosestConvexResultCallback * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1694 23 BulletConeShape const * 0 8576 23 BulletConeShape const * 23 BulletConeShape const * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1695 21 BulletConeShape const 0 8832 21 BulletConeShape const 21 BulletConeShape const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1696 17 BulletConeShape * 0 8576 17 BulletConeShape * 17 BulletConeShape * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1697 24 BulletConstraint const * 0 8576 24 BulletConstraint const * 24 BulletConstraint const * 0 0 1698 0 0 0 0 0 0 0 0 0 0

1698 22 BulletConstraint const 0 8832 22 BulletConstraint const 22 BulletConstraint const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1699 27 BulletRigidBodyNode const * 0 8576 27 BulletRigidBodyNode const * 27 BulletRigidBodyNode const * 0 0 1700 0 0 0 0 0 0 0 0 0 0

1700 25 BulletRigidBodyNode const 0 8832 25 BulletRigidBodyNode const 25 BulletRigidBodyNode const 0 0 1577 0 0 0 0 0 0 0 0 0 0

1701 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1702 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1703 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1704 27 BulletConeTwistConstraint * 0 8576 27 BulletConeTwistConstraint * 27 BulletConeTwistConstraint * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1705 33 BulletConeTwistConstraint const * 0 8576 33 BulletConeTwistConstraint const * 33 BulletConeTwistConstraint const * 0 0 1706 0 0 0 0 0 0 0 0 0 0

1706 31 BulletConeTwistConstraint const 0 8832 31 BulletConeTwistConstraint const 31 BulletConeTwistConstraint const 0 0 1580 0 0 0 0 0 0 0 0 0 0

1707 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 1708 0 0 0 0 0 0 0 0 0 0

1708 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 1709 0 0 0 0 0 0 0 0 0 0

1709 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 1710 0 0 0 0 0 0 0 0 0 0

1710 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1711 27 BulletManifoldPoint const * 0 8576 27 BulletManifoldPoint const * 27 BulletManifoldPoint const * 0 0 1712 0 0 0 0 0 0 0 0 0 0

1712 25 BulletManifoldPoint const 0 8832 25 BulletManifoldPoint const 25 BulletManifoldPoint const 0 0 1581 0 0 0 0 0 0 0 0 0 0

1713 27 BulletContactCallbackData * 0 8576 27 BulletContactCallbackData * 27 BulletContactCallbackData * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1714 33 BulletContactCallbackData const * 0 8576 33 BulletContactCallbackData const * 33 BulletContactCallbackData const * 0 0 1715 0 0 0 0 0 0 0 0 0 0

1715 31 BulletContactCallbackData const 0 8832 31 BulletContactCallbackData const 31 BulletContactCallbackData const 0 0 1582 0 0 0 0 0 0 0 0 0 0

1716 15 BulletContact * 0 8576 15 BulletContact * 15 BulletContact * 0 0 1584 0 0 0 0 0 0 0 0 0 0

1717 21 BulletContact const * 0 8576 21 BulletContact const * 21 BulletContact const * 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 19 BulletContact const 0 8832 19 BulletContact const 19 BulletContact const 0 0 1584 0 0 0 0 0 0 0 0 0 0

1719 27 BulletContactResult const * 0 8576 27 BulletContactResult const * 27 BulletContactResult const * 0 0 1720 0 0 0 0 0 0 0 0 0 0

1720 25 BulletContactResult const 0 8832 25 BulletContactResult const 25 BulletContactResult const 0 0 1585 0 0 0 0 0 0 0 0 0 0

1721 21 BulletContactResult * 0 8576 21 BulletContactResult * 21 BulletContactResult * 0 0 1585 0 0 0 0 0 0 0 0 0 0

1722 23 ContactResultCallback * 0 8576 41 btCollisionWorld::ContactResultCallback * 41 btCollisionWorld::ContactResultCallback * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1723 23 BulletDebugNode const * 0 8576 23 BulletDebugNode const * 23 BulletDebugNode const * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 21 BulletDebugNode const 0 8832 21 BulletDebugNode const 21 BulletDebugNode const 0 0 1587 0 0 0 0 0 0 0 0 0 0

1725 23 BulletGhostNode const * 0 8576 23 BulletGhostNode const * 23 BulletGhostNode const * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 21 BulletGhostNode const 0 8832 21 BulletGhostNode const 21 BulletGhostNode const 0 0 1588 0 0 0 0 0 0 0 0 0 0

1727 33 BulletSoftBodyNodeElement const * 0 8576 33 BulletSoftBodyNodeElement const * 33 BulletSoftBodyNodeElement const * 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 31 BulletSoftBodyNodeElement const 0 8832 31 BulletSoftBodyNodeElement const 31 BulletSoftBodyNodeElement const 0 0 1589 0 0 0 0 0 0 0 0 0 0

1729 27 BulletSoftBodyNodeElement * 0 8576 27 BulletSoftBodyNodeElement * 27 BulletSoftBodyNodeElement * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1730 22 BulletSoftBodyConfig * 0 8576 22 BulletSoftBodyConfig * 22 BulletSoftBodyConfig * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1731 25 BulletSoftBodyWorldInfo * 0 8576 25 BulletSoftBodyWorldInfo * 25 BulletSoftBodyWorldInfo * 0 0 1594 0 0 0 0 0 0 0 0 0 0

1732 24 BulletSoftBodyMaterial * 0 8576 24 BulletSoftBodyMaterial * 24 BulletSoftBodyMaterial * 0 0 1596 0 0 0 0 0 0 0 0 0 0

1733 26 BulletSoftBodyNode const * 0 8576 26 BulletSoftBodyNode const * 26 BulletSoftBodyNode const * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 24 BulletSoftBodyNode const 0 8832 24 BulletSoftBodyNode const 24 BulletSoftBodyNode const 0 0 1590 0 0 0 0 0 0 0 0 0 0

1735 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1736 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 1737 0 0 0 0 0 0 0 0 0 0

1737 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1738 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 1739 0 0 0 0 0 0 0 0 0 0

1739 19 NurbsCurveEvaluator 0 2048 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 492
/**
 * This class is an abstraction for evaluating NURBS curves.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 *
 * This is not related to NurbsCurve, CubicCurveseg or any of the
 * ParametricCurve-derived objects in this module.  It is a completely
 * parallel implementation of NURBS curves, and will probably eventually
 * replace the whole ParametricCurve class hierarchy.
 */

1740 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 1741 0 0 0 0 0 0 0 0 0 0

1741 21 NurbsSurfaceEvaluator 0 2048 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 227
/**
 * This class is an abstraction for evaluating NURBS surfaces.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 */

1742 23 BulletSoftBodyControl * 0 8576 23 BulletSoftBodyControl * 23 BulletSoftBodyControl * 0 0 1630 0 0 0 0 0 0 0 0 0 0

1743 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1737 0 0 0 0 0 0 0 0 0 0

1745 15 PTA_LVecBase3 * 0 8576 15 PTA_LVecBase3 * 15 PTA_LVecBase3 * 0 0 1746 0 0 0 0 0 0 0 0 0 0

1746 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1748 0 0 0 0 0 0 0 0 0 0

1748 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1749 9 PTA_int * 0 8576 9 PTA_int * 9 PTA_int * 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 1751 0 0 0 0 0 0 0 0 0 0

1751 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

1752 28 BulletSoftBodyConfig const * 0 8576 28 BulletSoftBodyConfig const * 28 BulletSoftBodyConfig const * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 26 BulletSoftBodyConfig const 0 8832 26 BulletSoftBodyConfig const 26 BulletSoftBodyConfig const 0 0 1591 0 0 0 0 0 0 0 0 0 0

1754 31 BulletSoftBodyWorldInfo const * 0 8576 31 BulletSoftBodyWorldInfo const * 31 BulletSoftBodyWorldInfo const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 29 BulletSoftBodyWorldInfo const 0 8832 29 BulletSoftBodyWorldInfo const 29 BulletSoftBodyWorldInfo const 0 0 1594 0 0 0 0 0 0 0 0 0 0

1756 30 BulletSoftBodyMaterial const * 0 8576 30 BulletSoftBodyMaterial const * 30 BulletSoftBodyMaterial const * 0 0 1757 0 0 0 0 0 0 0 0 0 0

1757 28 BulletSoftBodyMaterial const 0 8832 28 BulletSoftBodyMaterial const 28 BulletSoftBodyMaterial const 0 0 1596 0 0 0 0 0 0 0 0 0 0

1758 21 BulletVehicleTuning * 0 8576 21 BulletVehicleTuning * 21 BulletVehicleTuning * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1759 27 BulletVehicleTuning const * 0 8576 27 BulletVehicleTuning const * 27 BulletVehicleTuning const * 0 0 1760 0 0 0 0 0 0 0 0 0 0

1760 25 BulletVehicleTuning const 0 8832 25 BulletVehicleTuning const 25 BulletVehicleTuning const 0 0 1597 0 0 0 0 0 0 0 0 0 0

1761 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1762 21 BulletVehicle const * 0 8576 21 BulletVehicle const * 21 BulletVehicle const * 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 19 BulletVehicle const 0 8832 19 BulletVehicle const 19 BulletVehicle const 0 0 1598 0 0 0 0 0 0 0 0 0 0

1764 13 BulletWheel * 0 8576 13 BulletWheel * 13 BulletWheel * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1765 19 BulletWheel const * 0 8576 19 BulletWheel const * 19 BulletWheel const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 17 BulletWheel const 0 8832 17 BulletWheel const 17 BulletWheel const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1767 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1768 0 0 0 0 0 0 0 0 0 0

1768 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1560 0 0 0 0 0 0 0 0 0 0

1769 24 BulletWheelRaycastInfo * 0 8576 24 BulletWheelRaycastInfo * 24 BulletWheelRaycastInfo * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1770 30 BulletWheelRaycastInfo const * 0 8576 30 BulletWheelRaycastInfo const * 30 BulletWheelRaycastInfo const * 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 28 BulletWheelRaycastInfo const 0 8832 28 BulletWheelRaycastInfo const 28 BulletWheelRaycastInfo const 0 0 1600 0 0 0 0 0 0 0 0 0 0

1772 19 BulletWorld const * 0 8576 19 BulletWorld const * 19 BulletWorld const * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 17 BulletWorld const 0 8832 17 BulletWorld const 17 BulletWorld const 0 0 1601 0 0 0 0 0 0 0 0 0 0

1774 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1776 19 CollideMask const * 0 8576 19 CollideMask const * 19 CollideMask const * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 17 CollideMask const 0 8832 17 CollideMask const 17 CollideMask const 0 0 1665 0 0 0 0 0 0 0 0 0 0

1778 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1779 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1781 32 BulletPersistentManifold const * 0 8576 32 BulletPersistentManifold const * 32 BulletPersistentManifold const * 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 30 BulletPersistentManifold const 0 8832 30 BulletPersistentManifold const 30 BulletPersistentManifold const 0 0 1611 0 0 0 0 0 0 0 0 0 0

1783 23 BulletConvexHullShape * 0 8576 23 BulletConvexHullShape * 23 BulletConvexHullShape * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1784 29 BulletConvexHullShape const * 0 8576 29 BulletConvexHullShape const * 29 BulletConvexHullShape const * 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 27 BulletConvexHullShape const 0 8832 27 BulletConvexHullShape const 27 BulletConvexHullShape const 0 0 1613 0 0 0 0 0 0 0 0 0 0

1786 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 1787 0 0 0 0 0 0 0 0 0 0

1787 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 1746 0 0 0 0 0 0 0 0 0 0

1788 35 BulletConvexPointCloudShape const * 0 8576 35 BulletConvexPointCloudShape const * 35 BulletConvexPointCloudShape const * 0 0 1789 0 0 0 0 0 0 0 0 0 0

1789 33 BulletConvexPointCloudShape const 0 8832 33 BulletConvexPointCloudShape const 33 BulletConvexPointCloudShape const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1790 29 BulletConvexPointCloudShape * 0 8576 29 BulletConvexPointCloudShape * 29 BulletConvexPointCloudShape * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1791 27 BulletCylinderShape const * 0 8576 27 BulletCylinderShape const * 27 BulletCylinderShape const * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 25 BulletCylinderShape const 0 8832 25 BulletCylinderShape const 25 BulletCylinderShape const 0 0 1615 0 0 0 0 0 0 0 0 0 0

1793 21 BulletCylinderShape * 0 8576 21 BulletCylinderShape * 21 BulletCylinderShape * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1794 26 BulletFilterCallbackData * 0 8576 26 BulletFilterCallbackData * 26 BulletFilterCallbackData * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1795 32 BulletFilterCallbackData const * 0 8576 32 BulletFilterCallbackData const * 32 BulletFilterCallbackData const * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 30 BulletFilterCallbackData const 0 8832 30 BulletFilterCallbackData const 30 BulletFilterCallbackData const 0 0 1616 0 0 0 0 0 0 0 0 0 0

1797 34 BulletRotationalLimitMotor const * 0 8576 34 BulletRotationalLimitMotor const * 34 BulletRotationalLimitMotor const * 0 0 1798 0 0 0 0 0 0 0 0 0 0

1798 32 BulletRotationalLimitMotor const 0 8832 32 BulletRotationalLimitMotor const 32 BulletRotationalLimitMotor const 0 0 1617 0 0 0 0 0 0 0 0 0 0

1799 28 BulletRotationalLimitMotor * 0 8576 28 BulletRotationalLimitMotor * 28 BulletRotationalLimitMotor * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1800 37 BulletTranslationalLimitMotor const * 0 8576 37 BulletTranslationalLimitMotor const * 37 BulletTranslationalLimitMotor const * 0 0 1801 0 0 0 0 0 0 0 0 0 0

1801 35 BulletTranslationalLimitMotor const 0 8832 35 BulletTranslationalLimitMotor const 35 BulletTranslationalLimitMotor const 0 0 1618 0 0 0 0 0 0 0 0 0 0

1802 31 BulletTranslationalLimitMotor * 0 8576 31 BulletTranslationalLimitMotor * 31 BulletTranslationalLimitMotor * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1803 25 BulletGenericConstraint * 0 8576 25 BulletGenericConstraint * 25 BulletGenericConstraint * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1804 31 BulletGenericConstraint const * 0 8576 31 BulletGenericConstraint const * 31 BulletGenericConstraint const * 0 0 1805 0 0 0 0 0 0 0 0 0 0

1805 29 BulletGenericConstraint const 0 8832 29 BulletGenericConstraint const 29 BulletGenericConstraint const 0 0 1619 0 0 0 0 0 0 0 0 0 0

1806 30 BulletHeightfieldShape const * 0 8576 30 BulletHeightfieldShape const * 30 BulletHeightfieldShape const * 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 28 BulletHeightfieldShape const 0 8832 28 BulletHeightfieldShape const 28 BulletHeightfieldShape const 0 0 1620 0 0 0 0 0 0 0 0 0 0

1808 24 BulletHeightfieldShape * 0 8576 24 BulletHeightfieldShape * 24 BulletHeightfieldShape * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1809 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 1810 0 0 0 0 0 0 0 0 0 0

1810 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 1811 0 0 0 0 0 0 0 0 0 0

1811 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1516
/**
 * The name of this class derives from the fact that we originally implemented
 * it as a layer on top of the "pnm library", based on netpbm, which was built
 * to implement pbm, pgm, and pbm files, and is the underlying support of a
 * number of public-domain image file converters.  Nowadays we are no longer
 * derived directly from the pnm library, mainly to allow support of C++
 * iostreams instead of the C stdio FILE interface.
 *
 * Conceptually, a PNMImage is a two-dimensional array of xels, which are the
 * PNM-defined generic pixel type.  Each xel may have a red, green, and blue
 * component, or (if the image is grayscale) a gray component.  The image may
 * be read in, the individual xels manipulated, and written out again, or a
 * black image may be constructed from scratch.
 *
 * A PNMImage has a color space and a maxval, the combination of which defines
 * how a floating-point linear color value is encoded as an integer value in
 * memory.  The functions ending in _val operate on encoded colors, whereas
 * the regular ones work with linear floating-point values.  All operations
 * are color space correct unless otherwise specified.
 *
 * The image is of size XSize() by YSize() xels, numbered from top to bottom,
 * left to right, beginning at zero.
 *
 * Files can be specified by filename, or by an iostream pointer.  The
 * filename "-" refers to stdin or stdout.
 *
 * This class is not inherently thread-safe; use it from a single thread or
 * protect access using a mutex.
 */

1812 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1813 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1814 14 BulletHelper * 0 8576 14 BulletHelper * 14 BulletHelper * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1815 20 BulletHelper const * 0 8576 20 BulletHelper const * 20 BulletHelper const * 0 0 1816 0 0 0 0 0 0 0 0 0 0

1816 18 BulletHelper const 0 8832 18 BulletHelper const 18 BulletHelper const 0 0 1621 0 0 0 0 0 0 0 0 0 0

1817 18 NodePathCollection 0 2048 18 NodePathCollection 18 NodePathCollection 0 0 0 0 0 0 0 0 0 0 0 0 178
/**
 * This is a set of zero or more NodePaths.  It's handy for returning from
 * functions that need to return multiple NodePaths (for instance,
 * NodePaths::get_children).
 */

1818 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1819 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1820 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1821 12 InternalName 0 16779264 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 514
/**
 * Encodes a string name in a hash table, mapping it to a pointer.  This is
 * used to tokenify names so they may be used efficiently in low-level Panda
 * structures, for instance to differentiate the multiple sets of texture
 * coordinates that might be stored on a Geom.
 *
 * InternalNames are hierarchical, with the '.' used by convention as a
 * separator character.  You can construct a single InternalName as a
 * composition of one or more other names, or by giving it a source string
 * directly.
 */

1822 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 1821 0 0 0 0 0 0 0 0 0 0

1823 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1824 0 0 0 0 0 0 0 0 0 0

1824 16 GeomVertexFormat 0 16779264 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 0 0 0 0 0 0 0 0 0 924
/**
 * This class defines the physical layout of the vertex data stored within a
 * Geom.  The layout consists of a list of named columns, each of which has a
 * numeric type and a size.
 *
 * The columns are typically interleaved within a single array, but they may
 * also be distributed among multiple different arrays; at the extreme, each
 * column may be alone within its own array (which amounts to a parallel-array
 * definition).
 *
 * Thus, a GeomVertexFormat is really a list of GeomVertexArrayFormats, each
 * of which contains a list of columns.  However, a particular column name
 * should not appear more than once in the format, even between different
 * arrays.
 *
 * There are a handful of standard pre-defined GeomVertexFormat objects, or
 * you may define your own as needed.  You may record any combination of
 * standard and/or user-defined columns in your custom GeomVertexFormat
 * constructions.
 */

1825 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1826 23 BulletHingeConstraint * 0 8576 23 BulletHingeConstraint * 23 BulletHingeConstraint * 0 0 1623 0 0 0 0 0 0 0 0 0 0

1827 29 BulletHingeConstraint const * 0 8576 29 BulletHingeConstraint const * 29 BulletHingeConstraint const * 0 0 1828 0 0 0 0 0 0 0 0 0 0

1828 27 BulletHingeConstraint const 0 8832 27 BulletHingeConstraint const 27 BulletHingeConstraint const 0 0 1623 0 0 0 0 0 0 0 0 0 0

1829 31 BulletMinkowskiSumShape const * 0 8576 31 BulletMinkowskiSumShape const * 31 BulletMinkowskiSumShape const * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1830 29 BulletMinkowskiSumShape const 0 8832 29 BulletMinkowskiSumShape const 29 BulletMinkowskiSumShape const 0 0 1624 0 0 0 0 0 0 0 0 0 0

1831 25 BulletMinkowskiSumShape * 0 8576 25 BulletMinkowskiSumShape * 25 BulletMinkowskiSumShape * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1832 30 BulletMultiSphereShape const * 0 8576 30 BulletMultiSphereShape const * 30 BulletMultiSphereShape const * 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 28 BulletMultiSphereShape const 0 8832 28 BulletMultiSphereShape const 28 BulletMultiSphereShape const 0 0 1627 0 0 0 0 0 0 0 0 0 0

1834 24 BulletMultiSphereShape * 0 8576 24 BulletMultiSphereShape * 24 BulletMultiSphereShape * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1835 20 PTA_stdfloat const * 0 8576 20 PTA_stdfloat const * 20 PTA_stdfloat const * 0 0 1836 0 0 0 0 0 0 0 0 0 0

1836 18 PTA_stdfloat const 0 8832 18 PTA_stdfloat const 18 PTA_stdfloat const 0 0 1837 0 0 0 0 0 0 0 0 0 0

1837 12 PTA_stdfloat 0 2105344 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1838 0 0 0 0 0 0 0 0 0 0

1838 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1839 0 0 0 0 0 0 0 0 0 0

1839 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1840 24 BulletPlaneShape const * 0 8576 24 BulletPlaneShape const * 24 BulletPlaneShape const * 0 0 1841 0 0 0 0 0 0 0 0 0 0

1841 22 BulletPlaneShape const 0 8832 22 BulletPlaneShape const 22 BulletPlaneShape const 0 0 1628 0 0 0 0 0 0 0 0 0 0

1842 18 BulletPlaneShape * 0 8576 18 BulletPlaneShape * 18 BulletPlaneShape * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1843 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 1844 0 0 0 0 0 0 0 0 0 0

1844 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 1845 0 0 0 0 0 0 0 0 0 0

1845 14 CollisionPlane 0 2048 14 CollisionPlane 14 CollisionPlane 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1846 24 BulletSliderConstraint * 0 8576 24 BulletSliderConstraint * 24 BulletSliderConstraint * 0 0 1629 0 0 0 0 0 0 0 0 0 0

1847 30 BulletSliderConstraint const * 0 8576 30 BulletSliderConstraint const * 30 BulletSliderConstraint const * 0 0 1848 0 0 0 0 0 0 0 0 0 0

1848 28 BulletSliderConstraint const 0 8832 28 BulletSliderConstraint const 28 BulletSliderConstraint const 0 0 1629 0 0 0 0 0 0 0 0 0 0

1849 29 BulletSoftBodyControl const * 0 8576 29 BulletSoftBodyControl const * 29 BulletSoftBodyControl const * 0 0 1850 0 0 0 0 0 0 0 0 0 0

1850 27 BulletSoftBodyControl const 0 8832 27 BulletSoftBodyControl const 27 BulletSoftBodyControl const 0 0 1630 0 0 0 0 0 0 0 0 0 0

1851 10 IControl * 0 8576 30 btSoftBody::AJoint::IControl * 30 btSoftBody::AJoint::IControl * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1852 27 BulletSoftBodyShape const * 0 8576 27 BulletSoftBodyShape const * 27 BulletSoftBodyShape const * 0 0 1853 0 0 0 0 0 0 0 0 0 0

1853 25 BulletSoftBodyShape const 0 8832 25 BulletSoftBodyShape const 25 BulletSoftBodyShape const 0 0 1634 0 0 0 0 0 0 0 0 0 0

1854 25 BulletSphereShape const * 0 8576 25 BulletSphereShape const * 25 BulletSphereShape const * 0 0 1855 0 0 0 0 0 0 0 0 0 0

1855 23 BulletSphereShape const 0 8832 23 BulletSphereShape const 23 BulletSphereShape const 0 0 1635 0 0 0 0 0 0 0 0 0 0

1856 19 BulletSphereShape * 0 8576 19 BulletSphereShape * 19 BulletSphereShape * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1857 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 1858 0 0 0 0 0 0 0 0 0 0

1858 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 1859 0 0 0 0 0 0 0 0 0 0

1859 15 CollisionSphere 0 2048 15 CollisionSphere 15 CollisionSphere 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

1860 27 BulletSphericalConstraint * 0 8576 27 BulletSphericalConstraint * 27 BulletSphericalConstraint * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1861 33 BulletSphericalConstraint const * 0 8576 33 BulletSphericalConstraint const * 33 BulletSphericalConstraint const * 0 0 1862 0 0 0 0 0 0 0 0 0 0

1862 31 BulletSphericalConstraint const 0 8832 31 BulletSphericalConstraint const 31 BulletSphericalConstraint const 0 0 1636 0 0 0 0 0 0 0 0 0 0

1863 8 btScalar 0 2105344 8 btScalar 8 btScalar 0 0 1864 0 0 0 0 0 0 0 0 0 0

1864 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1865 24 BulletTickCallbackData * 0 8576 24 BulletTickCallbackData * 24 BulletTickCallbackData * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1866 30 BulletTickCallbackData const * 0 8576 30 BulletTickCallbackData const * 30 BulletTickCallbackData const * 0 0 1867 0 0 0 0 0 0 0 0 0 0

1867 28 BulletTickCallbackData const 0 8832 28 BulletTickCallbackData const 28 BulletTickCallbackData const 0 0 1637 0 0 0 0 0 0 0 0 0 0

1868 20 BulletTriangleMesh * 0 8576 20 BulletTriangleMesh * 20 BulletTriangleMesh * 0 0 1638 0 0 0 0 0 0 0 0 0 0

1869 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 1870 0 0 0 0 0 0 0 0 0 0

1870 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 1750 0 0 0 0 0 0 0 0 0 0

1871 26 BulletTriangleMesh const * 0 8576 26 BulletTriangleMesh const * 26 BulletTriangleMesh const * 0 0 1872 0 0 0 0 0 0 0 0 0 0

1872 24 BulletTriangleMesh const 0 8832 24 BulletTriangleMesh const 24 BulletTriangleMesh const 0 0 1638 0 0 0 0 0 0 0 0 0 0

1873 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1874 0 0 0 0 0 0 0 0 0 0

1874 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1875 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1876 0 0 0 0 0 0 0 0 0 0

1876 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1877 25 BulletTriangleMeshShape * 0 8576 25 BulletTriangleMeshShape * 25 BulletTriangleMeshShape * 0 0 1640 0 0 0 0 0 0 0 0 0 0

1878 31 BulletTriangleMeshShape const * 0 8576 31 BulletTriangleMeshShape const * 31 BulletTriangleMeshShape const * 0 0 1879 0 0 0 0 0 0 0 0 0 0

1879 29 BulletTriangleMeshShape const 0 8832 29 BulletTriangleMeshShape const 29 BulletTriangleMeshShape const 0 0 1640 0 0 0 0 0 0 0 0 0 0

0
298
1880 4 node 0 2 0 767 0 0 0 0 0 18 BulletRayHit::node 0

1881 7 hit_pos 0 2 0 768 0 0 0 0 0 21 BulletRayHit::hit_pos 0

1882 10 hit_normal 0 2 0 769 0 0 0 0 0 24 BulletRayHit::hit_normal 0

1883 12 hit_fraction 0 2 0 770 0 0 0 0 0 26 BulletRayHit::hit_fraction 0

1884 10 shape_part 0 2 0 771 0 0 0 0 0 24 BulletRayHit::shape_part 0

1885 14 triangle_index 0 2 0 772 0 0 0 0 0 28 BulletRayHit::triangle_index 0

1886 8 from_pos 0 2 0 778 0 0 0 0 0 32 BulletAllHitsRayResult::from_pos 0

1887 6 to_pos 0 2 0 779 0 0 0 0 0 30 BulletAllHitsRayResult::to_pos 0

1888 20 closest_hit_fraction 0 2 0 781 0 0 0 0 0 44 BulletAllHitsRayResult::closest_hit_fraction 0

1889 4 hits 0 66 0 784 0 0 0 0 782 28 BulletAllHitsRayResult::hits 0

1890 10 polyhedral 0 2 0 786 0 0 0 0 0 23 BulletShape::polyhedral 0

1891 6 convex 0 2 0 787 0 0 0 0 0 19 BulletShape::convex 0

1892 9 convex_2d 0 2 0 788 0 0 0 0 0 22 BulletShape::convex_2d 0

1893 7 concave 0 2 0 789 0 0 0 0 0 20 BulletShape::concave 0

1894 8 infinite 0 2 0 790 0 0 0 0 0 21 BulletShape::infinite 0

1895 10 non_moving 0 2 0 791 0 0 0 0 0 23 BulletShape::non_moving 0

1896 9 soft_body 0 2 0 792 0 0 0 0 0 22 BulletShape::soft_body 0

1897 6 margin 0 6 0 795 793 0 0 0 0 19 BulletShape::margin 0

1898 4 name 0 2 0 794 0 0 0 0 0 17 BulletShape::name 0

1899 12 shape_bounds 0 2 0 796 0 0 0 0 0 25 BulletShape::shape_bounds 0

1900 6 shapes 0 66 0 843 0 0 0 0 802 22 BulletBodyNode::shapes 0

1901 9 shape_pos 0 66 0 844 0 0 0 0 802 25 BulletBodyNode::shape_pos 0

1902 9 shape_mat 0 66 0 845 0 0 0 0 802 25 BulletBodyNode::shape_mat 0

1903 15 shape_transform 0 66 0 846 0 0 0 0 802 31 BulletBodyNode::shape_transform 0

1904 12 shape_bounds 0 2 0 807 0 0 0 0 0 28 BulletBodyNode::shape_bounds 0

1905 6 static 0 6 0 809 811 0 0 0 0 22 BulletBodyNode::static 23
// Static and kinematic

1906 9 kinematic 0 6 0 810 812 0 0 0 0 25 BulletBodyNode::kinematic 0

1907 22 collision_notification 0 6 0 815 814 0 0 0 0 38 BulletBodyNode::collision_notification 0

1908 18 collision_response 0 6 0 817 816 0 0 0 0 34 BulletBodyNode::collision_response 0

1909 16 contact_response 0 2 0 819 0 0 0 0 0 32 BulletBodyNode::contact_response 0

1910 28 contact_processing_threshold 0 6 0 820 821 0 0 0 0 44 BulletBodyNode::contact_processing_threshold 0

1911 6 active 0 6 0 822 824 0 0 0 0 22 BulletBodyNode::active 15
// Deactivation

1912 17 deactivation_time 0 6 0 826 825 0 0 0 0 33 BulletBodyNode::deactivation_time 0

1913 20 deactivation_enabled 0 6 0 828 827 0 0 0 0 36 BulletBodyNode::deactivation_enabled 0

1914 13 debug_enabled 0 6 0 830 829 0 0 0 0 29 BulletBodyNode::debug_enabled 0

1915 11 restitution 0 6 0 831 832 0 0 0 0 27 BulletBodyNode::restitution 27
// Friction and Restitution

1916 8 friction 0 6 0 833 834 0 0 0 0 24 BulletBodyNode::friction 0

1917 20 anisotropic_friction 0 6 0 837 836 0 0 0 0 36 BulletBodyNode::anisotropic_friction 0

1918 23 ccd_swept_sphere_radius 0 6 0 838 840 0 0 0 0 39 BulletBodyNode::ccd_swept_sphere_radius 6
// CCD

1919 20 ccd_motion_threshold 0 6 0 839 841 0 0 0 0 36 BulletBodyNode::ccd_motion_threshold 0

1920 24 half_extents_with_margin 0 2 0 851 0 0 0 0 0 40 BulletBoxShape::half_extents_with_margin 0

1921 27 half_extents_without_margin 0 2 0 850 0 0 0 0 0 43 BulletBoxShape::half_extents_without_margin 0

1922 6 radius 0 2 0 856 0 0 0 0 0 26 BulletCapsuleShape::radius 0

1923 11 half_height 0 2 0 857 0 0 0 0 0 31 BulletCapsuleShape::half_height 0

1924 5 shape 0 2 0 862 0 0 0 0 0 36 BulletCharacterControllerNode::shape 0

1925 7 gravity 0 6 0 864 863 0 0 0 0 38 BulletCharacterControllerNode::gravity 0

1926 9 max_slope 0 6 0 869 868 0 0 0 0 40 BulletCharacterControllerNode::max_slope 0

1927 9 on_ground 0 2 0 871 0 0 0 0 0 40 BulletCharacterControllerNode::on_ground 0

1928 8 from_pos 0 2 0 878 0 0 0 0 0 35 BulletClosestHitRayResult::from_pos 0

1929 6 to_pos 0 2 0 879 0 0 0 0 0 33 BulletClosestHitRayResult::to_pos 0

1930 4 node 0 2 0 881 0 0 0 0 0 31 BulletClosestHitRayResult::node 0

1931 7 hit_pos 0 2 0 882 0 0 0 0 0 34 BulletClosestHitRayResult::hit_pos 0

1932 10 hit_normal 0 2 0 883 0 0 0 0 0 37 BulletClosestHitRayResult::hit_normal 0

1933 12 hit_fraction 0 2 0 884 0 0 0 0 0 39 BulletClosestHitRayResult::hit_fraction 0

1934 10 shape_part 0 2 0 885 0 0 0 0 0 37 BulletClosestHitRayResult::shape_part 0

1935 14 triangle_index 0 2 0 886 0 0 0 0 0 41 BulletClosestHitRayResult::triangle_index 0

1936 8 from_pos 0 2 0 892 0 0 0 0 0 37 BulletClosestHitSweepResult::from_pos 0

1937 6 to_pos 0 2 0 893 0 0 0 0 0 35 BulletClosestHitSweepResult::to_pos 0

1938 4 node 0 2 0 895 0 0 0 0 0 33 BulletClosestHitSweepResult::node 0

1939 7 hit_pos 0 2 0 896 0 0 0 0 0 36 BulletClosestHitSweepResult::hit_pos 0

1940 10 hit_normal 0 2 0 897 0 0 0 0 0 39 BulletClosestHitSweepResult::hit_normal 0

1941 12 hit_fraction 0 2 0 898 0 0 0 0 0 41 BulletClosestHitSweepResult::hit_fraction 0

1942 6 radius 0 2 0 903 0 0 0 0 0 23 BulletConeShape::radius 0

1943 6 height 0 2 0 904 0 0 0 0 0 23 BulletConeShape::height 0

1944 12 rigid_body_a 0 2 0 906 0 0 0 0 0 30 BulletConstraint::rigid_body_a 0

1945 4 mass 0 6 0 920 919 0 0 0 0 25 BulletRigidBodyNode::mass 0

1946 8 inv_mass 0 2 0 921 0 0 0 0 0 29 BulletRigidBodyNode::inv_mass 0

1947 7 inertia 0 6 0 923 922 0 0 0 0 28 BulletRigidBodyNode::inertia 0

1948 22 inv_inertia_diag_local 0 2 0 924 0 0 0 0 0 43 BulletRigidBodyNode::inv_inertia_diag_local 0

1949 24 inv_inertia_tensor_world 0 2 0 925 0 0 0 0 0 45 BulletRigidBodyNode::inv_inertia_tensor_world 0

1950 15 linear_velocity 0 6 0 926 928 0 0 0 0 36 BulletRigidBodyNode::linear_velocity 11
// Velocity

1951 16 angular_velocity 0 6 0 927 929 0 0 0 0 37 BulletRigidBodyNode::angular_velocity 0

1952 14 linear_damping 0 6 0 930 932 0 0 0 0 35 BulletRigidBodyNode::linear_damping 10
// Damping

1953 15 angular_damping 0 6 0 931 933 0 0 0 0 36 BulletRigidBodyNode::angular_damping 0

1954 11 total_force 0 2 0 941 0 0 0 0 0 32 BulletRigidBodyNode::total_force 0

1955 12 total_torque 0 2 0 942 0 0 0 0 0 33 BulletRigidBodyNode::total_torque 0

1956 22 linear_sleep_threshold 0 6 0 943 945 0 0 0 0 43 BulletRigidBodyNode::linear_sleep_threshold 26
// Deactivation thresholds

1957 23 angular_sleep_threshold 0 6 0 944 946 0 0 0 0 44 BulletRigidBodyNode::angular_sleep_threshold 0

1958 7 gravity 0 6 0 948 947 0 0 0 0 28 BulletRigidBodyNode::gravity 0

1959 13 linear_factor 0 6 0 949 951 0 0 0 0 34 BulletRigidBodyNode::linear_factor 20
// Restrict movement

1960 14 angular_factor 0 6 0 950 952 0 0 0 0 35 BulletRigidBodyNode::angular_factor 0

1961 12 rigid_body_b 0 2 0 907 0 0 0 0 0 30 BulletConstraint::rigid_body_b 0

1962 15 debug_draw_size 0 6 0 910 909 0 0 0 0 33 BulletConstraint::debug_draw_size 0

1963 15 applied_impulse 0 2 0 911 0 0 0 0 0 33 BulletConstraint::applied_impulse 0

1964 18 breaking_threshold 0 6 0 913 912 0 0 0 0 36 BulletConstraint::breaking_threshold 0

1965 7 enabled 0 6 0 915 914 0 0 0 0 25 BulletConstraint::enabled 0

1966 13 fix_threshold 0 6 0 959 960 0 0 0 0 40 BulletConeTwistConstraint::fix_threshold 0

1967 7 frame_a 0 2 0 967 0 0 0 0 0 34 BulletConeTwistConstraint::frame_a 0

1968 7 frame_b 0 2 0 968 0 0 0 0 0 34 BulletConeTwistConstraint::frame_b 0

1969 9 life_time 0 2 0 971 0 0 0 0 0 30 BulletManifoldPoint::life_time 0

1970 8 distance 0 2 0 972 0 0 0 0 0 29 BulletManifoldPoint::distance 0

1971 15 applied_impulse 0 6 0 973 990 0 0 0 0 36 BulletManifoldPoint::applied_impulse 0

1972 19 position_world_on_a 0 2 0 974 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_a 0

1973 19 position_world_on_b 0 2 0 975 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_b 0

1974 17 normal_world_on_b 0 2 0 976 0 0 0 0 0 38 BulletManifoldPoint::normal_world_on_b 0

1975 13 local_point_a 0 2 0 977 0 0 0 0 0 34 BulletManifoldPoint::local_point_a 0

1976 13 local_point_b 0 2 0 978 0 0 0 0 0 34 BulletManifoldPoint::local_point_b 0

1977 8 part_id0 0 2 0 979 0 0 0 0 0 29 BulletManifoldPoint::part_id0 0

1978 8 part_id1 0 2 0 980 0 0 0 0 0 29 BulletManifoldPoint::part_id1 0

1979 6 index0 0 2 0 981 0 0 0 0 0 27 BulletManifoldPoint::index0 0

1980 6 index1 0 2 0 982 0 0 0 0 0 27 BulletManifoldPoint::index1 0

1981 28 lateral_friction_initialized 0 6 0 995 983 0 0 0 0 49 BulletManifoldPoint::lateral_friction_initialized 0

1982 21 lateral_friction_dir1 0 6 0 996 984 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir1 0

1983 21 lateral_friction_dir2 0 6 0 997 985 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir2 0

1984 15 contact_motion1 0 6 0 998 986 0 0 0 0 36 BulletManifoldPoint::contact_motion1 0

1985 15 contact_motion2 0 6 0 999 987 0 0 0 0 36 BulletManifoldPoint::contact_motion2 0

1986 17 combined_friction 0 6 0 1000 988 0 0 0 0 38 BulletManifoldPoint::combined_friction 0

1987 20 combined_restitution 0 6 0 1001 989 0 0 0 0 41 BulletManifoldPoint::combined_restitution 0

1988 24 applied_impulse_lateral1 0 6 0 1002 991 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral1 0

1989 24 applied_impulse_lateral2 0 6 0 1003 992 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral2 0

1990 12 contact_cfm1 0 6 0 1004 993 0 0 0 0 33 BulletManifoldPoint::contact_cfm1 0

1991 12 contact_cfm2 0 6 0 1005 994 0 0 0 0 33 BulletManifoldPoint::contact_cfm2 0

1992 8 manifold 0 2 0 1007 0 0 0 0 0 35 BulletContactCallbackData::manifold 0

1993 5 node0 0 2 0 1008 0 0 0 0 0 32 BulletContactCallbackData::node0 0

1994 5 node1 0 2 0 1009 0 0 0 0 0 32 BulletContactCallbackData::node1 0

1995 8 part_id0 0 2 0 1010 0 0 0 0 0 35 BulletContactCallbackData::part_id0 0

1996 8 part_id1 0 2 0 1011 0 0 0 0 0 35 BulletContactCallbackData::part_id1 0

1997 6 index0 0 2 0 1012 0 0 0 0 0 33 BulletContactCallbackData::index0 0

1998 6 index1 0 2 0 1013 0 0 0 0 0 33 BulletContactCallbackData::index1 0

1999 14 manifold_point 0 2 0 1015 0 0 0 0 0 29 BulletContact::manifold_point 0

2000 5 node0 0 2 0 1016 0 0 0 0 0 20 BulletContact::node0 0

2001 5 node1 0 2 0 1017 0 0 0 0 0 20 BulletContact::node1 0

2002 4 idx0 0 2 0 1018 0 0 0 0 0 19 BulletContact::idx0 0

2003 4 idx1 0 2 0 1019 0 0 0 0 0 19 BulletContact::idx1 0

2004 8 part_id0 0 2 0 1020 0 0 0 0 0 23 BulletContact::part_id0 0

2005 8 part_id1 0 2 0 1021 0 0 0 0 0 23 BulletContact::part_id1 0

2006 8 contacts 0 66 0 1027 0 0 0 0 1025 29 BulletContactResult::contacts 0

2007 9 wireframe 0 6 0 1035 1031 0 0 0 0 26 BulletDebugNode::wireframe 0

2008 11 constraints 0 6 0 1036 1032 0 0 0 0 28 BulletDebugNode::constraints 0

2009 14 bounding_boxes 0 6 0 1037 1033 0 0 0 0 31 BulletDebugNode::bounding_boxes 0

2010 7 normals 0 6 0 1038 1034 0 0 0 0 24 BulletDebugNode::normals 0

2011 17 overlapping_nodes 0 66 0 1043 0 0 0 0 1041 34 BulletGhostNode::overlapping_nodes 0

2012 3 pos 0 2 0 1047 0 0 0 0 0 30 BulletSoftBodyNodeElement::pos 0

2013 8 velocity 0 2 0 1048 0 0 0 0 0 35 BulletSoftBodyNodeElement::velocity 0

2014 6 normal 0 2 0 1049 0 0 0 0 0 33 BulletSoftBodyNodeElement::normal 0

2015 8 inv_mass 0 2 0 1050 0 0 0 0 0 35 BulletSoftBodyNodeElement::inv_mass 0

2016 4 area 0 2 0 1051 0 0 0 0 0 31 BulletSoftBodyNodeElement::area 0

2017 8 attached 0 2 0 1052 0 0 0 0 0 35 BulletSoftBodyNodeElement::attached 0

2018 3 cfg 0 2 0 1054 0 0 0 0 0 23 BulletSoftBodyNode::cfg 0

2019 10 aero_model 0 6 0 1103 1102 0 0 0 0 32 BulletSoftBodyConfig::aero_model 0

2020 28 velocities_correction_factor 0 6 0 1128 1104 0 0 0 0 50 BulletSoftBodyConfig::velocities_correction_factor 0

2021 19 damping_coefficient 0 6 0 1129 1105 0 0 0 0 41 BulletSoftBodyConfig::damping_coefficient 0

2022 16 drag_coefficient 0 6 0 1130 1106 0 0 0 0 38 BulletSoftBodyConfig::drag_coefficient 0

2023 16 lift_coefficient 0 6 0 1131 1107 0 0 0 0 38 BulletSoftBodyConfig::lift_coefficient 0

2024 20 pressure_coefficient 0 6 0 1132 1108 0 0 0 0 42 BulletSoftBodyConfig::pressure_coefficient 0

2025 31 volume_conservation_coefficient 0 6 0 1133 1109 0 0 0 0 53 BulletSoftBodyConfig::volume_conservation_coefficient 0

2026 28 dynamic_friction_coefficient 0 6 0 1134 1110 0 0 0 0 50 BulletSoftBodyConfig::dynamic_friction_coefficient 0

2027 25 pose_matching_coefficient 0 6 0 1135 1111 0 0 0 0 47 BulletSoftBodyConfig::pose_matching_coefficient 0

2028 23 rigid_contacts_hardness 0 6 0 1136 1112 0 0 0 0 45 BulletSoftBodyConfig::rigid_contacts_hardness 0

2029 25 kinetic_contacts_hardness 0 6 0 1137 1113 0 0 0 0 47 BulletSoftBodyConfig::kinetic_contacts_hardness 0

2030 22 soft_contacts_hardness 0 6 0 1138 1114 0 0 0 0 44 BulletSoftBodyConfig::soft_contacts_hardness 0

2031 16 anchors_hardness 0 6 0 1139 1115 0 0 0 0 38 BulletSoftBodyConfig::anchors_hardness 0

2032 22 soft_vs_rigid_hardness 0 6 0 1140 1116 0 0 0 0 44 BulletSoftBodyConfig::soft_vs_rigid_hardness 0

2033 24 soft_vs_kinetic_hardness 0 6 0 1141 1117 0 0 0 0 46 BulletSoftBodyConfig::soft_vs_kinetic_hardness 0

2034 21 soft_vs_soft_hardness 0 6 0 1142 1118 0 0 0 0 43 BulletSoftBodyConfig::soft_vs_soft_hardness 0

2035 27 soft_vs_rigid_impulse_split 0 6 0 1143 1119 0 0 0 0 49 BulletSoftBodyConfig::soft_vs_rigid_impulse_split 0

2036 29 soft_vs_kinetic_impulse_split 0 6 0 1144 1120 0 0 0 0 51 BulletSoftBodyConfig::soft_vs_kinetic_impulse_split 0

2037 26 soft_vs_soft_impulse_split 0 6 0 1145 1121 0 0 0 0 48 BulletSoftBodyConfig::soft_vs_soft_impulse_split 0

2038 9 maxvolume 0 6 0 1146 1122 0 0 0 0 31 BulletSoftBodyConfig::maxvolume 0

2039 9 timescale 0 6 0 1147 1123 0 0 0 0 31 BulletSoftBodyConfig::timescale 0

2040 27 positions_solver_iterations 0 6 0 1148 1124 0 0 0 0 49 BulletSoftBodyConfig::positions_solver_iterations 0

2041 28 velocities_solver_iterations 0 6 0 1149 1125 0 0 0 0 50 BulletSoftBodyConfig::velocities_solver_iterations 0

2042 23 drift_solver_iterations 0 6 0 1150 1126 0 0 0 0 45 BulletSoftBodyConfig::drift_solver_iterations 0

2043 25 cluster_solver_iterations 0 6 0 1151 1127 0 0 0 0 47 BulletSoftBodyConfig::cluster_solver_iterations 0

2044 10 world_info 0 2 0 1055 0 0 0 0 0 30 BulletSoftBodyNode::world_info 0

2045 11 air_density 0 6 0 1159 1154 0 0 0 0 36 BulletSoftBodyWorldInfo::air_density 0

2046 13 water_density 0 6 0 1160 1155 0 0 0 0 38 BulletSoftBodyWorldInfo::water_density 0

2047 12 water_offset 0 6 0 1161 1156 0 0 0 0 37 BulletSoftBodyWorldInfo::water_offset 0

2048 12 water_normal 0 6 0 1162 1157 0 0 0 0 37 BulletSoftBodyWorldInfo::water_normal 0

2049 7 gravity 0 6 0 1163 1158 0 0 0 0 32 BulletSoftBodyWorldInfo::gravity 0

2050 13 wind_velocity 0 6 0 1070 1069 0 0 0 0 33 BulletSoftBodyNode::wind_velocity 0

2051 4 aabb 0 2 0 1072 0 0 0 0 0 24 BulletSoftBodyNode::aabb 0

2052 12 num_clusters 0 2 0 1076 0 0 0 0 0 32 BulletSoftBodyNode::num_clusters 0

2053 9 materials 0 66 0 1175 0 0 0 0 1087 29 BulletSoftBodyNode::materials 0

2054 16 linear_stiffness 0 6 0 1168 1169 0 0 0 0 40 BulletSoftBodyMaterial::linear_stiffness 0

2055 17 angular_stiffness 0 6 0 1170 1171 0 0 0 0 41 BulletSoftBodyMaterial::angular_stiffness 0

2056 19 volume_preservation 0 6 0 1172 1173 0 0 0 0 43 BulletSoftBodyMaterial::volume_preservation 0

2057 5 nodes 0 66 0 1176 0 0 0 0 1090 25 BulletSoftBodyNode::nodes 0

2058 20 suspension_stiffness 0 6 0 1184 1178 0 0 0 0 41 BulletVehicleTuning::suspension_stiffness 0

2059 22 suspension_compression 0 6 0 1185 1179 0 0 0 0 43 BulletVehicleTuning::suspension_compression 0

2060 18 suspension_damping 0 6 0 1186 1180 0 0 0 0 39 BulletVehicleTuning::suspension_damping 0

2061 24 max_suspension_travel_cm 0 6 0 1187 1181 0 0 0 0 45 BulletVehicleTuning::max_suspension_travel_cm 0

2062 13 friction_slip 0 6 0 1188 1182 0 0 0 0 34 BulletVehicleTuning::friction_slip 0

2063 20 max_suspension_force 0 6 0 1189 1183 0 0 0 0 41 BulletVehicleTuning::max_suspension_force 0

2064 7 chassis 0 2 0 1195 0 0 0 0 0 22 BulletVehicle::chassis 0

2065 21 current_speed_km_hour 0 2 0 1196 0 0 0 0 0 36 BulletVehicle::current_speed_km_hour 0

2066 14 forward_vector 0 2 0 1198 0 0 0 0 0 29 BulletVehicle::forward_vector 0

2067 6 wheels 0 66 0 1265 0 0 0 0 1202 21 BulletVehicle::wheels 0

2068 12 raycast_info 0 2 0 1253 0 0 0 0 0 25 BulletWheel::raycast_info 0

2069 10 in_contact 0 2 0 1255 0 0 0 0 0 34 BulletWheelRaycastInfo::in_contact 0

2070 17 suspension_length 0 2 0 1256 0 0 0 0 0 41 BulletWheelRaycastInfo::suspension_length 0

2071 17 contact_normal_ws 0 2 0 1257 0 0 0 0 0 41 BulletWheelRaycastInfo::contact_normal_ws 0

2072 18 wheel_direction_ws 0 2 0 1258 0 0 0 0 0 42 BulletWheelRaycastInfo::wheel_direction_ws 0

2073 13 wheel_axle_ws 0 2 0 1259 0 0 0 0 0 37 BulletWheelRaycastInfo::wheel_axle_ws 0

2074 16 contact_point_ws 0 2 0 1260 0 0 0 0 0 40 BulletWheelRaycastInfo::contact_point_ws 0

2075 13 hard_point_ws 0 2 0 1261 0 0 0 0 0 37 BulletWheelRaycastInfo::hard_point_ws 0

2076 13 ground_object 0 2 0 1262 0 0 0 0 0 37 BulletWheelRaycastInfo::ground_object 0

2077 22 suspension_rest_length 0 2 0 1229 0 0 0 0 0 35 BulletWheel::suspension_rest_length 0

2078 20 suspension_stiffness 0 6 0 1230 1206 0 0 0 0 33 BulletWheel::suspension_stiffness 0

2079 24 max_suspension_travel_cm 0 6 0 1231 1207 0 0 0 0 37 BulletWheel::max_suspension_travel_cm 0

2080 13 friction_slip 0 6 0 1232 1208 0 0 0 0 26 BulletWheel::friction_slip 0

2081 20 max_suspension_force 0 6 0 1233 1209 0 0 0 0 33 BulletWheel::max_suspension_force 0

2082 26 wheels_damping_compression 0 6 0 1234 1210 0 0 0 0 39 BulletWheel::wheels_damping_compression 0

2083 25 wheels_damping_relaxation 0 6 0 1235 1211 0 0 0 0 38 BulletWheel::wheels_damping_relaxation 0

2084 14 roll_influence 0 6 0 1236 1212 0 0 0 0 27 BulletWheel::roll_influence 0

2085 12 wheel_radius 0 6 0 1237 1213 0 0 0 0 25 BulletWheel::wheel_radius 0

2086 8 steering 0 6 0 1238 1214 0 0 0 0 21 BulletWheel::steering 0

2087 8 rotation 0 6 0 1239 1215 0 0 0 0 21 BulletWheel::rotation 0

2088 14 delta_rotation 0 6 0 1240 1216 0 0 0 0 27 BulletWheel::delta_rotation 0

2089 12 engine_force 0 6 0 1241 1217 0 0 0 0 25 BulletWheel::engine_force 0

2090 5 brake 0 6 0 1242 1218 0 0 0 0 18 BulletWheel::brake 0

2091 9 skid_info 0 6 0 1243 1219 0 0 0 0 22 BulletWheel::skid_info 0

2092 23 wheels_suspension_force 0 6 0 1244 1220 0 0 0 0 36 BulletWheel::wheels_suspension_force 0

2093 28 suspension_relative_velocity 0 6 0 1245 1221 0 0 0 0 41 BulletWheel::suspension_relative_velocity 0

2094 31 clipped_inv_connection_point_cs 0 6 0 1246 1222 0 0 0 0 44 BulletWheel::clipped_inv_connection_point_cs 0

2095 27 chassis_connection_point_cs 0 6 0 1247 1223 0 0 0 0 40 BulletWheel::chassis_connection_point_cs 0

2096 18 wheel_direction_cs 0 6 0 1248 1224 0 0 0 0 31 BulletWheel::wheel_direction_cs 0

2097 13 wheel_axle_cs 0 6 0 1249 1225 0 0 0 0 26 BulletWheel::wheel_axle_cs 0

2098 15 world_transform 0 6 0 1250 1226 0 0 0 0 28 BulletWheel::world_transform 0

2099 11 front_wheel 0 6 0 1251 1227 0 0 0 0 24 BulletWheel::front_wheel 0

2100 4 node 0 6 0 1252 1228 0 0 0 0 17 BulletWheel::node 0

2101 6 tuning 0 2 0 1204 0 0 0 0 0 21 BulletVehicle::tuning 9
// Tuning

2102 7 gravity 0 6 0 1269 1268 0 0 0 0 20 BulletWorld::gravity 0

2103 10 world_info 0 2 0 1271 0 0 0 0 0 23 BulletWorld::world_info 0

2104 10 debug_node 0 30 0 1274 1272 1275 1273 0 0 23 BulletWorld::debug_node 0

2105 6 ghosts 0 66 0 1309 0 0 0 0 1279 19 BulletWorld::ghosts 0

2106 12 rigid_bodies 0 66 0 1310 0 0 0 0 1281 25 BulletWorld::rigid_bodies 0

2107 11 soft_bodies 0 66 0 1311 0 0 0 0 1283 24 BulletWorld::soft_bodies 0

2108 10 characters 0 66 0 1312 0 0 0 0 1285 23 BulletWorld::characters 0

2109 8 vehicles 0 66 0 1313 0 0 0 0 1289 21 BulletWorld::vehicles 0

2110 11 constraints 0 66 0 1314 0 0 0 0 1291 24 BulletWorld::constraints 0

2111 9 manifolds 0 66 0 1325 0 0 0 0 1299 22 BulletWorld::manifolds 0

2112 5 node0 0 2 0 1316 0 0 0 0 0 31 BulletPersistentManifold::node0 0

2113 5 node1 0 2 0 1317 0 0 0 0 0 31 BulletPersistentManifold::node1 0

2114 15 manifold_points 0 66 0 1323 0 0 0 0 1318 41 BulletPersistentManifold::manifold_points 0

2115 26 contact_breaking_threshold 0 2 0 1320 0 0 0 0 0 52 BulletPersistentManifold::contact_breaking_threshold 0

2116 28 contact_processing_threshold 0 2 0 1321 0 0 0 0 0 54 BulletPersistentManifold::contact_processing_threshold 0

2117 10 num_points 0 2 0 1344 0 0 0 0 0 39 BulletConvexPointCloudShape::num_points 0

2118 6 radius 0 2 0 1348 0 0 0 0 0 27 BulletCylinderShape::radius 0

2119 27 half_extents_without_margin 0 2 0 1349 0 0 0 0 0 48 BulletCylinderShape::half_extents_without_margin 0

2120 24 half_extents_with_margin 0 2 0 1350 0 0 0 0 0 45 BulletCylinderShape::half_extents_with_margin 0

2121 6 node_0 0 2 0 1353 0 0 0 0 0 32 BulletFilterCallbackData::node_0 0

2122 6 node_1 0 2 0 1354 0 0 0 0 0 32 BulletFilterCallbackData::node_1 0

2123 7 collide 0 6 0 1356 1355 0 0 0 0 33 BulletFilterCallbackData::collide 0

2124 7 limited 0 2 0 1373 0 0 0 0 0 35 BulletRotationalLimitMotor::limited 0

2125 13 motor_enabled 0 6 0 1374 1361 0 0 0 0 41 BulletRotationalLimitMotor::motor_enabled 0

2126 13 current_limit 0 2 0 1375 0 0 0 0 0 41 BulletRotationalLimitMotor::current_limit 0

2127 13 current_error 0 2 0 1376 0 0 0 0 0 41 BulletRotationalLimitMotor::current_error 0

2128 16 current_position 0 2 0 1377 0 0 0 0 0 44 BulletRotationalLimitMotor::current_position 0

2129 19 accumulated_impulse 0 2 0 1378 0 0 0 0 0 47 BulletRotationalLimitMotor::accumulated_impulse 0

2130 13 current_error 0 2 0 1395 0 0 0 0 0 44 BulletTranslationalLimitMotor::current_error 0

2131 12 current_diff 0 2 0 1396 0 0 0 0 0 43 BulletTranslationalLimitMotor::current_diff 0

2132 19 accumulated_impulse 0 2 0 1397 0 0 0 0 0 50 BulletTranslationalLimitMotor::accumulated_impulse 0

2133 25 translational_limit_motor 0 2 0 1405 0 0 0 0 0 50 BulletGenericConstraint::translational_limit_motor 0

2134 7 frame_a 0 2 0 1407 0 0 0 0 0 32 BulletGenericConstraint::frame_a 0

2135 7 frame_b 0 2 0 1408 0 0 0 0 0 32 BulletGenericConstraint::frame_b 0

2136 8 sb_index 0 2 0 1415 0 0 0 0 0 22 BulletHelper::sb_index 17
// Internal names

2137 7 sb_flip 0 2 0 1416 0 0 0 0 0 21 BulletHelper::sb_flip 0

2138 11 hinge_angle 0 2 0 1425 0 0 0 0 0 34 BulletHingeConstraint::hinge_angle 0

2139 11 lower_limit 0 2 0 1426 0 0 0 0 0 34 BulletHingeConstraint::lower_limit 0

2140 11 upper_limit 0 2 0 1427 0 0 0 0 0 34 BulletHingeConstraint::upper_limit 0

2141 12 angular_only 0 6 0 1428 1429 0 0 0 0 35 BulletHingeConstraint::angular_only 0

2142 7 frame_a 0 2 0 1437 0 0 0 0 0 30 BulletHingeConstraint::frame_a 0

2143 7 frame_b 0 2 0 1438 0 0 0 0 0 30 BulletHingeConstraint::frame_b 0

2144 11 transform_a 0 6 0 1444 1442 0 0 0 0 36 BulletMinkowskiSumShape::transform_a 0

2145 11 transform_b 0 6 0 1445 1443 0 0 0 0 36 BulletMinkowskiSumShape::transform_b 0

2146 7 shape_a 0 2 0 1446 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_a 0

2147 7 shape_b 0 2 0 1447 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_b 0

2148 6 margin 0 2 0 1448 0 0 0 0 0 31 BulletMinkowskiSumShape::margin 0

2149 12 sphere_count 0 2 0 1452 0 0 0 0 0 36 BulletMultiSphereShape::sphere_count 0

2150 10 sphere_pos 0 66 0 1455 0 0 0 0 1452 34 BulletMultiSphereShape::sphere_pos 0

2151 13 sphere_radius 0 66 0 1456 0 0 0 0 1452 37 BulletMultiSphereShape::sphere_radius 0

2152 12 plane_normal 0 2 0 1460 0 0 0 0 0 30 BulletPlaneShape::plane_normal 0

2153 14 plane_constant 0 2 0 1461 0 0 0 0 0 32 BulletPlaneShape::plane_constant 0

2154 10 linear_pos 0 2 0 1465 0 0 0 0 0 34 BulletSliderConstraint::linear_pos 0

2155 11 angular_pos 0 2 0 1466 0 0 0 0 0 35 BulletSliderConstraint::angular_pos 0

2156 18 lower_linear_limit 0 6 0 1467 1471 0 0 0 0 42 BulletSliderConstraint::lower_linear_limit 9
// Limits

2157 18 upper_linear_limit 0 6 0 1468 1472 0 0 0 0 42 BulletSliderConstraint::upper_linear_limit 0

2158 19 lower_angular_limit 0 6 0 1469 1473 0 0 0 0 43 BulletSliderConstraint::lower_angular_limit 0

2159 19 upper_angular_limit 0 6 0 1470 1474 0 0 0 0 43 BulletSliderConstraint::upper_angular_limit 0

2160 20 powered_linear_motor 0 6 0 1478 1475 0 0 0 0 44 BulletSliderConstraint::powered_linear_motor 0

2161 28 target_linear_motor_velocity 0 6 0 1479 1476 0 0 0 0 52 BulletSliderConstraint::target_linear_motor_velocity 0

2162 22 max_linear_motor_force 0 6 0 1480 1477 0 0 0 0 46 BulletSliderConstraint::max_linear_motor_force 0

2163 21 powered_angular_motor 0 6 0 1484 1481 0 0 0 0 45 BulletSliderConstraint::powered_angular_motor 0

2164 29 target_angular_motor_velocity 0 6 0 1485 1482 0 0 0 0 53 BulletSliderConstraint::target_angular_motor_velocity 0

2165 23 max_angular_motor_force 0 6 0 1486 1483 0 0 0 0 47 BulletSliderConstraint::max_angular_motor_force 0

2166 7 frame_a 0 2 0 1488 0 0 0 0 0 31 BulletSliderConstraint::frame_a 0

2167 7 frame_b 0 2 0 1489 0 0 0 0 0 31 BulletSliderConstraint::frame_b 0

2168 4 body 0 2 0 1499 0 0 0 0 0 25 BulletSoftBodyShape::body 0

2169 6 radius 0 2 0 1503 0 0 0 0 0 25 BulletSphereShape::radius 0

2170 7 pivot_a 0 6 0 1509 1507 0 0 0 0 34 BulletSphericalConstraint::pivot_a 0

2171 7 pivot_b 0 6 0 1510 1508 0 0 0 0 34 BulletSphericalConstraint::pivot_b 0

2172 8 timestep 0 2 0 1513 0 0 0 0 0 32 BulletTickCallbackData::timestep 0

2173 16 welding_distance 0 6 0 1523 1520 0 0 0 0 36 BulletTriangleMesh::welding_distance 0

2174 8 vertices 0 66 0 1527 0 0 0 0 1526 28 BulletTriangleMesh::vertices 0

2175 9 triangles 0 66 0 1528 0 0 0 0 1522 29 BulletTriangleMesh::triangles 0

2176 6 static 0 2 0 1533 0 0 0 0 0 31 BulletTriangleMeshShape::static 0

2177 7 dynamic 0 2 0 1534 0 0 0 0 0 32 BulletTriangleMeshShape::dynamic 0

15
2178 8 get_hits 0 782 783 32 BulletAllHitsRayResult::get_hits 0

2179 10 get_shapes 0 802 803 26 BulletBodyNode::get_shapes 0

2180 12 get_contacts 0 1025 1026 33 BulletContactResult::get_contacts 0

2181 21 get_overlapping_nodes 0 1041 1042 38 BulletGhostNode::get_overlapping_nodes 0

2182 13 get_materials 0 1087 1088 33 BulletSoftBodyNode::get_materials 0

2183 9 get_nodes 0 1090 1091 29 BulletSoftBodyNode::get_nodes 0

2184 10 get_wheels 0 1202 1203 25 BulletVehicle::get_wheels 0

2185 10 get_ghosts 0 1279 1280 23 BulletWorld::get_ghosts 0

2186 16 get_rigid_bodies 0 1281 1282 29 BulletWorld::get_rigid_bodies 0

2187 15 get_soft_bodies 0 1283 1284 28 BulletWorld::get_soft_bodies 0

2188 14 get_characters 0 1285 1286 27 BulletWorld::get_characters 0

2189 12 get_vehicles 0 1289 1290 25 BulletWorld::get_vehicles 0

2190 15 get_constraints 0 1291 1292 28 BulletWorld::get_constraints 0

2191 13 get_manifolds 0 1299 1300 26 BulletWorld::get_manifolds 0

2192 19 get_manifold_points 0 1318 1319 45 BulletPersistentManifold::get_manifold_points 0

